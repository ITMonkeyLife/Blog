<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[IT Monkey Life]]></title>
  <link href="http://ITMonkeyLife.github.io/Blog/atom.xml" rel="self"/>
  <link href="http://ITMonkeyLife.github.io/Blog/"/>
  <updated>2016-09-06T15:59:32+08:00</updated>
  <id>http://ITMonkeyLife.github.io/Blog/</id>
  <author>
    <name><![CDATA[Rick]]></name>
    <email><![CDATA[382542165@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[音乐乐理:五线谱，谱号，加线]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-wu-xian-pu-%2Cpu-hao-%2Cjia-xian/"/>
    <updated>2016-09-06T10:02:28+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-wu-xian-pu-,pu-hao-,jia-xian</id>
    <content type="html"><![CDATA[<p>
<code>五线谱</code>是对音符绘制的基础。现代的五线谱是由5根线和4个空间组成的。
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jn3flan2j21kw0lcdh6.jpg" />
在五线谱上的每行线或者空白处都表示键盘上的白建。
<br />
</p>

<p>
谱号分配给各个音符某些行或空格。
两个谱号经常用到，分别是：高音和低音。
<br />
<img src="http://ww3.sinaimg.cn/large/626e5d69gw1f7jqbp0363j21kw0lcq4r.jpg" />
<br />
我们先讨论高音（通常也称为G 谱）.该谱号环绕（显示为红色）五线谱线被称为G.放在该行的任何音符变成G.
<br />
G调以上的空白处的调是A调（记住，没有一个“H”调）
<br />
A调以上的调是B调。以此类推，G、A、B、C、D、E、F、G
<br />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f7jqd7qzk5j21kw0lcdi6.jpg" />
额我们看来已经超过了五线谱的范围了，这时候该怎么办？
</p>

<p>
加线将解决我们的困境。
我们在五线谱之外，额外添加一条线，然后在这个线处继续添加A
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jsx3rujij21kw0lcdi5.jpg" />
</p>

<p>
接下来，我们看看低音（也被称为F谱）
F谱是在这两个点之间的线上做的谱。
<br />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f7jsz10y8bj21kw0lc0u3.jpg" />
我们把剩下的五线谱上的谱都标记出来。
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jsxovewdj21kw0lcjtl.jpg" />
</p>

<p>
最后我们来看看Grand Staff,五线谱基于原理组成的十一条线。消掉中间的线，变成两个五线谱。
<br />
<img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7jtlgp82ej21kw0lcmzh.jpg" />
</p>

<p>
在上面的五线谱添加高音，下面的五线谱添加低音，我们能看到这两个五线谱的关系。
我们注意到这两个五线谱通过C谱连接在一起（红色展示）,在这里的C通常称中C,因为它对应于Grand Staff中间的线
</p>

<p>
下面是本小节完整的演示。
</p>
<p>
<video width="800" height="300" controls="controls" preload="auto">
 <source src="http://ITMonkeyLife.github.io/Blog/videos/lesson10.mp4" type="video/mp4" />
</video>
<!-- <embed src="http://www.musictheory.net/vc/6/0/53481700c244fded30bde8b5683ebc08f0eaafe6/lesson10.swf"
width="800" height="380"
type="application/x-shockwave-flash"> &#8211;>
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 推送证书过期指南]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/05/ios-tui-song-zheng-shu-guo-qi-zhi-nan/"/>
    <updated>2016-09-05T12:30:46+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/05/ios-tui-song-zheng-shu-guo-qi-zhi-nan</id>
    <content type="html"><![CDATA[<p>  
今天一早，运维部门同事，说咱们友盟上面推送证书已经到期了。那么到期了证书应该怎么样去更换新的证书呢。
</p>
<p>
1、我们先去<a href="https://developer.apple.com/account/ios/certificate/distribution">苹果开发者中心</a>新建一个Certificates证书。
</p>
<p>
2、下载<code>Cert</code>文件到本地，双击之后。在<code>Keychain Access</code>中找到我们创建的证书。Export导出p12格式，创建密码。
</p>
<p>
3、有时候后端需要pem格式的证书,我们通过终端进入p12 文件所在的文件夹，通过终端输入下面的命令生成pem文件
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">openssl pkcs12 -in dev_push_Certificates.p12 -out apns-dev-cert.pem -nodes -clcerts
</span><span class="line">Enter Import Password:
</span><span class="line">MAC verified OK</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
4、生成证书后，只要替换Push证书就好了。
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发锦囊]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/29/ioskai-fa-jin-nang/"/>
    <updated>2016-08-29T15:44:35+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/29/ioskai-fa-jin-nang</id>
    <content type="html"><![CDATA[<p>
1、判断是不是AppStore版本
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isAppStoreEnvironment</span> <span class="p">{</span>
</span><span class="line"><span class="cp">#if TARGET_OS_IOS &amp;&amp; !TARGET_IPHONE_SIMULATOR</span>
</span><span class="line">    <span class="k">return</span> <span class="p">([[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;embedded&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;mobileprovision&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
<p>
2、判断当前系统时区名称
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">currentSystemTimeZoneName</span> <span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">NSLock</span> <span class="o">*</span> <span class="n">methodLock</span><span class="p">;</span>
</span><span class="line">    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class="line">    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">methodLock</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSLock</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">methodLock</span> <span class="n">lock</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">NSTimeZone</span> <span class="n">resetSystemTimeZone</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span> <span class="n">systemTimeZoneName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSTimeZone</span> <span class="n">systemTimeZone</span><span class="p">].</span><span class="n">name</span> <span class="n">copy</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">methodLock</span> <span class="n">unlock</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">systemTimeZoneName</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
3、安全的执行method
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Performs selector on the target, only if the target and selector are non-nil,</span>
</span><span class="line"><span class="cm"> * as well as target responds to selector</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safePerformSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">withTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span> <span class="nf">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="nf">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">anotherObject</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="n">selector</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="o">!</span><span class="p">[</span><span class="n">target</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma clang diagnostic push</span>
</span><span class="line"><span class="cp">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span>
</span><span class="line">    <span class="p">[</span><span class="n">target</span> <span class="nl">performSelector:</span><span class="n">selector</span> <span class="nl">withObject:</span><span class="n">object</span> <span class="nl">withObject:</span><span class="n">anotherObject</span><span class="p">];</span>
</span><span class="line"><span class="cp">#pragma clang diagnostic pop</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
4、主线程执行
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">_newSystemLocationManager</span> <span class="p">{</span>
</span><span class="line">    <span class="n">__</span> <span class="n">block</span> <span class="n">CLLocationManager</span> <span class="o">*</span> <span class="n">manager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// CLLocationManager should be created only on main thread, as it needs a run loop to serve delegate callbacks</span>
</span><span class="line">    <span class="n">dispatch_block_t</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">].</span><span class="n">isMainThread</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">block</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">manager</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
5、添加Block
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addBlockForCurrentLocation:</span><span class="p">(</span><span class="n">PFLocationManagerLocationUpdateBlock</span><span class="p">)</span><span class="nv">handler</span> <span class="p">{</span>
</span><span class="line">    <span class="k">@synchronized</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">blockSet</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">blockSet</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">handler</span> <span class="n">copy</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//</span>
</span><span class="line">    <span class="c1">// Abandon hope all ye who enter here.</span>
</span><span class="line">    <span class="c1">// Apparently, the CLLocationManager API is different for iOS/OSX/watchOS/tvOS up to the point,</span>
</span><span class="line">    <span class="c1">// where encapsulating pieces together just makes much more sense</span>
</span><span class="line">    <span class="c1">// than hard to human-parse compiled out pieces of the code.</span>
</span><span class="line">    <span class="c1">// This looks duplicated, slightly, but very much intentional.</span>
</span><span class="line">    <span class="c1">//</span>
</span><span class="line"><span class="cp">#if TARGET_OS_WATCH</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="s">@&quot;NSLocationWhenInUseUsageDescription&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif TARGET_OS_TV</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif TARGET_OS_IOS</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">applicationState</span> <span class="o">!=</span> <span class="n">UIApplicationStateBackground</span> <span class="o">&amp;&amp;</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="s">@&quot;NSLocationWhenInUseUsageDescription&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif PF_TARGET_OS_OSX</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
6、安全执行线程
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class="line"><span class="k">extern</span> <span class="n">dispatch_queue_t</span> <span class="nf">JPThreadsafetyCreateQueueForObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">void</span> <span class="nf">JPThreadsafetySafeDispatchSync</span><span class="p">(</span><span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span> <span class="n">dispatch_block_t</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line"><span class="cp">#define JPThreadSafetyPerform(queue, block) ({                      \</span>
</span><span class="line"><span class="cp">    __ block typeof((block())) result;                              \</span>
</span><span class="line"><span class="cp">    JPThreadsafetySafeDispatchSync(queue, ^{ result = block(); }); \</span>
</span><span class="line"><span class="cp">    result;                                                        \</span>
</span><span class="line"><span class="cp">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;JPThreadsafety.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="k">const</span> <span class="n">JPThreadsafetyQueueIDKey</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">JPThreadsafetyQueueIDKey</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">dispatch_queue_t</span> <span class="nf">JPThreadsafetyCreateQueueForObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span><span class="o">*</span> <span class="n">label</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">object</span> <span class="n">class</span><span class="p">])</span> <span class="nl">stringByAppendingString:</span><span class="s">@&quot;.synchronizationQueue&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_SERIAL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid</span><span class="p">));</span>
</span><span class="line">    <span class="n">dispatch_queue_set_specific</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">JPThreadsafetyQueueIDKey</span><span class="p">,</span> <span class="n">uuid</span><span class="p">,</span> <span class="n">free</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">queue</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">JPThreadsafetySafeDispatchSync</span><span class="p">(</span><span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span> <span class="n">dispatch_block_t</span> <span class="n">block</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuidMine</span> <span class="o">=</span> <span class="n">dispatch_get_specific</span><span class="p">(</span><span class="n">JPThreadsafetyQueueIDKey</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuidOther</span> <span class="o">=</span> <span class="n">dispatch_queue_get_specific</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">JPThreadsafetyQueueIDKey</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">uuidMine</span> <span class="o">==</span> <span class="n">uuidOther</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">block</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Swizzling]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/26/method-swizzling/"/>
    <updated>2016-08-26T09:43:31+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/26/method-swizzling</id>
    <content type="html"><![CDATA[<p>
在没有一个类的实现源码的情况下，想改变其中一个方法的实现，除了继承它重写、和借助类别重名方法暴力抢先之外，还有更加灵活的方法吗？在Objective-C编程中，如何实现hook呢？标题有点大，计划分几篇来总结。

本文主要介绍针对selector的hook，主角被标题剧透了———— Method Swizzling
</p>
<h2>Method Swizzling 原理</h2>
<p>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是selector的名字。利用Objective-C的动态特性，可以实现在运行时偷换selector对应的方法实现，达到给方法挂钩的目的。</p>
<p>每个类都有一个方法列表，存放着selector的名字和方法实现的映射关系。IMP有点类似函数指针，指向具体的Method实现。</p>
<p><img src="http://ww3.sinaimg.cn/large/626e5d69gw1f76wrdzvssj214y0dcmxy.jpg" /></p>
<p>
我们可以利用 method_exchangeImplementations 来交换2个方法中的IMP，

我们可以利用 class_replaceMethod 来修改类，

我们可以利用 method_setImplementation 来直接设置某个方法的IMP，
……
归根结底，都是偷换了selector的IMP，如下图所示：
</p>
<p><img src="http://ww2.sinaimg.cn/large/626e5d69gw1f76wshrop2j20kf09mt95.jpg" /></p>
<h2>Method Swizzling 实践</h2>
<p>

举个例子好了，我想钩一下NSArray的lastObject 方法，只需两个步骤。
第一步：给NSArray加一个我自己的lastObject
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;NSArray+Swizzle.h&quot;  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSArray</span> <span class="nl">(Swizzle)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">myLastObject</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">id</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">myLastObject</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;**********  myLastObject *********** &quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
乍一看，这不递归了么？别忘记这是我们准备调换IMP的selector，[self myLastObject] 将会执行真的 [self lastObject] 。
</p>
<p>
第二步：调换IMP
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;objc/runtime.h&gt;  </span>
</span><span class="line"><span class="cp">#import &quot;NSArray+Swizzle.h&quot;  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">Method</span> <span class="n">ori_Method</span> <span class="o">=</span>  <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">lastObject</span><span class="p">));</span>
</span><span class="line">        <span class="n">Method</span> <span class="n">my_Method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">myLastObject</span><span class="p">));</span>
</span><span class="line">        <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">ori_Method</span><span class="p">,</span> <span class="n">my_Method</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;0&quot;</span><span class="p">,</span><span class="s">@&quot;1&quot;</span><span class="p">,</span><span class="s">@&quot;2&quot;</span><span class="p">,</span><span class="s">@&quot;3&quot;</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSString</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;TEST RESULT : %@&quot;</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<!-- more -->
<p>
控制台输出Log：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="mi">2013</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">18</span> <span class="mi">16</span><span class="o">:</span><span class="mi">26</span><span class="o">:</span><span class="mf">12.585</span> <span class="n">Hook</span><span class="p">[</span><span class="mi">1740</span><span class="o">:</span><span class="n">c07</span><span class="p">]</span> <span class="o">**********</span>  <span class="n">myLastObject</span> <span class="o">***********</span>
</span><span class="line"><span class="mi">2013</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">18</span> <span class="mi">16</span><span class="o">:</span><span class="mi">26</span><span class="o">:</span><span class="mf">12.589</span> <span class="n">Hook</span><span class="p">[</span><span class="mi">1740</span><span class="o">:</span><span class="n">c07</span><span class="p">]</span> <span class="n">TEST</span> <span class="n">RESULT</span> <span class="o">:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
结果很让人欣喜，是不是忍不住想给UIWebView的loadRequest: 加 TODO 了呢？
</p>
<h2>Method Swizzling 的封装</h2>
<p>之前在github上找到的RNSwizzle，推荐给大家，可以搜一下。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//  </span>
</span><span class="line"><span class="c1">//  RNSwizzle.m  </span>
</span><span class="line"><span class="c1">//  MethodSwizzle  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cp">#import &quot;RNSwizzle.h&quot;  </span>
</span><span class="line"><span class="cp">#import &lt;objc/runtime.h&gt;  </span>
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(RNSwizzle)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nf">swizzleSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">origSelector</span>
</span><span class="line">               <span class="nf">withIMP:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nv">newIMP</span> <span class="p">{</span>
</span><span class="line">  <span class="n">Class</span> <span class="n">class</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">class</span><span class="p">];</span>
</span><span class="line">  <span class="n">Method</span> <span class="n">origMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span>
</span><span class="line">                                              <span class="n">origSelector</span><span class="p">);</span>
</span><span class="line">  <span class="n">IMP</span> <span class="n">origIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">origMethod</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">class_addMethod</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">origSelector</span><span class="p">,</span> <span class="n">newIMP</span><span class="p">,</span>
</span><span class="line">                      <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">origMethod</span><span class="p">)))</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">origMethod</span><span class="p">,</span> <span class="n">newIMP</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">origIMP</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<h2>Method Swizzling 危险不危险</h2>
<p>
针对这个问题，我在<a href="http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c">stackoverflow</a>上看到了满意的答案，这里翻译一下，总结记录在本文中，以示分享：


使用 Method Swizzling 编程就好比切菜时使用锋利的刀，一些人因为担心切到自己所以害怕锋利的刀具，可是事实上，使用钝刀往往更容易出事，而利刀更为安全。
Method swizzling 可以帮助我们写出更好的，更高效的，易维护的代码。但是如果滥用它，也将会导致难以排查的bug。
</p>
<h3>背景</h3>
<p>
好比设计模式，如果我们摸清了一个模式的门道，使用该模式与否我们自己心里有数。单例模式就是一个很好的例子，它饱受争议但是许多人依旧使用它。Method Swizzling也是一样，一旦你真正理解它的优势和弊端，使用它与否你应该就有你自己的观点。
</p>
<h3>讨论</h3>
<p>
这里是一些 Method Swizzling的陷阱：
Method swizzling is not atomic
Changes behavior of un-owned code
Possible naming conflicts
Swizzling changes the method arguments
The order of swizzles matters
Difficult to understand (looks recursive)
Difficult to debug
</p>
<p>我将逐一分析这些点，增进对Method Swizzling的理解的同时，并搞懂如何应对。</p>
<h4>Method swizzling is not atomic</h4>
<p>
我所见过的使用method swizzling实现的方法在并发使用时基本都是安全的。95%的情况里这都不会是个问题。通常你替换一个方法的实现，是希望它在整个程序的生命周期里有效的。也就是说，你会把 method swizzling 修改方法实现的操作放在一个加号方法 +(void)load里，并在应用程序的一开始就调用执行。你将不会碰到并发问题。假如你在 +(void)initialize初始化方法中进行swizzle，那么……rumtime可能死于一个诡异的状态。
</p>
<h4>Changes behavior of un-owned code</h4>
<p>
这是swizzling的一个问题。我们的目标是改变某些代码。swizzling方法是一件灰常灰常重要的事，当你不只是对一个NSButton类的实例进行了修改，而是程序中所有的NSButton实例。因此在swizzling时应该多加小心，但也不用总是去刻意避免。
</p>
<p>
想象一下，如果你重写了一个类的方法，而且没有调用父类的这个方法，这可能会引起问题。大多数情况下，父类方法期望会被调用（至少文档是这样说的）。如果你在swizzling实现中也这样做了，这会避免大部分问题。还是调用原始实现吧，如若不然，你会费很大力气去考虑代码的安全问题。
</p>
<h4>Possible naming conflicts</h4>
<p>
命名冲突贯穿整个Cocoa的问题. 我们常常在类名和类别方法名前加上前缀。不幸的是，命名冲突仍是个折磨。但是swizzling其实也不必过多考虑这个问题。我们只需要在原始方法命名前做小小的改动来命名就好，比如通常我们这样命名：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">NSView</span> : <span class="nc">NSObject</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSView</span> <span class="nl">(MyViewAdditions)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">my_setFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// do custom work  </span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">my_setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_setFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
这段代码运行正确，但是如果my_setFrame: 在别处被定义了会发生什么呢？

</p>
<p>
这个问题不仅仅存在于swizzling，这里有一个替代的变通方法：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">NSView</span> <span class="nl">(MyViewAdditions)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">MySetFrame</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">SetFrameIMP</span><span class="p">)(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">MySetFrame</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// do custom work  </span>
</span><span class="line">    <span class="n">SetFrameIMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="n">MySetFrame</span> <span class="nl">store:</span><span class="p">(</span><span class="n">IMP</span><span class="o">*</span> <span class="p">)</span><span class="o">&amp;</span><span class="n">SetFrameIMP</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
看起来不那么Objectice-C了（用了函数指针），这样避免了selector的命名冲突。

最后给出一个较完美的swizzle方法的定义：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">typedef</span> <span class="n">IMP</span> <span class="o">*</span><span class="n">IMPPointer</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">BOOL</span> <span class="nf">class_swizzleMethodAndStore</span><span class="p">(</span><span class="n">Class</span> <span class="n">class</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">original</span><span class="p">,</span> <span class="n">IMP</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">IMPPointer</span> <span class="n">store</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">IMP</span> <span class="n">imp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">original</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">type</span> <span class="o">=</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">method</span><span class="p">);</span>
</span><span class="line">        <span class="n">imp</span> <span class="o">=</span> <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">original</span><span class="p">,</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">imp</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">imp</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">method</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">imp</span> <span class="o">&amp;&amp;</span> <span class="n">store</span><span class="p">)</span> <span class="p">{</span> <span class="o">*</span> <span class="n">store</span> <span class="o">=</span> <span class="n">imp</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">imp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(FRRuntimeAdditions)</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">swizzle:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">original</span> <span class="nf">with:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nv">replacement</span> <span class="nf">store:</span><span class="p">(</span><span class="n">IMPPointer</span><span class="p">)</span><span class="nv">store</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">class_swizzleMethodAndStore</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">original</span><span class="p">,</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">store</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>Swizzling changes the method&#8217;s arguments</h4>
<p>
我认为这是最大的问题。想正常调用method swizzling 将会是个问题。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">self</span> <span class="nl">my_setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
直接调用my_setFrame: ， runtime做的是
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">my_setFrame:</span><span class="p">),</span> <span class="n">frame</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
runtime去寻找my_setFrame:的方法实现, _ cmd参数为 my_setFrame: ，但是事实上runtime找到的方法实现是原始的 setFrame: 的。
一个简单的解决办法：使用上面介绍的swizzling定义。
</p>
<h4>The order of swizzles matters</h4>
<p>
多个swizzle方法的执行顺序也需要注意。假设 setFrame: 只定义在NSView中，想像一下按照下面的顺序执行：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSButton</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_buttonSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSControl</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_controlSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSView</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_viewSetFrame:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
What happens when the method on NSButton is swizzled? Well most swizzling will ensure that it&#8217;s not replacing the implementation of setFrame: for all views, so it will pull up the instance method. This will use the existing implementation to re-define setFrame: in the NSButton class so that exchanging implementations doesn&#8217;t affect all views. The existing implementation is the one defined on NSView. The same thing will happen when swizzling on NSControl (again using the NSView implementation).

When you call setFrame: on a button, it will therefore call your swizzled method, and then jump straight to the setFrame: method originally defined on NSView. The NSControl and NSView swizzled implementations will not be called.

But what if the order were:
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSView</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_viewSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSControl</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_controlSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSButton</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_buttonSetFrame:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Since the view swizzling takes place first, the control swizzling will be able to pull up the right method. Likewise, since the control swizzling was before the button swizzling, the button will pull up the control&#8217;s swizzled implementation of setFrame:. This is a bit confusing, but this is the correct order. How can we ensure this order of things?

Again, just use load to swizzle things. If you swizzle in load and you only make changes to the class being loaded, you&#8217;ll be safe. The load method guarantees that the super class load method will be called before any subclasses. We&#8217;ll get the exact right order!
这段贴了原文，硬翻译太拗口……总结一下就是：多个有继承关系的类的对象swizzle时，先从父对象开始。 这样才能保证子类方法拿到父类中的被swizzle的实现。在+(void)load中swizzle不会出错，就是因为load类方法会默认从父类开始调用。
</p>
<h4>Difficult to understand (looks recursive)</h4>
<p>
（新方法的实现）看起来像递归，但是看看上面已经给出的 swizzling 封装方法, 使用起来就很易读懂.
这个问题是已完全解决的了！
</p>
<h4>Difficult to debug</h4>
<p>
debug时打出的backtrace，其中掺杂着被swizzle的方法名，一团糟啊！上面介绍的swizzle方案，使backtrace中打印出的方法名还是很清晰的。但仍然很难去debug，因为很难记住swizzling影响过什么。给你的代码写好文档（即使只有你一个人会看到）。养成一个好习惯，不会比调试多线程问题还难的。
</p>
<h2>结论</h2>
<p>
如果使用恰当，Method swizzling 还是很安全的.一个简单安全的方法是，仅在load中swizzle。 和许多其他东西一样，它也是有危险性的，但理解它了也就可以正确恰当的使用它了。
</p>

<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏感逻辑的保护方案]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/min-gan-luo-ji-de-bao-hu-fang-an/"/>
    <updated>2016-08-25T15:13:53+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/min-gan-luo-ji-de-bao-hu-fang-an</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">24</span> <span class="title">敏感逻辑的保护方案</span></h1>
    <p>Objective-C 代码容易被 hook，暴露信息太赤裸裸，为了安全，改用 C 来写吧！</p>

<div class="figure" id="figure-24-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760k4kot8j205p04gdfu.jpg" />

    <p class="caption"><strong>图片 24.1</strong> sensitive1</p>
</div>


<p>当然不是全部代码都要 C 来写，我指的是敏感业务逻辑代码。</p>

<p>本文就介绍一种低学习成本的，简易的，Objective-C 逻辑代码重写为 C 代码的办法。</p>

<p>也许，程序中存在一个类似这样的类：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">XXUtil</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isVerified</span><span class="p">;</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isNeedSomething</span><span class="p">;</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetPassword:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">password</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>被 class-dump 出来后，利用 Cycript 很容易实现攻击，容易被 hook ，存在很大的安全隐患。</p>

<div class="figure" id="figure-24-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760knfbzhj20350360sm.jpg" />

    <p class="caption"><strong>图片 24.2</strong> sensitive2</p>
</div>


<p>想改，但是不想大改程序结构，肿么办呢？</p>

<p>把函数名隐藏在结构体里，以函数指针成员的形式存储。
这样做的好处是，编译后，只留了下地址，去掉了名字和参数表，提高了逆向成本和攻击门槛。</p>

<p>改写的程序如下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//XXUtil.h  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_util</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isVerified</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isNeedSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">resetPassword</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span><span class="n">XXUtil_t</span> <span class="p">;</span>
</span><span class="line">
</span><span class="line"> <span class="err">#</span><span class="n">define</span> <span class="n">XXUtil</span> <span class="p">([</span><span class="n">_XXUtil</span> <span class="n">sharedUtil</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="nc">_XXUtil</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">//XXUtil.m  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;XXUtil.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isVerified</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isNeedSomething</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">_resetPassword</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="n">XXUtil_t</span> <span class="o">*</span> <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">@implementation</span> <span class="nc">_XXUtil</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span><span class="p">(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class="line">    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">util</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">XXUtil_t</span><span class="p">));</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isVerified</span> <span class="o">=</span> <span class="n">_isVerified</span><span class="p">;</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isNeedSomething</span> <span class="o">=</span> <span class="n">_isNeedSomething</span><span class="p">;</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">resetPassword</span> <span class="o">=</span> <span class="n">_resetPassword</span><span class="p">;</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="k">return</span> <span class="n">util</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">destroy</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">util</span> <span class="o">?</span> <span class="n">free</span><span class="p">(</span><span class="n">util</span><span class="p">)</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，根据 Xcode 的报错指引，把以前这样的调用
<code>[XXUtil isVerified];</code></p>

<p>对应改成：
<code>XXUtil-&gt;isVerified();</code></p>

<p>就可以了。</p>

<p>是的，绝不费一点脑子。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 代码混淆]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/objective-c-dai-ma-hun-yao/"/>
    <updated>2016-08-25T15:09:37+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/objective-c-dai-ma-hun-yao</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">23</span> <span class="title">Objective-C 代码混淆</span></h1>
    <p>class-dump 可以很方便的导出程序头文件，不仅让攻击者了解了程序结构方便逆向，还让着急赶进度时写出的欠完善的程序给同行留下笑柄。
所以，我们迫切的希望混淆自己的代码。</p>

<h3>混淆的常规思路</h3>

<p>混淆分许多思路，比如：</p>

<p>1）花代码花指令，即随意往程序中加入迷惑人的代码指令</p>

<p>2）易读字符替换 等等</p>

<div class="figure" id="figure-23-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760g4dzitj202o031dfp.jpg" />

    <p class="caption"><strong>图片 23.1</strong> confusion1</p>
</div>


<p>防止 class-dump 出可读信息的有效办法是易读字符替换。</p>

<h3>Objective-C 的方法名混淆</h3>

<h4>混淆的时机</h4>

<p>我们希望在开发时一直保留清晰可读的程序代码，方便自己。
同时，希望编译出来的二进制包含乱七八糟的混淆后的程序代码，恶心他人。</p>

<p>因此，我们可以在 Build Phrase 中设定在编译之前进行方法名的字符串替换。</p>

<h4>混淆的方法</h4>

<p>方法名混淆其实就是字符串替换，有 2 个方法可以，一个是 <code>#define</code>，一个是利用 tops。</p>

<p>利用 <code>#define</code> 的方法有一个好处，就是可以把混淆结果合并在一个 .h 中，在工程 Prefix.pch 的最前面 <code>#import</code> 这个 .h 。不导入也可以编译、导入则实现混淆。</p>

<p>单段的 selector ，如 <code>func:</code> ，可以通过 <code>#define func</code> 来实现字符串替换。</p>

<p>多段的 selector，如 <code>a:b:c:</code> ，可以通过分别 <code>#define a 、b、c</code> 来实现字符串替换。</p>

<h3>我的混淆工具</h3>

<p>我写了个简易的混淆脚本，主要思路是把敏感方法名集中写在一个名叫 func.list 的文件中，逐一 <code>#define</code> 成随机字符，追加写入 .h 。</p>

<p>脚本如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/env bash  
</span><span class="line">
</span><span class="line">TABLENAME=symbols  
</span><span class="line">SYMBOL_DB_FILE="symbols"  
</span><span class="line">STRING_SYMBOL_FILE="func.list"  
</span><span class="line">HEAD_FILE="$PROJECT_DIR/$PROJECT_NAME/codeObfuscation.h"  
</span><span class="line">export LC_CTYPE=C  
</span><span class="line">
</span><span class="line">#维护数据库方便日后作排重  
</span><span class="line">createTable()  
</span><span class="line">{  
</span><span class="line">   echo "create table $TABLENAME(src text, des text);" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">insertValue()  
</span><span class="line">{  
</span><span class="line">   echo "insert into $TABLENAME values('$1' ,'$2');" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">query()  
</span><span class="line">{  
</span><span class="line">   echo "select * from $TABLENAME where src='$1';" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">ramdomString()  
</span><span class="line">{  
</span><span class="line">   openssl rand -base64 64 | tr -cd 'a-zA-Z' |head -c 16  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">rm -f $SYMBOL_DB_FILE  
</span><span class="line">rm -f $HEAD_FILE  
</span><span class="line">createTable  
</span><span class="line">
</span><span class="line">touch $HEAD_FILE  
</span><span class="line">echo '#ifndef Demo_codeObfuscation_h  
</span><span class="line">#define Demo_codeObfuscation_h' &gt;&gt; $HEAD_FILE  
</span><span class="line">echo "//confuse string at `date`" &gt;&gt; $HEAD_FILE  
</span><span class="line">cat "$STRING_SYMBOL_FILE" | while read -ra line; do  
</span><span class="line">   if [[ ! -z "$line" ]]; then  
</span><span class="line">       ramdom=`ramdomString`  
</span><span class="line">       echo $line $ramdom  
</span><span class="line">       insertValue $line $ramdom  
</span><span class="line">       echo "#define $line $ramdom" &gt;&gt; $HEAD_FILE  
</span><span class="line">   fi  
</span><span class="line">done  
</span><span class="line">echo "#endif" &gt;&gt; $HEAD_FILE  
</span><span class="line">
</span><span class="line">
</span><span class="line">sqlite3 $SYMBOL_DB_FILE .dump</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>操作步骤</h4>

<p>1.将混淆脚本 confuse.sh 放到工程目录下
<code>mv confuse.sh your_proj_path/</code></p>

<p>2.修改 Prefix.pch</p>

<p>打开 Xcode，修改 XXX-Prefix.ch ，添加混淆头文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#ifdef __OBJC__  </span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">   <span class="c1">//添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  </span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="s">&quot;codeObfuscation.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.配置 Build Phase</p>

<p>在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：</p>

<div class="figure" id="figure-23-2">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f760gkuq1ej20z80eqjtx.jpg" />

    <p class="caption"><strong>图片 23.2</strong> confusion3</p>
</div>


<p>4.创建函数名列表 func.list ，写入待混淆的函数名，如:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">seg1:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="nf">seg2:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">num</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就这样写：</p>

<p>sample<br />
seg1<br />
seg2</p>

<p>并将文件放置于与 confuse.sh 脚本同级<br />
<code>mv func.list your_proj_path/</code></p>

<p>5.编译查看结果</p>

<p>直接 build，混淆脚本会在编译前运行，进行字符随机替换，并且每次 build 的随机字符不同，如图：</p>

<div class="figure" id="figure-23-3">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760hdde9nj20w40ecwjs.jpg" />

    <p class="caption"><strong>图片 23.3</strong> confusion4</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[static 和被裁的符号表]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/static-he-bei-cai-de-fu-hao-biao/"/>
    <updated>2016-08-25T15:07:51+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/static-he-bei-cai-de-fu-hao-biao</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">22</span> <span class="title">static 和被裁的符号表</span></h1>
    <p>为了不让攻击者理清自己程序的敏感业务逻辑，于是我们想方设法提高逆向门槛。</p>

<p>本文就介绍一个防御技巧——利用 static 关键字裁掉函数符号。</p>

<h3>原理</h3>

<p>如果函数属性为 static ，那么编译时该函数符号就会被解析为 local 符号。</p>

<p>在发布 release 程序时（用 Xcode 打包编译二进制）默认会 strip 裁掉这些函数符号，无疑给逆向者加大了工作难度。</p>

<h3>验证</h3>

<p>写个 demo 验证一下上述理论，以一段创建 Button 的代码为例，对应补充一个 static 版本。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">id</span> <span class="nf">createBtn</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIButton</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]];</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">btn</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">id</span> <span class="nf">static_createBtn</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIButton</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]];</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">btn</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再来看一下反编的结果，对于 createBtn() 方法，我们可以得到它的伪代码：</p>

<div class="figure" id="figure-22-1">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760d9iqmfj20ns10aakb.jpg" />

    <p class="caption"><strong>图片 22.1</strong> static</p>
</div>


<p>函数名虽然面目全非，但是基本操作还是清晰的。</p>

<p>对于<code>static_createBtn() </code>方法呢，我们已经无法看到它任何直观的有价值信息了。</p>

<h3>局限</h3>

<p>当然这种方法也有局限性。正如你所知道的，<code>static </code>函数，只在本文件可见。</p>

<h3>打破局限</h3>

<p>怎么让别的文件也能调到本文件的<code> static </code>方法呢？</p>

<p>在本文件建造一个结构体，结构体里包含函数指针。把<code> static </code>函数的函数指针都赋在这个结构体里，再把这个结构体抛出去。</p>

<p>这样做的好处是，既隐藏了函数代码也丰富了调用方式。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[废除应用程序的 ASLR特性]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fei-chu-ying-yong-cheng-xu-de-aslrte-xing/"/>
    <updated>2016-08-25T15:02:16+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fei-chu-ying-yong-cheng-xu-de-aslrte-xing</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">21</span> <span class="title">废除应用程序的 ASLR 特性</span></h1>
    <p>ASLR (Address Space Layout Randomization)，即地址空间随机布局。大部分主流的操作系统都已实现了 ASLR，以防范对已知地址进行恶意攻击。iOS 从 4.3 开始支持 ASLR，Android 从 4.0 也支持了 ASLR 机制。</p>

<p>ASLR 的存在，给 iOS 系统越狱造成了很大的困难，某些不完美越狱方案就是因为攻破不了或者绕不开 ASLR ，所以每次重新启动后地址再度随机偏移，需要重新进行越狱操作。与此同时，ASLR 也给应用层攻击带来了一些困难，不同进程会造成不同的地址空间偏移，而且在运行时才可确定其偏移量，不易锁定攻击地址。</p>

<p><code>Mach-O </code>文件的文件头会记录二进制的属性标识，有个 flag 叫做 PIE  (Position Independent Enable)。开启了 PIE 的二进制文件，在执行时会产生 ASLR 。</p>

<p>我们可以使用<code> otool </code>工具，来查看任意应用程序二进制文件的属性，以支付宝为例：<br />
<code>otool -hv Portal</code></p>

<div class="figure" id="figure-21-1">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f7607zmgrxj216a032ju4.jpg" />

    <p class="caption"><strong>图片 21.1</strong> aslr</p>
</div>


<p>有 PIE 标识，表示该程序在启动时会产生随机地址布局。</p>

<div class="figure" id="figure-21-2">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7608woa04j202m02s3yc.jpg" />

    <p class="caption"><strong>图片 21.2</strong> aslr1</p>
</div>
<a href="https://github.com/peterfillmore/removePIE">removePIE</a> 是个去掉 PIE flag 的工具。

<p>坏消息是，年久失修，它不支持 iOS7 。
好消息是，我们还有 2 个变通方法可以走。<br />
    - 利用<code> Theos </code>编译 removePIE<br />
    - 改编一个 Mac 版的 MyRemovePIE</p>

<p>非越狱开发者可能不熟悉 Theos ，低学习成本的做法是第二种，那么让我们来改编一个 Mac 版的 MyRemovePIE 吧。
（懒得动手的可以直接到<a href="https://github.com/CarinaTT/MyRemovePIE">这里</a>下载 demo ）</p>

<p>创建一个 Command Line Tool 工程，</p>

<div class="figure" id="figure-21-3">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7609flo73j214k0rgqac.jpg" />

    <p class="caption"><strong>图片 21.3</strong> aslr2</p>
</div>


<p>然后复制 <a href="https://github.com/peterfillmore/removePIE/blob/master/removePIE.c">removePIE.c</a>  代码到 <code>main.c</code> 中，并且修改第 43 行：
    <code>if(currentHeader.magic == MH_MAGIC){ //little endian</code></p>

<p>添加 iOS7 的判断条件:
    <code>if(currentHeader.magic == MH_MAGIC || currentHeader.magic == 0xbebafeca ){ //little endian</code></p>

<p>编译后生成可执行文件 MyRemovePIE .</p>

<p>利用我们编译生成的 MyRemovePIE 来处理应用程序：</p>

<p><code>./MyRemovePIE Portal</code></p>

<div class="figure" id="figure-21-4">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f76079jd97j20p409iad1.jpg" />

    <p class="caption"><strong>图片 21.4</strong> aslr3</p>
</div>


<p>这样以后支付宝 Portal 再被启动执行就不会具有 ASLR 特性了</p>

<div class="figure" id="figure-21-5">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7609ztn5kj215y04egnk.jpg" />

    <p class="caption"><strong>图片 21.5</strong> aslr4</p>
</div>


<p>如何验证一下结果呢？</p>

<p>把处理过的 Portal 二进制拷贝回 iPhone ，启动支付宝钱包应用，然后 gdb 该进程，利用<code> info sh </code>命令查看偏移：</p>

<div class="figure" id="figure-21-6">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f760anz667j21kw066gri.jpg" />

    <p class="caption"><strong>图片 21.6</strong> aslr5</p>
</div>


<p>偏移量为 0 ，嗯，这下就好了。一些手动处理的过程可以升级为自动了～ <div class="figure" id="figure-21-7">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f760b57h2fj202j02ka9v.jpg" />

    <p class="caption"><strong>图片 21.7</strong> aslr6</p>
</div>




<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[越狱检测的攻与防]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/yue-yu-jian-ce-de-gong-yu-fang/"/>
    <updated>2016-08-25T14:58:25+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/yue-yu-jian-ce-de-gong-yu-fang</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">20</span> <span class="title">越狱检测的攻与防</span></h1>
    <p>在应用开发过程中，我们希望知道设备是否越狱，正以什么权限运行程序，好对应采取一些防御和安全提示措施。</p>

<p>iOS7 相比之前版本的系统而言，升级了沙盒机制，封锁了几乎全部应用沙盒可以共享数据的入口。即使在越狱情况下，限制也非常多，大大增加了应用层攻击难度。比如，在 iOS7 之前，我们可以尝试往沙盒外写文件判断是否越狱，但 iOS7 越狱后也无该权限，还使用老方法检测会导致误判。</p>

<p>那么，到底应该如何检测越狱呢？攻击者又会如果攻破检测呢？本文就着重讨论一下越狱检测的攻与防。</p>

<div class="figure" id="figure-20-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7603q16m8j203703i3yg.jpg" />

    <p class="caption"><strong>图片 20.1</strong> gongfang</p>
</div>


<p>首先，你可以尝试使用<code> NSFileManager </code>判断设备是否安装了如下越狱常用工具：</p>

<p>/Applications/Cydia.app
/Library/MobileSubstrate/MobileSubstrate.dylib
/bin/bash
/usr/sbin/sshd
/etc/apt</p>

<p>但是不要写成<code> BOOL </code>开关方法，给攻击者直接锁定目标<code> hook </code>绕过的机会</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isJailbroken</span><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath:</span><span class="s">@&quot;/Applications/Cydia.app&quot;</span><span class="p">]){</span>
</span><span class="line">        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// ...  </span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>攻击者可能会改变这些工具的安装路径，躲过你的判断。</p>

<p>那么，你可以尝试打开<code> cydia </code>应用注册的<code> URL scheme：</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span><span class="p">([[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">canOpenURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;cydia://package/com.example.package&quot;</span><span class="p">]]){</span>
</span><span class="line">     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是不是所有的工具都会注册<code> URL scheme</code>，而且攻击者可以修改任何应用的<code> URL scheme</code>。</p>

<p>那么，你可以尝试读取下应用列表，看看有无权限获取：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">([[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath:</span><span class="s">@&quot;/User/Applications/&quot;</span><span class="p">]){</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSArray</span><span class="o">*</span> <span class="n">applist</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">contentsOfDirectoryAtPath:</span><span class="s">@&quot;/User/Applications/&quot;</span>
</span><span class="line">                                                                               <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;applist = %@&quot;</span><span class="p">,</span><span class="n">applist</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>越了狱的设备是可以获取到的：</p>

<div class="figure" id="figure-20-2">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760484s75j20zc0cg7ce.jpg" />

    <p class="caption"><strong>图片 20.2</strong> gongfang2</p>
</div>


<p>攻击者可能会<code> hook NSFileManager </code>的方法，让你的想法不能如愿。</p>

<p>那么，你可以回避<code> NSFileManager</code>，使用 <code>stat </code>系列函数检测<code> Cydia </code>等工具：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;sys/stat.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkCydia</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">   <span class="k">struct</span> <span class="n">stat</span> <span class="n">stat_info</span><span class="p">;</span>
</span><span class="line">   <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">stat</span><span class="p">(</span><span class="s">&quot;/Applications/Cydia.app&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stat_info</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">       <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>攻击者可能会利用 <a href="blog/2016/08/25/fish-hook/">Fishhook 原理</a> hook 了 stat 。</p>

<p>那么，你可以看看<code> stat </code>是不是出自系统库，有没有被攻击者换掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;dlfcn.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkInject</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span> <span class="p">;</span>
</span><span class="line">    <span class="n">Dl_info</span> <span class="n">dylib_info</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span> <span class="n">func_stat</span><span class="p">)(</span><span class="k">const</span> <span class="n">charchar</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span><span class="o">*</span> <span class="p">)</span> <span class="o">=</span> <span class="n">stat</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">dladdr</span><span class="p">(</span><span class="n">func_stat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dylib_info</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;lib :%s&quot;</span><span class="p">,</span> <span class="n">dylib_info</span><span class="p">.</span><span class="n">dli_fname</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果结果不是 <code>/usr/lib/system/libsystem_kernel.dylib</code> 的话，那就 <code>100%</code> 被攻击了。
如果 <code>libsystem_kernel.dylib</code> 都是被攻击者替换掉的……
那也没什么可防的大哥你随便吧……</p>

<p>那么，你可能会想，我该检索一下自己的应用程序是否被链接了异常动态库。
列出所有已链接的动态库：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;mach-o/dyld.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkDylibs</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">count</span> <span class="o">=</span> <span class="n">_dyld_image_count</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithUTF8String:</span><span class="n">_dyld_get_image_name</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;--%@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通常情况下，会包含越狱机的输出结果会包含字符串：<code>Library/MobileSubstrate/MobileSubstrate.dylib</code> 。</p>

<p>攻击者可能会给<code> MobileSubstrate </code>改名，但是原理都是通过 <code>DYLD_INSERT_LIBRARIES</code>注入动态库。</p>

<p>那么，你可以通过检测当前程序运行的环境变量：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">void</span> <span class="nf">printEnv</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">char</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;DYLD_INSERT_LIBRARIES&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">env</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>未越狱设备返回结果是<code> null </code>，越狱设备就各有各的精彩了，尤其是老一点的 iOS 版本越狱环境。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于脚本实现动态库注入]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ji-yu-jiao-ben-shi-xian-dong-tai-ku-zhu-ru/"/>
    <updated>2016-08-25T14:51:36+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ji-yu-jiao-ben-shi-xian-dong-tai-ku-zhu-ru</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">19</span> <span class="title">基于脚本实现动态库注入</span></h1>
    <p><code>MobileSubstrate </code>可以帮助我们加载自己的动态库，于是开发者们谨慎的采取了对<code> MobileSubstrate </code>的检索和防御措施。</p>

<p>那么，除了依靠<code> MobileSubstrate </code>帮忙注入<code> dylib </code>，还有别的攻击入口吗？</p>

<div class="figure" id="figure-19-1">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zxwgbjpj202m02vwec.jpg" />

    <p class="caption"><strong>图片 19.1</strong> sript-injection1</p>
</div>


<p>理理思路，条件、目的很明确：</p>

<p>1）必须在应用程序启动之前，把<code> dylib </code>的环境变量配置好<br />
2）<code>dylib </code>的位置必须能被应用程序放问到<br />
3）最后再启动应用程序</p>

<div class="figure" id="figure-19-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f75zyl6cmbj203i02ygli.jpg" />

    <p class="caption"><strong>图片 19.2</strong> sript-injection2</p>
</div>


<p>啊哈，原汁原味，走 <code>bash</code>！</p>

<p>在点击应用程序图标&#8211;&gt;程序启动这个过程中，在我们看来程序是被动执行的。为了让特定功能的脚本被执行，我们可以把脚本改成应用程序二进制的名字伪装成应用程序，让系统调用启动。在脚本中，配置好<code> dylib </code>，然后再手动启动真的应用程序，假装什么也没发生，挥一挥衣袖不带走一片云彩～
将真的支付宝程序改名为 oriPortal ：</p>

<p><code>mv Portal oriPortal</code></p>

<p>将待执行的脚本改名为支付宝：</p>

<p><code>mv Portal.sh Portal</code></p>

<p>脚本代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash  
</span><span class="line">
</span><span class="line"> #得到第一个参数  
</span><span class="line">C=$0  
</span><span class="line">
</span><span class="line"> #第一个参数是二进制的绝对路径 比如 :  
</span><span class="line"> #/private/var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Portal.app/  
</span><span class="line"> #截取最后一个 / 之前的内容  
</span><span class="line">C=${C%/*}  
</span><span class="line">
</span><span class="line"> #库和二进制放在一起  
</span><span class="line">export DYLD_INSERT_LIBRARIES=${C:-.}/wq.dylib  
</span><span class="line"> #执行原来APP $@ 别忘了把原来的参数保留  
</span><span class="line">exec "${C:-.}"/oriPortal "$@"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果不尽人意，失败了……<div class="figure" id="figure-19-3">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75zzekq0ij2050035wef.jpg" />

    <p class="caption"><strong>图片 19.3</strong> sript-injection3</p>
</div>


<p>错误信息如下：
<div class="figure" id="figure-19-4">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zzvk0ybj21kw073ajf.jpg" />

    <p class="caption"><strong>图片 19.4</strong> sript-injection6</p>
</div>


<p>在打开某个加密信息时出了错误，大概猜一下应该是类似加密签名校验的步骤，但是我们无法去了解其中详细的操作到底是什么样的，没关系，那么就把原始的可执行文件环境全部给他造出来，因为检验文件属性肯定不会带着路径信息的。</p>

<p>备份一份<code> Portal.app </code>目录<code> Portal_ori.app </code>，修改脚本为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash  
</span><span class="line">C=$0  
</span><span class="line">C=${C%/*}  
</span><span class="line">export DYLD_INSERT_LIBRARIES=${C:-.}/wq.dylib  
</span><span class="line">exec "${C:-.}"/../Portal_ori.app/Portal "$@"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行支付宝<code> app </code>验证一下，
好消息是，在<code> iOS6 </code>上，成功加载了动态库<code> wq.dylib </code>
坏消息是，在<code> iOS7 </code>上，失败了</p>

<p>错误信息如下：
<div class="figure" id="figure-19-5">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7600otenxj21kw096wsw.jpg" />

    <p class="caption"><strong>图片 19.5</strong> sript-injection7</p>
</div>


<p>应该是因为<code> iOS7 </code>的沙盒机制升了级，把我们这套小把戏拦在门外了……<br />
<div class="figure" id="figure-19-6">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7601b60kfj207304d74a.jpg" />

    <p class="caption"><strong>图片 19.6</strong> sript-injection8</p>
</div>


<p>那又怎么样，面包总会有的～</p>



<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></p></p></p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据保护 API]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-bao-hu-api/"/>
    <updated>2016-08-25T14:48:07+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-bao-hu-api</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">18</span> <span class="title">数据保护 API</span></h1>
    <h3>题外话</h3>

<p>开篇先扯几句题外话，许多朋友都问我怎么不写防啊，我确实有点犹豫。
hackers 总是想象如果自己是开发者会怎么写，然后才能找到入手点。同理，开发者们也要想象自己是 hackers 会怎么做，才能采取相应的防御措施。然后，就是一场递归的博弈。</p>

<p>拿越狱检测这件事来说，起初大家只需判断有无安装<code> Cydia </code>就好了，hackers 们说好，那我就不安装<code> Cydia </code>也可以动手脚。开发者们又说，那你一定得用的上<code> MobileSubstrate </code>，<code>bash </code>，<code>ssh </code>吧，我去检测手机有没有安装这些工具。可是又有什么用呢？你判断什么我绕过去什么。</p>

<p>当<code> class-dump </code>大肆流行，函数符号都被暴露，开发者想尽办法藏起自己的敏感函数代码。hackers 们也知道<code> class-dump </code>的死穴在哪里，于是新的检索办法油然而生。也就说，当一个防御手段成为流行，它就不会再是个让 hackers 大骂“真特么费劲”的防御手段了。比如之前介绍的一个小技巧：<a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-ca-chu/">内存数据擦除</a> ，hackers 知道开发者都去擦数据了，那我<code> hook memset </code>在你擦之前去读就好了。开发者说：我直接写硬盘上然后删除！hackers 说：难道你没听说过文件恢复？</p>

<div class="figure" id="figure-18-1">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75ztnpoq2j202f031zk3.jpg" />

    <p class="caption"><strong>图片 18.1</strong> data-erase1</p>
</div>


<p>OK，贫的有点多了，本文介绍一下防御相关的话题—— iOS 的数据保护 API 。</p>

<h3>数据保护 API</h3>

<p>文件系统中的文件、<code>keychain </code>中的项，都是加密存储的。当用户解锁设备后，系统通过<code> UDID </code>密钥和用户设定的密码生成一个用于解密的密码密钥，存放在内存中，直到设备再次被锁，开发者可以通过<code> Data Protection API </code>来设定文件系统中的文件、<code>keychain</code> 中的项应该何时被解密。</p>

<h4>文件保护</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/* 为filePath文件设置保护等级 */</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">NSFileProtectionComplete</span>
</span><span class="line">                                                       <span class="nl">forKey:</span><span class="n">NSFileProtectionKey</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">setAttributes:</span><span class="n">attributes</span>
</span><span class="line">                                 <span class="nl">ofItemAtPath:</span><span class="n">filePath</span>
</span><span class="line">                                        <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">//文件保护等级属性列表  </span>
</span><span class="line"><span class="n">NSFileProtectionNone</span>                                    <span class="c1">//文件未受保护，随时可以访问 （Default）  </span>
</span><span class="line"><span class="n">NSFileProtectionComplete</span>                                <span class="c1">//文件受到保护，而且只有在设备未被锁定时才可访问  </span>
</span><span class="line"><span class="n">NSFileProtectionCompleteUntilFirstUserAuthentication</span>    <span class="c1">//文件收到保护，直到设备启动且用户第一次输入密码  </span>
</span><span class="line"><span class="n">NSFileProtectionCompleteUnlessOpen</span>                      <span class="c1">//文件受到保护，而且只有在设备未被锁定时才可打开，不过即便在设备被锁定时，已经打开的文件还是可以继续使用和写入</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>keychain 项保护</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/* 设置keychain项保护等级 */</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="err">@</span><span class="p">{(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecClass:</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClassGenericPassword</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrGeneric:</span><span class="s">@&quot;MyItem&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrAccount:</span><span class="s">@&quot;username&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecValueData:</span><span class="s">@&quot;password&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrService:</span><span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">].</span><span class="n">bundleIdentifier</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrLabel:</span><span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrDescription:</span><span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrAccessible:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrAccessibleWhenUnlocked</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">OSStatus</span> <span class="n">result</span> <span class="o">=</span> <span class="n">SecItemAdd</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)(</span><span class="n">query</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//keychain项保护等级列表  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleWhenUnlocked</span>                          <span class="c1">//keychain项受到保护，只有在设备未被锁定时才可以访问  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAfterFirstUnlock</span>                      <span class="c1">//keychain项受到保护，直到设备启动并且用户第一次输入密码  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAlways</span>                                <span class="c1">//keychain未受保护，任何时候都可以访问 （Default）  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleWhenUnlockedThisDeviceOnly</span>            <span class="c1">//keychain项受到保护，只有在设备未被锁定时才可以访问，而且不可以转移到其他设备  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</span>        <span class="c1">//keychain项受到保护，直到设备启动并且用户第一次输入密码，而且不可以转移到其他设备  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAlwaysThisDeviceOnly</span>                  <span class="c1">//keychain未受保护，任何时候都可以访问，但是不能转移到其他设备</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>应用实例</h3>

<p>把一段信息<code> infoStrng </code>字符串写进文件，然后通过 Data Protection API 设置保护。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span><span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;DataProtect&quot;</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">infoString</span> <span class="nl">writeToFile:</span><span class="n">filePath</span>
</span><span class="line">             <span class="nl">atomically:</span><span class="n">YES</span>
</span><span class="line">               <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span>
</span><span class="line">                  <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">NSFileProtectionComplete</span>
</span><span class="line">                                                       <span class="nl">forKey:</span><span class="n">NSFileProtectionKey</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">setAttributes:</span><span class="n">attributes</span>
</span><span class="line">                                 <span class="nl">ofItemAtPath:</span><span class="n">filePath</span>
</span><span class="line">                                        <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>设备锁屏（带密码保护）后，即使是越狱机，在<code> root </code>权限下<code> cat </code>读取那个文件信息也会被拒绝。</p>

<div class="figure" id="figure-18-2">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75zu9sgihj202q02xdfo.jpg" />

    <p class="caption"><strong>图片 18.2</strong> data-erase2</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fish Hook]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fish-hook/"/>
    <updated>2016-08-25T14:47:04+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fish-hook</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">17</span> <span class="title">Fishhook</span></h1>
    <p>众所周知，<code>Objective-C </code>的首选<code> hook </code>方案为<code> Method Swizzle</code>，于是大家纷纷表示核心内容应该用 C 写。</p>

<p>接下来进阶说说 <code>iOS</code> 下 C 函数的<code> hook </code>方案，先介绍第一种方案&#8212; <a href="https://github.com/facebook/fishhook">fishhook</a> .</p>

<h3>什么是 fishhook</h3>

<p><code>fishhook </code>是 facebook 提供的一个动态修改链接<code> Mach-O </code>符号表的开源工具。</p>

<h3>什么是<code> Mach-O</code></h3>

<p><code>Mach-O </code>为 Mach Object 文件格式的缩写,也是用于 <code>iOS </code>可执行文件，目标代码，动态库，内核转储的文件格式。</p>

<p><code>Mach-O </code>有自己的<code> dylib </code>规范。</p>

<h3>fishhook 的原理</h3>

<p>详见官方的 How it works，这里我作个简要说明。</p>

<p><code>dyld </code>链接 2 种符号，<code>lazy </code>和<code> non-lazy </code>，fishhook 可以重新链接/替换本地符号。</p>

<div class="figure" id="figure-17-1">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zprz6wrj20jo0pcgo0.jpg" />

    <p class="caption"><strong>图片 17.1</strong> fishhook1</p>
</div>


<p>如图所示，<code>__DATA</code>区有两个 section 和动态符号链接相关：<code>__nl_symbol_ptr</code>、<code>__la_symbol_ptr</code>。<code>__nl_symbol_ptr</code> 为一个指针数组，直接对应<code> non-lazy </code>绑定数据。<code>__la_symbol_ptr</code> 也是一个指针数组，通过<code>dyld_stub_binder</code> 辅助链接。<code>&lt;mach-o/loader.h&gt;</code>的 section 头提供符号表的偏移量。</p>

<p>图示中，1061 是间接符号表的偏移量，*（偏移量+间接符号地址）=16343，即符号表偏移量。符号表中每一个结构都是一个<code> nlist </code>结构体，其中包含字符表偏移量。通过字符表偏移量最终确定函数指针。</p>

<p>fishhook 就是对间接符号表的偏移量动的手脚，提供一个假的<code> nlist </code>结构体，从而达到 hook 的目的。</p>

<p>fishhook 替换符号函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">int</span> <span class="nf">rebind_symbols</span><span class="p">(</span><span class="k">struct</span> <span class="n">rebinding</span> <span class="n">rebindings</span><span class="p">[],</span> <span class="n">size_t</span> <span class="n">rebindings_nel</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="n">prepend_rebindings</span><span class="p">(</span><span class="n">rebindings</span><span class="p">,</span> <span class="n">rebindings_nel</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// If this was the first call, register callback for image additions (which is also invoked for  </span>
</span><span class="line">  <span class="c1">// existing images, otherwise, just run on existing images  </span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rebindings_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_dyld_register_func_for_add_image</span><span class="p">(</span><span class="n">rebind_symbols_for_image</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">c</span> <span class="o">=</span> <span class="n">_dyld_image_count</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">rebind_symbols_for_image</span><span class="p">(</span><span class="n">_dyld_get_image_header</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">_dyld_get_image_vmaddr_slide</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关键函数是 <code>_dyld_register_func_for_add_image</code>，这个函数是用来注册回调，当 dyld 链接符号时，调用此回调函数。 <code>rebind_symbols_for_image</code> 做了具体的替换和填充。</p>

<h3>fishhook 替换<code> Core Foundation </code>函数的例子</h3>

<p>以下是官方提供的替换<code> Core Foundation </code>中 open 和 close 函数的实例代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">dlfcn</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;AppDelegate.h&quot;</span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;fishhook.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">orig_close</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">orig_open</span><span class="p">)(</span><span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="p">...);</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">save_original_symbols</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">orig_close</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">RTLD_DEFAULT</span><span class="p">,</span> <span class="s">&quot;close&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">orig_open</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">RTLD_DEFAULT</span><span class="p">,</span> <span class="s">&quot;open&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">my_close</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real close(%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">orig_close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">my_open</span><span class="p">(</span><span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oflag</span><span class="p">,</span> <span class="p">...)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">va_list</span> <span class="n">ap</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class="line">  <span class="n">mode_t</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">((</span><span class="n">oflag</span> <span class="o">&amp;</span> <span class="n">O_CREAT</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// mode only applies to O_CREAT  </span>
</span><span class="line">    <span class="n">va_start</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">oflag</span><span class="p">);</span>
</span><span class="line">    <span class="n">mode</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line">    <span class="n">va_end</span><span class="p">(</span><span class="n">ap</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real open(&#39;%s&#39;, %d, %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">orig_open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real open(&#39;%s&#39;, %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">orig_open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">charchar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">    <span class="n">save_original_symbols</span><span class="p">();</span>
</span><span class="line">    <span class="c1">//fishhook用法  </span>
</span><span class="line">    <span class="n">rebind_symbols</span><span class="p">((</span><span class="k">struct</span> <span class="n">rebinding</span><span class="p">[</span><span class="mi">2</span><span class="p">]){</span>
</span><span class="line">      <span class="p">{</span><span class="s">&quot;close&quot;</span><span class="p">,</span> <span class="n">my_close</span><span class="p">},</span>
</span><span class="line">      <span class="p">{</span><span class="s">&quot;open&quot;</span><span class="p">,</span> <span class="n">my_open</span><span class="p">}},</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Open our own binary and print out first 4 bytes (which is the same  </span>
</span><span class="line">    <span class="c1">// for all Mach-O binaries on a given architecture)  </span>
</span><span class="line">    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">magic_number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">magic_number</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Mach-O Magic Number: %x </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">magic_number</span><span class="p">);</span>
</span><span class="line">    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">// fishhook 用法处:</span>
</span><span class="line"><span class="n">rebind_symbols</span><span class="p">((</span><span class="k">struct</span> <span class="n">rebinding</span><span class="p">[</span><span class="mi">2</span><span class="p">]){</span>
</span><span class="line">  <span class="p">{</span><span class="s">&quot;close&quot;</span><span class="p">,</span> <span class="n">my_close</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="s">&quot;open&quot;</span><span class="p">,</span> <span class="n">my_open</span><span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>传入 rebind_symbols 的第一个参数是一个结构体数组，大括号中为对应数组内容。</p>

<p>不得不说，facebook 忒 NB 。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 introspy 追踪分析应用程序]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-introspy-zhui-zong-fen-xi-ying-yong-cheng-xu/"/>
    <updated>2016-08-25T12:01:59+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-introspy-zhui-zong-fen-xi-ying-yong-cheng-xu</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">16</span> <span class="title">使用 introspy 追踪分析应用程序</span></h1>
    <p>如果你已阅读了《 iOS 安全攻防》系列专栏之前的文章，一定已经对静态以及运行时分析<code> App </code>有了一定的了解。</p>

<p>我们可以借助的分析工具很多，工具和工具之间一般没有什么优劣比较性，完全看个人习惯什么擅长什么。</p>

<p>多个工具多条路，那么本文将介绍追踪分析利器<code> introspy </code>。</p>

<p>对应 iOS 系统版本，下载适用的<code> introspy </code>工具包：<a href="https://github.com/iSECPartners/Introspy-iOS/releases">introspy下载地址传送门</a></p>

<p>下载后，将其拷贝到设备中，并执行安装命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># dpkg -i com.isecpartners.introspy-v0.4-iOS_7.deb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启设备：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># killall SpringBoard</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>到设置中，就可以查看到 instrospy 的设置选项了:</p>

<div class="figure" id="figure-16-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69jw1f75zfuzba2j208w0adjrr.jpg" />

    <p class="caption"><strong>图片 16.1</strong> instrospy1</p>
</div>


<p>在<code> Introspy-Apps </code>中选择要跟踪的<code> app </code>名称。
<code>Instrospy-Settings </code>则提供一些常规跟踪设置选项，默认是全部开启。</p>

<p>然后启动想要跟踪的应用程序，就可以直接查看 log 获取<code> Instrospy </code>为我们跟踪捕获的信息，这里以跟踪支付宝 app 为例。</p>

<p>打开支付宝 App ，选择添加银行卡，随意添加一个卡号，然后点击下一步:</p>

<div class="figure" id="figure-16-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69jw1f75zgf02jqj208w0fsjrq.jpg" />

    <p class="caption"><strong>图片 16.2</strong> instrospy2</p>
</div>


<p>支付宝 app 反馈添加失败，该卡暂不支持，Instrospy 捕获的信息也很清晰：</p>

<div class="figure" id="figure-16-3">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zm8s5qyj21bc0h4425.jpg" />

    <p class="caption"><strong>图片 16.3</strong> instrospy3</p>
</div>


<p>追踪信息被保存为一个数据库<code>introspy-com.alipay.iphoneclient.db</code>，存放在：
<code>./private/var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Library/introspy-com.alipay.iphoneclient.db</code></p>

<p>也可以借助<code> Introspy-Analyzer </code>在本地将该数据库解析成一个直观的 report.html 查看
<a href="https://github.com/iSECPartners/Introspy-Analyzer">Introspy-Analyzer下载地址传送门</a></p>

<p>将 <code>introspy-com.alipay.iphoneclient.db</code> 拷贝到本地，执行：
<code>python introspy.py -p ios --outdir Portal-introspy-html introspy-com.alipay.iphoneclient.db</code></p>

<p>就会生成一个 <code>Portal-introspy-html</code>  文件夹，该目录下有 <code>report.html</code> ，用浏览器打开:
<code>open report.html</code></p>

<p>就可以清晰的查看追踪信息了，主要分为<code> DataStorage</code>、<code>IPC</code>、<code>Misc</code>、<code>Network</code>、<code>Crypto</code> 六大类信息。
举个例子，选择<code> Crypto </code>可以查看支付宝 app 采取了什么加密措施，如果你看过我之前的文章，一定会一眼就认出来手势密码的：</p>

<div class="figure" id="figure-16-4">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f75zn5ysdnj218u1cctgb.jpg" />

    <p class="caption"><strong>图片 16.4</strong> instrospy4</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 iNalyzer 分析应用程序]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-inalyzer-fen-xi-ying-yong-cheng-xu/"/>
    <updated>2016-08-25T11:59:04+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-inalyzer-fen-xi-ying-yong-cheng-xu</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">15</span> <span class="title">使用 iNalyzer 分析应用程序</span></h1>
    <p>好想用<code> doxygen </code>画 iOS app 的<code> class </code>继承关系。</p>

<p>有没有比 class-dump-z 更直观的分析工具？
利器<code> iNalyzer </code>隆重登场～</p>

<h3>iNalyzer 的安装</h3>

<p>在 iPhone 端：</p>

<p>1）进入<code> cydia </code>添加源 http://appsec-labs.com/cydia/</p>

<p>2）搜索<code> iNalyzer </code>并安装</p>

<h3>Doxygen 和 Graphviz 的安装</h3>

<p>在 Mac 端：<br />
<code>brew install oxygen graphviz</code></p>

<h3>解密支付宝 App</h3>

<h4>查看可解密的 App</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /Applications/iNalyzer5.app  
</span><span class="line">./iNalyzer5   
</span><span class="line">
</span><span class="line">usage: ./iNalyzer5 [application name] [...]  
</span><span class="line">Applications available: Portal Tenpay</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>解密支付宝 App</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./iNalyzer5 Portal  
</span><span class="line">
</span><span class="line">got params /var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Portal.app/ Portal.app 800 iNalyzer is iNalyzing Portal...  
</span><span class="line">iNalyzer:crack_binary got /var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Portal.app/Portal /tmp/iNalyzer5_3f0d8773/Payload/Portal.app/Portal Dumping binary...helloooo polis?  
</span><span class="line">helloooo polis?  
</span><span class="line">iNalyzer:Creating SnapShot into ClientFiles  
</span><span class="line">iNalyzer:SnapShot Done  
</span><span class="line">iNalyzer:Population Done  
</span><span class="line">iNalyzer:Dumping Headers  
</span><span class="line">iNalyzer:Patching Headers  
</span><span class="line">/bin/sh: /bin/ls: Argument list too long  
</span><span class="line">ls: cannot access *_fixed: No such file or directory  
</span><span class="line">    /var/root/Documents/iNalyzer/支付宝钱包-v8.0.0.ipa</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将解密后的 ipa 拷贝到本地</p>

<h3>修改 doxMe.sh 脚本</h3>

<p>解压 ipa, cd 到 <code>/支付宝钱包-v8.0.0/Payload/Doxygen</code> 下找到<code> doxMe.sh</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/sh  
</span><span class="line">
</span><span class="line">/Applications/Doxygen.app/Contents/Resources/doxygen dox.template &amp;&amp; open ./html/index.html</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们是通过<code> brew </code>安装的<code> doxygen </code>，所以修改脚本为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/sh  
</span><span class="line">
</span><span class="line">doxygen dox.template &amp;&amp; open ./html/index.html</span></code></pre></td></tr></table></div></figure></notextile></div>
<h3>执行 doxMe.sh 脚本</h3>

<p><code>./doxMe.sh</code></p>

<p>完成后浏览器会自动 open 生成的<code>html</code>文件</p>

<h3>查看信息</h3>

<p>通过 index.html 我们可以直观的查看到<code> Strings analysis </code>，<code> ViewControllers </code>，<code>Classes </code>等几大类的信息。</p>

<div class="figure" id="figure-15-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f75uwh8b9kj218u126al5.jpg" />

    <p class="caption"><strong>图片 15.1</strong> inalyzer1</p>
</div>


<p>在 Classes-&gt;Class Hierarchy 可以查看到类继承图示。
支付宝 app<code> class Hierarchy </code>结果冰山一角：</p>

<div class="figure" id="figure-15-2">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75uxns81yj20nm0ke0uo.jpg" />

    <p class="caption"><strong>图片 15.2</strong> inalyzer2</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack 实战——支付宝 App 手势密码校验欺骗]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hack-shi-zhan-zhi-fu-bao-app-shou-shi-mi-ma-xiao-yan-qi-pian/"/>
    <updated>2016-08-25T11:57:48+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hack-shi-zhan-zhi-fu-bao-app-shou-shi-mi-ma-xiao-yan-qi-pian</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">14</span> <span class="title">Hack 实战——支付宝 App 手势密码校验欺骗</span></h1>
    <p>在 <a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hackshi-zhan-tan-jiu-zhi-fu-bao-app-shou-shi-mi-ma/">iOS 安全攻防（十一）：Hack实战——探究支付宝 app 手势密码</a>中，介绍了如何利用 gdb 分析 app ，确定了支付宝 app 的手势密码格式为字符串，9 个点分别对应 123456789。在 <a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ios7-de-dong-tai-ku-zhu-ru/">iOS 安全攻防（十二）：iOS7 的动态库注入</a>中，介绍了如果利用越狱大神们为我们开辟的 iOS7 动态库注入方法。</p>

<p>本文将继续深入 hack 实战，hook 支付宝手势密码校验操作，欺骗其通过任意手势输入。</p>

<p>那么到现在为止，我们已经掌握了什么信息呢？</p>

<p>1）一个名叫<code> GestureUnlockViewController </code>的类，含有<code> gestureInputView:didFinishWithPassword:  </code>方法，来处理输入的手势</p>

<p>2）正确的手势密码通过一个名叫<code> GestureUtil </code>的类读取，方法是<code> getPassword</code></p>

<p>思路马上清晰了，我们需要做 2 步：</p>

<p>1）hook <code>getPassword </code>存下正确的密码</p>

<p>2）hook <code>gestureInputView:didFinishWithPassword: </code> 替换当前输入为正确的密码</p>

<p>一个关键点，我们是用<code> Method Swizzling </code>来 hook，那么就意味操作不能过早，因为我们要保证在取到  <code>GestureUnlockViewController </code>和<code> GestureUtil class </code>后，才能进行 imp 替换。</p>

<p>所以， 我采用<code> NSNotificationCenter </code>通知机制协助完成任务。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;objc/runtime.h&gt;  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">IMP</span> <span class="n">ori_getPasswd_IMP</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="n">IMP</span> <span class="n">ori_gesture_IMP</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(HackPortal)</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(HackPortal)</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">getPassword</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">passwd</span> <span class="o">=</span> <span class="n">ori_getPasswd_IMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">getPassword</span><span class="p">));</span>
</span><span class="line">    <span class="k">return</span> <span class="n">passwd</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">gestureInputView:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">view</span> <span class="nf">didFinishWithPassword:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">password</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">password</span> <span class="o">=</span> <span class="n">ori_getPasswd_IMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">getPassword</span><span class="p">));</span>
</span><span class="line">    <span class="n">ori_gesture_IMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">gestureInputView:didFinishWithPassword:</span><span class="p">),</span> <span class="n">view</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">PortalListener</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">addObserver:</span><span class="n">self</span>
</span><span class="line">                                                <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">appLaunched:</span><span class="p">)</span>
</span><span class="line">                                                    <span class="nl">name:</span><span class="n">UIApplicationDidBecomeActiveNotification</span>
</span><span class="line">                                                  <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">appLaunched:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">class_GestureUtil</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;GestureUtil&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">class_PortalListener</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;PortalListener&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">ori_Method</span> <span class="o">=</span> <span class="n">class_getClassMethod</span><span class="p">(</span><span class="n">class_GestureUtil</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">getPassword</span><span class="p">));</span>
</span><span class="line">    <span class="n">ori_getPasswd_IMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">ori_Method</span><span class="p">);</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">my_Method</span> <span class="o">=</span> <span class="n">class_getClassMethod</span><span class="p">(</span><span class="n">class_PortalListener</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">getPassword</span><span class="p">));</span>
</span><span class="line">    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">ori_Method</span><span class="p">,</span> <span class="n">my_Method</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">Class</span> <span class="n">class_Gesture</span> <span class="o">=</span> <span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;GestureUnlockViewController&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">ori_Method1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class_Gesture</span><span class="p">,</span>
</span><span class="line">                                                 <span class="k">@selector</span><span class="p">(</span><span class="nl">gestureInputView:didFinishWithPassword:</span><span class="p">));</span>
</span><span class="line">    <span class="n">ori_gesture_IMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">ori_Method1</span><span class="p">);</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">my_Method1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class_PortalListener</span><span class="p">,</span>
</span><span class="line">                                                <span class="k">@selector</span><span class="p">(</span><span class="nl">gestureInputView:didFinishWithPassword:</span><span class="p">));</span>
</span><span class="line">    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">ori_Method1</span><span class="p">,</span> <span class="n">my_Method1</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span><span class="nl">removeObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">initialize</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">PortalListener</span> <span class="o">*</span><span class="n">entrance</span><span class="p">;</span>
</span><span class="line">    <span class="n">entrance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">PortalListener</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK！编译好动态库，塞进 iPhone 试试效果吧～</p>

<p>不管我们输入什么手势，都会被替换为正确的密码去给<code>     gestureInputView:didFinishWithPassword: </code>验证，然后顺利解锁。</p>

<p>这意味着什么呢？</p>

<p>意味着，我们可以通过正规的渠道让用户下载这个动态库，然后悄悄放进越狱的 iPhone 的 <code>/Library/MobileSubstrate/DynamicLibraries/</code> 目录下……然后……然后去给妹纸帅锅变魔术吧：“你看，我和你多心有灵犀，你改什么密码我都猜的到!”</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据擦除]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-ca-chu/"/>
    <updated>2016-08-25T11:56:51+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-ca-chu</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">13</span> <span class="title">数据擦除</span></h1>
    <p>对于敏感数据，我们不希望长时间放在内存中，而希望使用完后立即就被释放掉。</p>

<p>但是不管是<code> ARC </code>还是<code> MRC</code>，自动释放池也有轮循工作周期，我们都无法控制内存数据被擦除的准确时间，让 hackers 们有机可乘。
本文介绍一个小技巧——及时数据擦除。</p>

<p>假如一个 View Controller A的一个数据被绑在一个 property 上，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">WipingMemoryViewController</span> : <span class="nc">UIViewController</span>
</span><span class="line">
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">text</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当 A push 到另外一个 View Controller B 时，该数据还是有可能被读到的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">WipingMemoryViewController</span> <span class="o">*</span><span class="n">lastController</span> <span class="o">=</span> <span class="p">(</span><span class="n">WipingMemoryViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">viewControllers</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;text = %@&quot;</span><span class="p">,</span><span class="n">lastController</span><span class="p">.</span><span class="n">text</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>于是，“用后即擦”变得十分必要：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">_text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFormat:</span><span class="s">@&quot;information&quot;</span><span class="p">];</span>
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Origal string = %@&quot;</span><span class="p">,</span><span class="n">_text</span><span class="p">);</span>
</span><span class="line"><span class="c1">//do something...  </span>
</span><span class="line"><span class="n">charchar</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="n">charchar</span> <span class="o">*</span><span class="p">)</span><span class="n">CFStringGetCStringPtr</span><span class="p">((</span><span class="n">CFStringRef</span><span class="p">)</span><span class="n">_text</span><span class="p">,</span> <span class="n">CFStringGetSystemEncoding</span><span class="p">());</span>
</span><span class="line"><span class="n">memset</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">_text</span> <span class="n">length</span><span class="p">]);</span>
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;final text = %@&quot;</span><span class="p">,</span><span class="n">_text</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Log 输出如下：</p>

<div class="code code">
<pre class="code">WipingMemory[2518:70b] Origal string = information  
WipingMemory[2518:70b] final text =</pre>
</div>

<p>可以看到，我们想要保护的数据，被有效的擦除了。</p>

<p>还有提个醒，如果是这样</p>

<p><code>_text = @"information";</code></p>

<p>创建的字符串，是会被分配到 data 区，而是无法修改的。</p>

<p>如果有兴趣也有闲心，可以试试运行下面的代码，有彩蛋哦：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">_text</span> <span class="o">=</span> <span class="s">@&quot;information&quot;</span><span class="p">;</span>
</span><span class="line"><span class="n">memset</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">voidvoid</span> <span class="o">*</span><span class="p">)(</span><span class="n">_text</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_text</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">myString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFormat:</span><span class="s">@&quot;information&quot;</span><span class="p">];</span>
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Origal text : %@ </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">myString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译器把两个 information 的省略到一个地址了～</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 的动态库注入]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ios7-de-dong-tai-ku-zhu-ru/"/>
    <updated>2016-08-25T11:56:02+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ios7-de-dong-tai-ku-zhu-ru</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">12</span> <span class="title">iOS7 的动态库注入</span></h1>
    <p>iOS 系统不断升级，结构不断调整，所以我们可以利用的动态库注入方法也根据系统版本的不同而不同。</p>

<p>在此之前，我们可以利用环境变量 <code>DYLD_INSERT_LIBRARY</code> 来添加动态库，iOS7 被成功越狱后，我们需要自己去探索实践 iOS7 动态库注入的方式。</p>

<p>本文将在 iOS7.0.4 环境下，以 hook 支付宝 app 程序中 <code> ALPLauncherController </code>的视图加载方法为例，介绍在 iOS7 下，如何实现动态库注入攻击。</p>

<h3>相关工具位置信息</h3>

<p>先总结罗列一下相关编译、链接工具的位置路径信息，在各位自行下载的 iOS SDK中</p>

<div class="code code">
<pre class="code">clang :    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
gcc :    /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/arm-apple-darwin10-llvm-gcc-4.2
ld :   /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/ld
                /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
sdk  :   /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/</pre>
</div>

<h3>动态库源程序</h3>

<p>我们编写一个 hook 支付宝 app 程序中 ALPLauncherController  的 viewDidLoad 方法，具体方法是利用 Method Swizzling 。</p>

<p>不熟悉 Method Swizzling 的话，可以参看我的这篇文章：<a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/26/method-swizzling/">Method Swizzling</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;UIKit/UIKit.h&gt;  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">objc</span><span class="o">/</span><span class="n">runtime</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">UIViewController</span> <span class="nl">(HookPortal)</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">myViewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;----------------------- myViewDidLoad ----------------------&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">initialize</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;======================= initialize ========================&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">Class</span> <span class="n">class</span> <span class="o">=</span> <span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;ALPLauncherController&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">ori_Method</span> <span class="o">=</span>  <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">viewDidLoad</span><span class="p">));</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">my_Method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">myViewDidLoad</span><span class="p">));</span>
</span><span class="line">    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">ori_Method</span><span class="p">,</span> <span class="n">my_Method</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>编译 dylib</h3>

<p>我们可以利用 xcode 直接帮忙编译 .o，或者自己手动使用 clang 编译，然后手动 ld ：</p>

<div class="code code">
<pre class="code">ld -dylib -lsystem -lobjc  -syslibroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/ -o libwq.dylib xxx.o</pre>
</div>

<h3>安置、验证 dylib</h3>

<p>将编译好的 libwq.dylib 拷贝到 iPhone 文件系统中 <code>/Library/MobileSubstrate/DynamicLibraries/</code> 下</p>

<p>如果不放心库是否能正常工作，可以加一步验证操作，写一个 demo 尝试打开自己的库：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">voidvoid</span> <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">dlopen</span><span class="p">(</span><span class="s">&quot;/Library/MobileSubstrate/DynamicLibraries/libwq.dylib&quot;</span><span class="p">,</span> <span class="mh">0x2</span><span class="p">);</span>
</span><span class="line"><span class="n">handle</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="s">&quot;myViewDidLoad&quot;</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;++++&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;----&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>运行检验效果</h3>

<p>到了验证效果的时候，重启设备后者执行：
<code>killall SpringBoard</code></p>

<p>启动支付宝 app，然后观察 log 信息：</p>

<div class="code code">
<pre class="code">Portal[3631] &lt;Notice&gt;: MS:Notice: Injecting: com.alipay.iphoneclient `[Portal] (847.21)`  
Portal[3631] &lt;Notice&gt;: MS:Notice: Loading: /Library/MobileSubstrate/DynamicLibraries/libwq.dylib  
Portal[3631] &lt;Warning&gt;: ======================= initialize ========================  
Portal[3631] &lt;Warning&gt;: ----------------------- myViewDidLoad ----------------------</pre>
</div>

<p>证明我们的动态库已经被加载， 我们的 Hook 也成功了。
剩下的就要自己去思考了，除了加句无聊的 Log，我们还可以做点什么呢？</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack实战——探究支付宝 App 手势密码]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hackshi-zhan-tan-jiu-zhi-fu-bao-app-shou-shi-mi-ma/"/>
    <updated>2016-08-25T11:49:41+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hackshi-zhan-tan-jiu-zhi-fu-bao-app-shou-shi-mi-ma</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">11</span> <span class="title">Hack 实战——探究支付宝 App 手势密码</span></h1>
    <p>在之前的 <a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/hack-shi-zhan-jie-chu-zhi-fu-bao-shou-shi-jie-suo-ci-shu-xian-zhi/">iOS安全攻防（七）：Hack实战——解除支付宝app手势解锁错误次数限制</a>中，留了一个问题，就是如何破解手势密码。</p>

<p>方法不唯一，本文介绍如何利用 gdb 分析破解 App 。</p>

<p>当没有程序源代码的情况下，我们如何利用 gdb 呢？</p>

<p>为了确定应该如何设置断点，不得不反汇编程序来作为参考了。</p>

<p>在前面的文章提到过，支付宝 app 的手势密码校验处理非常严谨，没有抛出 BOOL 判断的方法让我们可以直接修改返回值跳过验证，而是将全部操作封在了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">gestureInputView:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">view</span> <span class="nf">didFinishWithPassword:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">password</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>于是，我反汇编了支付宝 app ，找到手势密码解锁的相关代码片段：</p>

<div class="figure" id="figure-11-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f75unaa1pzj20l90jyjw5.jpg" />

    <p class="caption"><strong>图片 11.1</strong> guesture-password</p>
</div>


<p>红色箭头标注的地方，让人欣喜，这将是我们断点位置的最好选择。</p>

<p>首先，查看一下相关程序段符号表：</p>

<p><code>nm Portal | grep -i gestureinputview</code></p>

<p>得到结果：</p>

<p>nm Portal | grep -i getpassword</p>

<p>得到结果：</p>

<div class="figure" id="figure-11-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f75unyvcgaj20fg04hwg4.jpg" />

    <p class="caption"><strong>图片 11.2</strong> guesture-password2</p>
</div>


<p>确定了了关键函数的输出符号。</p>

<p>启动支付宝 app ，并 gdb 该进程：
<code>gdb -q -p 671</code></p>

<p>在上述两个函数位置设置断点：
<div class="figure" id="figure-11-3">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75up0u087j20hp02bgmb.jpg" />

    <p class="caption"><strong>图片 11.3</strong> guesture-password3</p>
</div>


<p>可以通过 info breakpoints 查看断点：
<div class="figure" id="figure-11-4">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75uppyzbzj20pj034my3.jpg" />

    <p class="caption"><strong>图片 11.4</strong> guesture-password4</p>
</div>


<p>continue 到 getPassword 位置，打印函数栈：
<div class="figure" id="figure-11-5">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75uq86ydyj20kn09en0w.jpg" />

    <p class="caption"><strong>图片 11.5</strong> guesture-password5</p>
</div>


<p>我们可以确定了 getPassword 的返回地址是 0x00becb36 ,  对该地址加断点：</p>

<p><code>b * 0xbecb36</code></p>

<p>然后继续 continue ，程序将卡在上面的断点上。</p>

<p>从上面的反汇编代码，我们可以知道，用户输入的密码为存在 r8 上，原始密码为存在 r0 上，我们直接打印出这两个寄存器的值：</p>

<div class="figure" id="figure-11-6">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f75ur9u2hlj20mm07pmxu.jpg" />

    <p class="caption"><strong>图片 11.6</strong> guesture-password6</p>
</div>


<p>正确密码是个 “Z” 手势图画，而当前输入为 “一” 手势图画。
可以得出结论，支付宝 app 的手势密码和大多数 app 一样，手势密码格式是字符串，9 个点分别对应字符 123456789 。</p>



<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></p></p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二进制和资源文件自检]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/er-jin-zhi-he-zi-yuan-wen-jian-zi-jian/"/>
    <updated>2016-08-25T11:47:43+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/er-jin-zhi-he-zi-yuan-wen-jian-zi-jian</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">10</span> <span class="title">二进制和资源文件自检</span></h1>
    <p>我们把自己的程序发布到 app store，但是不能保证每一个用户都是从 app store 下载官方 app，也不能保证每一个用户都不越狱。
换句话说，我们无法保证程序运行环境在 MAC 管控策略下就绝对的安全。
所以，在有些情况下，尤其是和钱有关系的 app ，我们有必要在和服务器通信时，让服务器知道客户端到底是不是官方正版的 app 。</p>

<p>何以判断自己是不是正版 app 呢？ hackers 们破解你的 app ，无非就 2 个地方可以动，1 个是二进制，1 个是资源文件。</p>

<p>二进制都重新编译过了自然肯定是盗版……</p>

<p>有些低级的 hackers 喜欢修改人家的资源文件然后贴上自己的广告，或者给用户错误的指引……修改资源文件是不需要重新编译二进制的。</p>

<p>因此，我们有必要在敏感的请求报文中，增加正版应用的二进制和资源文件的标识，让服务器知道，此请求是否来自正版的未经修改的 app 。
在沙盒中，我们可以读到自己程序的二进制，也可以读到资源文件签名文件，这两个文件都不算大，我们可以对其取 md5 值然后以某种组合算法得到一个标记字符串，然后发给服务器。</p>

<p>我封装了相关文件的读取地址</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">WQPathUtilities</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">directory:</span><span class="p">(</span><span class="n">NSSearchPathDirectory</span><span class="p">)</span><span class="nv">dir</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">dirStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">dirStr</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">documentsDirectory</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">WQPathUtilities</span> <span class="nl">directory:</span><span class="n">NSDocumentDirectory</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">cachesDirectory</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">WQPathUtilities</span> <span class="nl">directory:</span><span class="n">NSCachesDirectory</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">tmpDirectory</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">NSTemporaryDirectory</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">homeDirectory</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">NSHomeDirectory</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">codeResourcesPath</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">excutableName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleExecutable&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">tmpPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WQPathUtilities</span> <span class="n">documentsDirectory</span><span class="p">]</span> <span class="n">stringByDeletingLastPathComponent</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tmpPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">excutableName</span><span class="p">]</span>
</span><span class="line">                         <span class="nl">stringByAppendingPathExtension:</span><span class="s">@&quot;app&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">sigPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">appPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;_CodeSignature&quot;</span><span class="p">]</span>
</span><span class="line">                         <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;CodeResources&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sigPath</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">binaryPath</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">excutableName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">][</span><span class="s">@&quot;CFBundleExecutable&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">tmpPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WQPathUtilities</span> <span class="n">documentsDirectory</span><span class="p">]</span> <span class="n">stringByDeletingLastPathComponent</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">appPath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tmpPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">excutableName</span><span class="p">]</span>
</span><span class="line">                         <span class="nl">stringByAppendingPathExtension:</span><span class="s">@&quot;app&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">binaryPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">appPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="n">excutableName</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">binaryPath</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>md5方法：</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;CommonCrypto/CommonDigest.h&quot;  </span>
</span><span class="line">
</span><span class="line"><span class="k">+</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">md5WithString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">cStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">result</span><span class="p">[</span><span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class="line">    <span class="n">CC_MD5</span><span class="p">(</span><span class="n">cStr</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">cStr</span><span class="p">),</span> <span class="n">result</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="p">[[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X&quot;</span><span class="p">,</span>
</span><span class="line">             <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">             <span class="n">result</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
</span><span class="line">             <span class="n">result</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span>
</span><span class="line">             <span class="n">result</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span>
</span><span class="line">             <span class="p">]</span> <span class="n">lowercaseString</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样做就 100% 安全了吗？<br />
答案是：不……<br />
所谓魔高一尺，道高一丈，不过也能阻止一些低级的 hack 手段了～</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Keychain-Dumper 导出 keychain 数据]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-keychain-dumper-dao-chu-keychain-shu-ju/"/>
    <updated>2016-08-25T11:45:38+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-keychain-dumper-dao-chu-keychain-shu-ju</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">9</span> <span class="title">使用 Keychain-Dumper 导出 keychain 数据</span></h1>
    <p>iOS 系统及第三方应用都会使用 Keychain 来作为数据持久化存储媒介，或者应用间数据共享的渠道。</p>

<p>所以 Keychain 数据库是 hacker 们最关注的数据源头之一。
不知道是算幸运还是不幸，导出 Keychain 数据库数据的工具早已非常完善，下载地址：<a href="https://github.com/ptoomey3/Keychain-Dumper">Keychain-Dumper传送门</a></p>

<h4>操作步骤极其简单：</h4>

<p>1）赋予 Keychain 数据库可读权限</p>

<div class="code code">
<pre class="code">Primer:~ root# cd /private/var/Keychains/
&nbsp;
Primer:/private/var/Keychains root# ls  
TrustStore.sqlite3  accountStatus.plist  caissuercache.sqlite3  keychain-2.db  keychain-2.db-shm  keychain-2.db-wal  ocspcache.sqlite3  ocspcache.sqlite3-shm  ocspcache.sqlite3-wal  
&nbsp;
Primer:/private/var/Keychains root# chmod +r keychain-2.db</pre>
</div>

<p>2）使用 Keychain-Dumper 导出 Keychain</p>

<div class="code code">
<pre class="code">Primer:/private/var/Keychains root# /your_path/keychain_dumper &gt; keychain-export.txt</pre>
</div>

<p>然后拷贝到本地查看，到底 iOS 系统和第三方应用都存放了哪些信息，就一览无余了。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
</feed>
