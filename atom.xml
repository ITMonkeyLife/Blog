<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[IT Monkey Life]]></title>
  <link href="http://ITMonkeyLife.github.io/Blog/atom.xml" rel="self"/>
  <link href="http://ITMonkeyLife.github.io/Blog/"/>
  <updated>2016-10-25T11:16:36+08:00</updated>
  <id>http://ITMonkeyLife.github.io/Blog/</id>
  <author>
    <name><![CDATA[Rick]]></name>
    <email><![CDATA[382542165@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[面向对象之数据抽象]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/10/14/mian-xiang-dui-xiang-zhi-shu-ju-chou-xiang/"/>
    <updated>2016-10-14T16:33:04+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/10/14/mian-xiang-dui-xiang-zhi-shu-ju-chou-xiang</id>
    <content type="html"><![CDATA[<h3 id="oo-programming">OO Programming</h3>
<p>Java中的编程主要基于构建数据类型。 这种编程风格被称为面向对象编程，因为它围绕着对象的概念，对象是一个保存数据类型值的实体。 对于Java的原始类型，我们主要局限于对数字进行操作的程序，但是对于引用类型，我们可以编写操作字符串，图片，声音或者在Java标准库中或在我们的书站上可用的数百个其他抽象中的任何一个 。 比预定义数据类型的库更重要的是，Java编程中可用的数据类型范围是开放式的，因为您可以定义自己的数据类型。
1. 数据类型。 数据类型是一组值和一组对这些值的操作。
2. 抽象数据类型。 抽象数据类型是其内部表示对客户端隐藏的数据类型。
3. 对象。 对象是可以接受数据类型值的实体。 对象的特征在于三个基本属性：对象的状态是来自其数据类型的值; 对象的身份将一个对象与另一个对象区分开; 对象的行为是数据类型操作的影响。 在Java中，引用是访问对象的机制。
4. 应用程序编程接口（API）。 为了指定抽象数据类型的行为，我们使用一个应用程序编程接口（API），它是构造函数和实例方法（操作）的列表，并对每个函数的效果进行非正式描述，如本计数器的API一样：
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_counter-api.png" /><br />
5. 客户。 客户端是使用数据类型的程序。
6. 实现。 实现是实现API中指定的数据类型的代码。</p>

<h3 id="section">使用抽象数据类型。</h3>
<p>客户端不需要知道数据类型是如何实现的，以便能够使用它。
1. 创建对象。 每个数据类型值存储在对象中。 要创建（或实例化）单个对象，我们使用关键字new调用构造函数。 每次客户端使用new时，系统为对象分配内存空间，初始化其值，并返回对对象的引用。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_constructor.png" /><br />
2. 调用实例方法。 实例方法的目的是对数据类型值进行操作。 实例方法具有静态方法的所有属性：参数通过值传递，方法名称可以重载，它们可能具有返回值，并且它们可能导致副作用。 他们有一个额外的属性，表征他们：每个调用与一个对象相关联。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_instance-method.png" /><br />
3. 使用对象。 声明给了我们可以在代码中使用的对象的变量名。 要使用给定的数据类型，我们：
	* 声明类型的变量，用于引用对象
  * 使用关键字new来调用创建类型对象的构造函数
  * 使用对象名称来调用实例方法，作为语句或表达式
例如，<a href="http://algs4.cs.princeton.edu/12oop/Flips.java.html">Flips.java</a>是一个<a href="http://algs4.cs.princeton.edu/12oop/Counter.java.html">Counter.java</a>客户端，它接受命令行参数T并模拟T硬币翻转。
4. 分配语句。 具有引用类型的赋值语句创建引用的副本（并且不创建新对象）。 这种情况称为别名：两个变量都指向相同的对象。 别名是Java程序中常见的错误来源，如以下示例所示：</p>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Counter</span><span class="o">(</span><span class="s">&quot;ones&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">c1</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>
</span><span class="line"><span class="n">Counter</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">c1</span><span class="o">;</span>
</span><span class="line"><span class="n">c2</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>
</span><span class="line"><span class="n">StdOut</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>代码打印字符串“2 ones”。</p>
<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之程序模型]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/10/13/suan-fa-zhi-cheng-xu-mo-xing/"/>
    <updated>2016-10-13T20:41:28+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/10/13/suan-fa-zhi-cheng-xu-mo-xing</id>
    <content type="html"><![CDATA[<p>
我们对算法的研究是基于将它们实现为用Java编程语言编写的程序。 我们这样做有几个原因：
<ul>
<li> 我们的程序是简洁，优雅，完整的算法描述。</li>
<li> 您可以运行程序来研究算法的属性。</li>
<li> 您可以立即在应用程序中使用算法。</li>
</ul>
</p>
<p>
<h2>原始数据类型和表达式</h2> <em>数据类型</em> 是一组值和一组对这些值的操作。以下四种基本数据类型是Java语言的基础：
<ul>
<li>整数，带算术运算（int）</li>
<li>实数，再次与算术运算(<tt>double</tt>)</li>
<li>布尔值，带有逻辑运算符的值{true，false}的集合（布尔）</li>
<li>字符，您键入的字母数字字符和符号（char）</li>
</ul>
Java程序操作以标识符命名的变量。 每个变量与数据类型相关联，并存储允许的数据类型值之一。 我们使用表达式来应用与每个类型相关联的操作。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_building-blocks.png" />
<br />下表总结了对于Java的int，double，boolean和char数据类型的值的集合和最常见的操作。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_primitive.png" />
<ul>
<li>表达式。 典型的表达式是中缀。 当表达式包含多个运算符时，优先级顺序指定它们的应用顺序：运算符*和/（和％）的优先级高于（应用于）+和 - 运算符; 在逻辑运算符之间！ 是最高优先级，后跟&amp;&amp;和然后||。 通常，相同优先级的运算符是左关联的（从左到右应用）。 您可以使用括号来覆盖这些规则。</li>
<li>类型转换。 如果没有丢失信息，则数字将自动提升为更具包容性的类型。例如，在表达式1 + 2.5中，1被提升为双精度值1.0，表达式的值为双精度值3.5。 转换是将一个类型的值转换为另一个类型的值的指令。 例如（int）3.7是3.将double转换为int将截断到零。</li>
<li>比较。 以下混合类型运算符比较相同类型的两个值并生成布尔值：
<ul>
<li>相等 (==)</li>
<li>不等 (!=)</li>
<li>小于 (&lt;)</li>
<li><em>小于等于</em> (&lt;=)</li>
<li><em>大于</em> (&gt;)</li>
<li><em>大于等于</em> (&gt;=)</li>
</ul></li>
<li>其他原语类型。
Java的int有一个32位的表示; Java的double类型具有64位表示。 Java有五种额外的原始数据类型：
<ul>
<li>64位整数，带算术运算（长整型）</li>
<li>16位整数，带算术运算（短）</li>
<li>16位字符，带算术运算（char）</li>
<li>8位整数，带算术运算（字节）</li>
<li>32位单精度实数，带算术运算（float）</li>
</ul></li>
</ul>
<br />
</p>

<p><h2>语句</h2>Java程序由语句组成，语句通过创建和操作变量，为其分配数据类型值以及控制这些操作的执行流程来定义计算。
<ul>
<li>声明创建指定类型的变量，并用标识符命名它们。 Java是一种强类型语言，因为Java编译器检查一致性。 变量的范围是定义它的程序的一部分。</li>
<li>分配将数据类型值（由表达式定义）与变量关联。</li>
<li>初始化声明将声明与赋值相结合，以便在声明变量的同时初始化变量。</li>
<li>隐式分配。 当我们的目的是修改变量相对于当前值的值时，可以使用以下快捷键：
<ul>
<li>递增/递减运算符：代码i ++是i = i + 1的缩写。除了表达式值是在递增/递减之后，而不是之前，代码++ i是相同的。</li>
<li>其他复合运算符：代码i / = 2是i = i / 2的缩写。</li>
</ul></li>
<li>条件提供了执行流程的简单改变 - 根据指定的条件，在两个块中的一个块中执行语句。</li>
<li>循环提供了执行流程中更深刻的变化 - 只要给定条件为真，就执行块中的语句。 我们将循环中的块中的语句称为循环体。</li>
<li>break和continue。 Java支持在while循环中使用两个附加语句：
<ul>
<li>break语句，它立即退出循环</li>
<li>continue语句，它立即开始循环的下一次迭代</li>
</ul></li>
<li>符号。 许多循环遵循这个方案：将索引变量初始化为某个值，然后使用while循环测试涉及索引变量的循环继续条件，其中while循环中的最后一个语句增加索引变量。 你可以用Java的表示法来表达这样的循环。</li>
<li>单语句块。 如果条件或循环中的语句块只有一个语句，则可以省略花括号。</li>
</ul>
下表说明了不同种类的Java语句。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_statements.png" />
</p>
<p>
<h2>数组。</h2> 数组存储所有相同类型的值序列。 如果我们有N个值，我们可以使用符号a [i]来指代从0到N-1的i的任何值的第i个值。
<ul>
<li>创建和初始化数组。 在Java程序中创建数组涉及三个不同的步骤：
<ul>
<li>声明数组的类型和名称</li>
<li>创建数组</li>
<li>初始化数组的值</li>
</ul></li>
<li>默认数组初始化。 对于代码更简洁，我们经常利用Java的默认数组初始化约定，并将所有三个步骤组合成一个语句。 对于数字类型，默认初始值为零，对于类型布尔值为false。</li>
<li>初始化声明。 我们可以在编译时指定初始化值，方法是在花括号之间列出文字值，用逗号分隔。</li>
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_array.png" />
<li>使用数组。 一旦我们创建一个数组，它的大小是固定的。 程序可以使用代码a.length引用数组a []的长度。 Java执行自动边界检查 - 如果你访问一个非法索引的数组，你的程序将终止ArrayIndexOutOfBoundsException。</li>
<li>别名。 数组名称引用整个数组 - 如果我们将一个数组名称指定给另一个数组名称，那么它们都引用相同的数组，如下面的代码片段所示。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1234</span><span class="o">;</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">5678</span><span class="o">;</span>   <span class="c1">// a[i] is now 5678.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这种情况被称为混叠，并且可能导致微妙的错误。</li>
<li>二维数组。 Java中的二维数组是一维数组的数组。 二维阵列可以是粗糙的（其阵列可以都具有不同的长度），但是我们最常使用（对于适当的参数M和N）M乘N的二维阵列。 为了引用二维数组a [] []的行i和列j中的条目，我们使用符号a [i] [j]。</li>
</ul>
</p>
<p>
<h2>静态方法。</h2> 静态方法在许多编程语言中被称为函数，因为它们可以表现得像数学函数。 每个静态方法是一系列语句，它们在调用静态方法时一个接一个执行。
<ul>
<li>定义静态方法。 方法封装被定义为语句序列的计算。 方法接受参数（给定数据类型的值），并计算一些数据类型的返回值或导致副作用。 每个静态方法由签名和主体组成。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_static-method.png" /></li>
<li>调用静态方法。 对静态方法的调用是其名称，后跟表达式，指定括号中的参数值，用逗号分隔。 当一个方法被调用时，它的参数变量用调用中相应表达式的值初始化。 返回语句终止静态方法，将控制权返回给调用者。 如果静态方法是计算值，则必须在return语句中指定该值。</li>
<li>方法的属性。 Java方法具有以下特性：
<ul>
<li>参数通过值传递。 调用函数时，参数值将完全求值，并将结果值复制到参数变量中。 这称为值传递。 数组（和其他对象）引用也通过值传递：方法不能更改引用，但它可以更改数组中的条目（或对象的值）。</li>
<li>方法名称可以重载。 类中的方法可以具有相同的名称，只要它们具有不同的签名。 此功能称为重载。</li>
<li>方法具有单个返回值，但可能有多个返回语句。 Java方法只能提供一个返回值。 一旦达到第一个return语句，控制就返回调用程序。</li>
<li>一种方法可能有副作用。 方法可以使用关键字void作为其返回类型，以指示它没有返回值，并产生副作用（消耗输入，产生输出，改变数组中的条目，或以其它方式改变系统的状态）。</li>
</ul></li>
<li>递归。 递归方法是直接或间接调用自身的方法。 开发递归程序有三个重要的经验法则：
<ul>
<li>递归具有基本案例。</li>
<li>递归调用必须解决在某种意义上较小的子问题，因此递归调用会收敛到基本情况。</li>
<li>递归调用不应解决重叠的子问题。</li>
</ul></li>
<li>基本编程模型。 静态方法库是一组在Java类中定义的静态方法。 Java编程的基本模型是开发一个程序，通过创建一个静态方法库，其中一个名为main（），来解决特定的计算任务。</li>
<li>模块化编程。 静态方法的库允许模块化编程，其中一个库中的静态方法可以调用其他库中定义的静态方法。 这种方法有许多重要的优点。
<ul>
<li>使用合理大小的模块</li>
<li>共享和重用代码，而不必重新实现它</li>
<li>替代改进的实现</li>
<li>为解决编程问题开发适当的抽象模型</li>
<li>本地化调试</li>
</ul></li>
<li>单元测试。 Java编程的最佳实践是在每个测试库中的方法的静态方法库中包含一个main（）。</li>
<li>外部库。 我们使用来自四种不同类型库的静态方法，每种都需要（略）不同的代码重用程序。</li>
<ul>
<li>java.lang中的标准系统库，包括java.lang.Math，java.lang.Integer和java.lang.Double。</li>
<li>导入的系统库，如java.util.Arrays。 在程序开始时需要一个import语句来使用这样的库。</li>
<li>我们开发用的标准库。 要使用这样的程序，请将源码下载到您的工作目录中，或按照<a href="http://algs4.cs.princeton.edu/code">以下说明</a>将<a href="http://algs4.cs.princeton.edu/code/stdlib.jar">stdlib.jar</a>添加到类路径中。</li>
</ul>
要从另一个库调用方法，我们将库名称作为每个调用的方法名称的前缀：Math.sqrt（），Arrays.sort（），BinarySearch.rank（）和StdIn.readInt（）。
</ul>
</p>
<p>
<h2>字符串</h2>
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_string.png" />
<ul>
<li>串联</li>
<li>转换</li>
<li>自动转换。</li>
<li>命令行参数。</li>
</ul>
</p>

<p>
输入与输出
<ul>
<li>命令和参数。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_command.png" /></li>
<li>标准输出</li>
<li>格式化输出
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_printf.png" /></li>
<li>标准输入</li>
<li>重定向和管道。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_redirect.png" /></li>
<li>从文件输入和输出。</li>
<li>标准绘图</li>
</ul>
</p>
<p>
<h2>二进制搜索。</h2> 下面是一个完整的Java程序<a href="http://algs4.cs.princeton.edu/11model/BinarySearch.java.html">BinarySearch.java</a>，它说明了我们的编程模型的许多基本特性。 它实现了一种称为二进制搜索的经典算法，并针对称为白名单过滤的应用程序对其进行测试。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_binary-search-anatomy.png" />
<br />
静态方法rank（）使用整数键和int值的排序数组作为参数，并返回键的索引（如果它存在于数组中），否则为-1。 它通过维护变量lo和hi来完成这个任务，使得如果在数组中，则密钥在[lo..hi]中，然后进入测试间隔中的中间条目（在索引mid）的循环。 如果键等于[mid]，返回值为mid; 否则，该方法将大约一半的间隔大小，如果该键小于a [mid]，则查看左半部分，如果该键大于[mid]，则查看右半部分。 当找到键或间隔为空时，进程终止。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_binary-search.png" />
<ul>
<li>开发客户端</li>
<li>白名单</li>
<li>性能</li>
</ul>
</p>

<p>
输入和输出库。 这里是一个输入和输出库的列表.

<table>
  <tr>
  <th><b /></th>
  <th><b>程序</b></th>
  <th><b>描述 / JAVA文档</b></th>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="read numbers and text from standard input" href="http://algs4.cs.princeton.edu/stdlib/StdIn.java.html">StdIn.java</a></td>
  <td><a title="read numbers and text from standard input" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdIn.html">从标准输入读取数字和文本</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="write numbers and text to standard output" href="http://algs4.cs.princeton.edu/stdlib/StdOut.java.html">StdOut.java</a></td>
  <td><a title="write numbers and text to standard output" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdOut.html">将数字和文本写入标准输出</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="draw geometric shapes in a window" href="http://algs4.cs.princeton.edu/stdlib/StdDraw.java.html">StdDraw.java</a></td>
  <td><a title="draw geometric shapes in a window" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdDraw.html">在窗口中绘制几何形状</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="create, play, and manipulate sound" href="http://algs4.cs.princeton.edu/stdlib/StdAudio.java.html">StdAudio.java</a></td>
  <td><a title="create, play, and manipulate sound" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdAudio.html">创建，播放和操纵声音</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="generate random numbers" href="http://algs4.cs.princeton.edu/stdlib/StdRandom.java.html">StdRandom.java</a></td>
  <td><a title="generate random numbers" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdRandom.html">生成随机数</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="compute statistics" href="http://algs4.cs.princeton.edu/stdlib/StdStats.java.html">StdStats.java</a></td>
  <td><a title="compute statistics" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdStats.html">计算统计</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="read and write 1D and 2D arrays" href="http://algs4.cs.princeton.edu/stdlib/StdArrayIO.java.html">StdArrayIO.java</a></td>
  <td><a title="read and write 1D and 2D arrays" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdArrayIO.html">读取和写入1D和2D阵列</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="read numbers and text from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/In.java.html">In.java</a></td>
  <td><a title="read numbers and text from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/javadoc/In.html">从文件和URL读取数字和文本</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="write numbers and text to files" href="http://algs4.cs.princeton.edu/stdlib/Out.java.html">Out.java</a></td>
  <td><a title="write numbers and text to files" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Out.html">写数字和文本到文件</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="draw geometric shapes" href="http://algs4.cs.princeton.edu/stdlib/Draw.java.html">Draw.java</a></td>
  <td><a title="draw geometric shapes" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Draw.html">绘制几何形状</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="process digital images" href="http://algs4.cs.princeton.edu/stdlib/Picture.java.html">Picture.java</a></td>
  <td><a title="process digital images" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Picture.html">过程数字图像</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/32class/index.php#3.2">3.2</a></td>
  <td><a title="measure running time" href="http://algs4.cs.princeton.edu/stdlib/Stopwatch.java.html">Stopwatch.java</a></td>
  <td><a title="measure running time" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Stopwatch.html">测量运行时间</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="write bits to standard output" href="http://algs4.cs.princeton.edu/stdlib/BinaryStdOut.java.html">BinaryStdOut.java</a></td>
  <td><a title="write bits to standard output" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryStdOut.html">写位到标准输出</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="read bits from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/BinaryIn.java.html">BinaryIn.java</a></td>
  <td><a title="read bits from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryIn.html">从文件和URL读取位</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="write bits to files" href="http://algs4.cs.princeton.edu/stdlib/BinaryOut.java.html">BinaryOut.java</a></td>
  <td><a title="write bits to files" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryOut.html">写位到文件</a></td>
  </tr>
</table>

我们简要描述输入和输出库，并包括一个示例客户端。
</p>

<p>标准输入和标准输出。 <a href="http://algs4.cs.princeton.edu/11model/StdIn.java.html">StdIn.java</a>和<a href="http://algs4.cs.princeton.edu/11model/StdOut.java.html">StdOut.java</a>是用于从标准输入中读取数字和文本以及将数字和文本打印到标准输出的库。 我们的版本有一个比相应的Java接口更简单的接口（并提供一些技术改进）。 <a href="http://algs4.cs.princeton.edu/11model/RandomSeq.java.html">RandomSeq.java</a>生成给定范围内的随机数。 <a href="http://algs4.cs.princeton.edu/11model/Average.java.html">Average.java</a>从标准输入读取一系列实数，并在标准输出上打印它们的平均值。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">%</span> <span class="n">java</span> <span class="n">Average</span>
</span><span class="line"><span class="mf">10.0</span> <span class="mf">5.0</span> <span class="mf">6.0</span> <span class="mf">3.0</span> <span class="mf">7.0</span> <span class="mf">32.0</span>
</span><span class="line"><span class="mf">3.14</span> <span class="mf">6.67</span> <span class="mf">17.71</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Ctrl</span><span class="o">-</span><span class="n">d</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">Average</span> <span class="n">is</span> <span class="mf">10.05777777777778</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<a href="http://algs4.cs.princeton.edu/11model/In.java.html">In.java</a>和<a href="http://algs4.cs.princeton.edu/11model/Out.java.html">Out.java</a>是面向对象的版本，支持多个输入和输出流，包括从文件或URL读取和写入文件。
</p>

<p>
标准绘制。 <a href="http://algs4.cs.princeton.edu/11model/StdDraw.java.html">StdDraw.java</a>是一个易于使用的库，用于绘制几何形状，如点，线和圆。 <a href="http://algs4.cs.princeton.edu/11model/RightTriangle.java.html">RightTriangle.java</a>绘制一个直角三角形和一个外接圆。
<a href="http://algs4.cs.princeton.edu/11model/Draw.java.html">Draw.java</a>是一个面向对象的版本，支持在多个窗口中绘制。
</p>
<p>
标准音频。 <a href="http://algs4.cs.princeton.edu/11model/StdAudio.java.html">StdAudio.java</a>是一个易于使用的库合成声音。 <a href="http://algs4.cs.princeton.edu/11model/Tone.java.html">Tone.java</a>从命令行读取频率和持续时间，并且在给定持续时间内声化给定频率的正弦波。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">%</span> <span class="n">java</span> <span class="n">Tone</span> <span class="mf">440.0</span> <span class="mf">3.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
图像处理。 <a href="http://algs4.cs.princeton.edu/11model/Picture.java.html">Picture.java</a>是一个易于使用的图像处理库。 <a href="http://algs4.cs.princeton.edu/11model/Scale.java.html">Scale.java</a>使用图片文件的名称和两个整数（width w和height h）作为命令行参数，并将图像缩放为w-by-h。
</p>

<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:音调和记号]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/18/yin-le-le-li-yin-diao-he-ji-hao/"/>
    <updated>2016-09-18T17:47:43+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/18/yin-le-le-li-yin-diao-he-ji-hao</id>
    <content type="html"><![CDATA[<div id="static">
<ul>
<li> 半步（或&#8221;半音&#8221;）是从键盘到下一个相邻的键上一个键之间的距离。
<li> 键1到键2是一半的音，因为它们是彼此相邻。
<li> 半步并不总是从白键到黑键。
<li> 在这个例子中，键1和键2仍然彼此相邻。
<li> 一个完整的全音（或&#8221;全音&#8221;或简称&#8217;音&#8221;）是相同的距离，两个半音。
<li> 键1到键3是一个整体的音。
<li> 键1到键2是第一半步。 2键是键3的第二半步。
<li> 一个偶然的是用来提高或降低音符的音高的标志。
<li> 我们将讨论的第一个记号是平的和尖锐。
<li> 平半步降低了一个音调，而锐半步提出了一个音调。
<li> 键入时，您可以使用＃来代表尖锐，A B来代表一个单位。
<li> 让我们来看看在C和D之间的黑键
<li> 此键可称为C＃，因为它首先是C.半步
<li> 它也可以被称为Db，因为它低于D.半步
<li> 另一个例子是E和F
<li> E也可以被称为Fb的，因为它低于F.半步
<li> 同样，F可称为E＃。
<li> 每当有一定间距有多个名字，它被称为等音拼写。
<li> 接下来，让我们讨论双平板和双锐利。
<li> 虽然平滑和尖锐半步，双平双锐利的改变的说明一整步改变一个音符。
<li> 打字时，您可以使用x要代表一个双锐利和bb表示double持平。
<li> 例如，D和Ebb具有相同的间距，因为你可以从E去整个音步长（或两个半台阶）往下到达D
<li> D也可以听起来一样Cx，因为它是上述C的整个步长
<li> 最后，自然消除了任何意外，并返回一个音符到原来的白键。
<li> 我们将在即将到来的课程了解更多关于本位音。


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:增强点和持续音]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/08/yin-le-le-li-dian-he-lian-xian/"/>
    <updated>2016-09-08T16:56:40+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/08/yin-le-le-li-dian-he-lian-xian</id>
    <content type="html"><![CDATA[<div id="static">
<ul>
<li> 增强点和持续音的关系有两种类型来改变一个音符的时间标记。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_20.png" />
<li> 一个点了一大半增加持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_40.png" />
<li> 由于八分音符的四分音符的1/2时间，我们将用它替换了1/2个符号。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_60.png" />
<li> 正如你所看到的，一个点四分音符等于四分音符加上八分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_80.png" />
<li> 一个点四分音符也可以等于3八分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_100.png" />
<li> 连线持续合并相同间距的多个音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_120.png" />
<li> 它们被用来让穿过屏障（如本例中的音节）的音符，声音的持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_140.png" />
<li> 第四和第五音符现在合并在一起。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_160.png" />
<li> 如果音节分隔线都没有了，我们可以写一个半音符来代替。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_180.png" /><br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_200.png" />
<li> 使用此图表参考增强点。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson14_220.png" /><br />完整的流程如下: <br />
<embed src="http://ITMonkeyLife.github.io/Blog/videos/lesson14.swf" width="800" height="380" type="application/x-shockwave-flash" />


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</li></li></li></li></li></li></li></li></li></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:休止符]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/08/yin-le-le-li-xiu-zhi-fu/"/>
    <updated>2016-09-08T14:55:44+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/08/yin-le-le-li-xiu-zhi-fu</id>
    <content type="html"><![CDATA[<div id="static">
<ul>
<li>休止符标示在一个音节中沉默的时期。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_20.png" />
<li>每种类型的休止符对应的同等类型的音符的持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_40.png" />
<li>例如:这两个四分之一休止符和四分音符占用的时间是相同的。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_60.png" /><br />当音符发出声音时，休止符是沉默的。
<li>为了证明这一点，让我们填写4/4时间的音节与四分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_80.png" /><br />当弹奏时，所有的音符都发出声音。
<li>接下来，我们替换第二个音符为休止符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_100.png" /><br />当弹奏时，第二个没有声音。
<li>接下来，我们讨论其他类型的休止符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_120.png" />
<li>一个全休止符占据的时间是相同的全音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_140.png" />
<li>它被画成一个盒子从第四条五线谱向下。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_160.png" />
<li>半休止符占有时间等同数量的一半音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_180.png" />
<li>它被画成一个盒子从中间线的五线谱升起。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_200.png" />
<li>像音符，休止符可以有标志。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_220.png" />
<li>与一个标志，八分休止符具有相同的持续时间作为一个八分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_240.png" />
<li>有两个标志，十六休止符有相同的时间为十六分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_260.png" />
<li>尽管罕见，休止符可以有三个或更多个标志。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_280.png" />
<li>使用此图表，以供参考休止符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson13_281.png" /> 


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:标准音与节拍]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/07/yin-le-le-li-biao-zhun-yin-yu-jie-pai/"/>
    <updated>2016-09-07T16:44:14+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/07/yin-le-le-li-biao-zhun-yin-yu-jie-pai</id>
    <content type="html"><![CDATA[<div id="static">
<ul>
<li> 垂直的黑线将切分五线谱。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_20@2x.png" />
<li> 五线谱划分两个音符区。 <br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_40@2x.png" />
<li> 节拍定义了每个区包含的不同种类的音符。
<li> 第一个区的节拍是 4/4 第二个区的节拍是 3/4 。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_60@2x.png" />
<li> 第一区 (4/4) 包含四个四分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_80@2x.png" />
<li> 第二区(3/4) 包含三个四分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_100@2x.png" />
<li> 接下来，我们将讨论非四分音符节拍。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_120@2x.png" />
<li> 6/8 包含了六个八分音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_140@2x.png" />
<li> 3/2 包含三个半音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_160@2x.png" />
<li> 该图表显示了所有我们讨论的节拍。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson12_161@2x.png" />


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</li></li></li></li></li></li></li></li></li></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:音符持续时间]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-yin-fu-chi-xu-shi-jian/"/>
    <updated>2016-09-06T16:12:20+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-yin-fu-chi-xu-shi-jian</id>
    <content type="html"><![CDATA[<div id="static">
<ul>
<li> 一个音符演奏的时间长度被称为它的音符时值，它是由音符的类型决定。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_20@2x.png" />
<li> 该全音符在现代音乐最长的音符时值。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_40@2x.png" />
<li> 二分音符具有全音符的一半的持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_60@2x.png" />
<li> 两个半音符占据的时间相同为一体的全音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_80@2x.png" />
<li> 四分音符为全音符的第四（或四分之一）。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_100@2x.png" />
<li> 四个四分音符占据的时间相同为一体的全音符。两个四分音符等于一个半音符的持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_120@2x.png" />
<li> 注意到，在持续时间小于四分音符有标志。每个标志减半音符的价值。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_140@2x.png" />
<li> 八分音符有一个标志。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_160@2x.png" />
<li> 因此，二个八分音符占用的时间相同数量的四分之一音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_180@2x.png" />
<li> 一个十六分音符有两个标志，再减半值。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_200@2x.png" />
<li> 两个十六分音符等于八分音符的持续时间。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_220@2x.png" />
<li> 四个十六分音符占据的时间相同数量的四分之一音符。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_240@2x.png" />
<li> 虽然可以有一个与三个或更多个标志音符，它们一般不使用。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_260@2x.png" />
<li> 该图表显示在本节讨论的所有五种音符类型的关系。<br /><img src="http://ITMonkeyLife.github.io/Blog/images/music/lesson11_261@2x.png" />


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐乐理:五线谱，谱号，加线]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-wu-xian-pu-%2Cpu-hao-%2Cjia-xian/"/>
    <updated>2016-09-06T10:02:28+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/06/yin-le-le-li-wu-xian-pu-,pu-hao-,jia-xian</id>
    <content type="html"><![CDATA[<p>
<code>五线谱</code>是对音符绘制的基础。现代的五线谱是由5根线和4个空间组成的。
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jn3flan2j21kw0lcdh6.jpg" />
在五线谱上的每行线或者空白处都表示键盘上的白建。
<br />
</p>

<p>
谱号分配给各个音符某些行或空格。
两个谱号经常用到，分别是：高音和低音。
<br />
<img src="http://ww3.sinaimg.cn/large/626e5d69gw1f7jqbp0363j21kw0lcq4r.jpg" />
<br />
我们先讨论高音（通常也称为G 谱）.该谱号环绕（显示为红色）五线谱线被称为G.放在该行的任何音符变成G.
<br />
G调以上的空白处的调是A调（记住，没有一个“H”调）
<br />
A调以上的调是B调。以此类推，G、A、B、C、D、E、F、G
<br />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f7jqd7qzk5j21kw0lcdi6.jpg" />
额我们看来已经超过了五线谱的范围了，这时候该怎么办？
</p>

<p>
加线将解决我们的困境。
我们在五线谱之外，额外添加一条线，然后在这个线处继续添加A
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jsx3rujij21kw0lcdi5.jpg" />
</p>
<!-- more -->
<p>
接下来，我们看看低音（也被称为F谱）
F谱是在这两个点之间的线上做的谱。
<br />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f7jsz10y8bj21kw0lc0u3.jpg" />
我们把剩下的五线谱上的谱都标记出来。
<br />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7jsxovewdj21kw0lcjtl.jpg" />
</p>

<p>
最后我们来看看Grand Staff,五线谱基于原理组成的十一条线。消掉中间的线，变成两个五线谱。
<br />
<img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7jtlgp82ej21kw0lcmzh.jpg" />
</p>

<p>
在上面的五线谱添加高音，下面的五线谱添加低音，我们能看到这两个五线谱的关系。
我们注意到这两个五线谱通过C谱连接在一起（红色展示）,在这里的C通常称中C,因为它对应于Grand Staff中间的线
</p>

<p>
下面是本小节完整的演示。
</p>
<p>
<video width="800" height="300" controls="controls" preload="auto">
 <source src="http://ITMonkeyLife.github.io/Blog/videos/lesson10.mp4" type="video/mp4" />
</video>
<!-- <embed src="http://www.musictheory.net/vc/6/0/53481700c244fded30bde8b5683ebc08f0eaafe6/lesson10.swf"
width="800" height="380"
type="application/x-shockwave-flash"> &#8211;>
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 推送证书过期指南]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/09/05/ios-tui-song-zheng-shu-guo-qi-zhi-nan/"/>
    <updated>2016-09-05T12:30:46+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/09/05/ios-tui-song-zheng-shu-guo-qi-zhi-nan</id>
    <content type="html"><![CDATA[<p>  
今天一早，运维部门同事，说咱们友盟上面推送证书已经到期了。那么到期了证书应该怎么样去更换新的证书呢。
</p>
<p>
1、我们先去<a href="https://developer.apple.com/account/ios/certificate/distribution">苹果开发者中心</a>新建一个Certificates证书。
</p>
<p>
2、下载<code>Cert</code>文件到本地，双击之后。在<code>Keychain Access</code>中找到我们创建的证书。Export导出p12格式，创建密码。
</p>
<p>
3、有时候后端需要pem格式的证书,我们通过终端进入p12 文件所在的文件夹，通过终端输入下面的命令生成pem文件
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">openssl pkcs12 -in dev_push_Certificates.p12 -out apns-dev-cert.pem -nodes -clcerts
</span><span class="line">Enter Import Password:
</span><span class="line">MAC verified OK</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
4、生成证书后，只要替换Push证书就好了。
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发锦囊]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/29/ioskai-fa-jin-nang/"/>
    <updated>2016-08-29T15:44:35+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/29/ioskai-fa-jin-nang</id>
    <content type="html"><![CDATA[<p>
1、判断是不是AppStore版本
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isAppStoreEnvironment</span> <span class="p">{</span>
</span><span class="line"><span class="cp">#if TARGET_OS_IOS &amp;&amp; !TARGET_IPHONE_SIMULATOR</span>
</span><span class="line">    <span class="k">return</span> <span class="p">([[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;embedded&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;mobileprovision&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
<p>
2、判断当前系统时区名称
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">currentSystemTimeZoneName</span> <span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">NSLock</span> <span class="o">*</span> <span class="n">methodLock</span><span class="p">;</span>
</span><span class="line">    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class="line">    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">methodLock</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSLock</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">methodLock</span> <span class="n">lock</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">NSTimeZone</span> <span class="n">resetSystemTimeZone</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span> <span class="n">systemTimeZoneName</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSTimeZone</span> <span class="n">systemTimeZone</span><span class="p">].</span><span class="n">name</span> <span class="n">copy</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">methodLock</span> <span class="n">unlock</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">systemTimeZoneName</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
3、安全的执行method
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Performs selector on the target, only if the target and selector are non-nil,</span>
</span><span class="line"><span class="cm"> * as well as target responds to selector</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safePerformSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">withTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span> <span class="nf">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="nf">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">anotherObject</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="n">selector</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="o">!</span><span class="p">[</span><span class="n">target</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma clang diagnostic push</span>
</span><span class="line"><span class="cp">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span>
</span><span class="line">    <span class="p">[</span><span class="n">target</span> <span class="nl">performSelector:</span><span class="n">selector</span> <span class="nl">withObject:</span><span class="n">object</span> <span class="nl">withObject:</span><span class="n">anotherObject</span><span class="p">];</span>
</span><span class="line"><span class="cp">#pragma clang diagnostic pop</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
4、主线程执行
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">_newSystemLocationManager</span> <span class="p">{</span>
</span><span class="line">    <span class="n">__</span> <span class="n">block</span> <span class="n">CLLocationManager</span> <span class="o">*</span> <span class="n">manager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// CLLocationManager should be created only on main thread, as it needs a run loop to serve delegate callbacks</span>
</span><span class="line">    <span class="n">dispatch_block_t</span> <span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">].</span><span class="n">isMainThread</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">block</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">manager</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
5、添加Block
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addBlockForCurrentLocation:</span><span class="p">(</span><span class="n">PFLocationManagerLocationUpdateBlock</span><span class="p">)</span><span class="nv">handler</span> <span class="p">{</span>
</span><span class="line">    <span class="k">@synchronized</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">blockSet</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">blockSet</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">handler</span> <span class="n">copy</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//</span>
</span><span class="line">    <span class="c1">// Abandon hope all ye who enter here.</span>
</span><span class="line">    <span class="c1">// Apparently, the CLLocationManager API is different for iOS/OSX/watchOS/tvOS up to the point,</span>
</span><span class="line">    <span class="c1">// where encapsulating pieces together just makes much more sense</span>
</span><span class="line">    <span class="c1">// than hard to human-parse compiled out pieces of the code.</span>
</span><span class="line">    <span class="c1">// This looks duplicated, slightly, but very much intentional.</span>
</span><span class="line">    <span class="c1">//</span>
</span><span class="line"><span class="cp">#if TARGET_OS_WATCH</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="s">@&quot;NSLocationWhenInUseUsageDescription&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif TARGET_OS_TV</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif TARGET_OS_IOS</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">requestAlwaysAuthorization</span><span class="p">)])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">applicationState</span> <span class="o">!=</span> <span class="n">UIApplicationStateBackground</span> <span class="o">&amp;&amp;</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">bundle</span> <span class="nl">objectForInfoDictionaryKey:</span><span class="s">@&quot;NSLocationWhenInUseUsageDescription&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#elif PF_TARGET_OS_OSX</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<p>
6、安全执行线程
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class="line"><span class="k">extern</span> <span class="n">dispatch_queue_t</span> <span class="nf">JPThreadsafetyCreateQueueForObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="kt">void</span> <span class="nf">JPThreadsafetySafeDispatchSync</span><span class="p">(</span><span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span> <span class="n">dispatch_block_t</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line"><span class="cp">#define JPThreadSafetyPerform(queue, block) ({                      \</span>
</span><span class="line"><span class="cp">    __ block typeof((block())) result;                              \</span>
</span><span class="line"><span class="cp">    JPThreadsafetySafeDispatchSync(queue, ^{ result = block(); }); \</span>
</span><span class="line"><span class="cp">    result;                                                        \</span>
</span><span class="line"><span class="cp">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;JPThreadsafety.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="k">const</span> <span class="n">JPThreadsafetyQueueIDKey</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">JPThreadsafetyQueueIDKey</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">dispatch_queue_t</span> <span class="nf">JPThreadsafetyCreateQueueForObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span><span class="o">*</span> <span class="n">label</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">object</span> <span class="n">class</span><span class="p">])</span> <span class="nl">stringByAppendingString:</span><span class="s">@&quot;.synchronizationQueue&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_SERIAL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">uuid</span><span class="p">));</span>
</span><span class="line">    <span class="n">dispatch_queue_set_specific</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">JPThreadsafetyQueueIDKey</span><span class="p">,</span> <span class="n">uuid</span><span class="p">,</span> <span class="n">free</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">queue</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">JPThreadsafetySafeDispatchSync</span><span class="p">(</span><span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span> <span class="n">dispatch_block_t</span> <span class="n">block</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuidMine</span> <span class="o">=</span> <span class="n">dispatch_get_specific</span><span class="p">(</span><span class="n">JPThreadsafetyQueueIDKey</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">uuidOther</span> <span class="o">=</span> <span class="n">dispatch_queue_get_specific</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">JPThreadsafetyQueueIDKey</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">uuidMine</span> <span class="o">==</span> <span class="n">uuidOther</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">block</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Swizzling]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/26/method-swizzling/"/>
    <updated>2016-08-26T09:43:31+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/26/method-swizzling</id>
    <content type="html"><![CDATA[<p>
在没有一个类的实现源码的情况下，想改变其中一个方法的实现，除了继承它重写、和借助类别重名方法暴力抢先之外，还有更加灵活的方法吗？在Objective-C编程中，如何实现hook呢？标题有点大，计划分几篇来总结。

本文主要介绍针对selector的hook，主角被标题剧透了———— Method Swizzling
</p>
<h2>Method Swizzling 原理</h2>
<p>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是selector的名字。利用Objective-C的动态特性，可以实现在运行时偷换selector对应的方法实现，达到给方法挂钩的目的。</p>
<p>每个类都有一个方法列表，存放着selector的名字和方法实现的映射关系。IMP有点类似函数指针，指向具体的Method实现。</p>
<p><img src="http://ww3.sinaimg.cn/large/626e5d69gw1f76wrdzvssj214y0dcmxy.jpg" /></p>
<p>
我们可以利用 method_exchangeImplementations 来交换2个方法中的IMP，

我们可以利用 class_replaceMethod 来修改类，

我们可以利用 method_setImplementation 来直接设置某个方法的IMP，
……
归根结底，都是偷换了selector的IMP，如下图所示：
</p>
<p><img src="http://ww2.sinaimg.cn/large/626e5d69gw1f76wshrop2j20kf09mt95.jpg" /></p>
<h2>Method Swizzling 实践</h2>
<p>

举个例子好了，我想钩一下NSArray的lastObject 方法，只需两个步骤。
第一步：给NSArray加一个我自己的lastObject
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;NSArray+Swizzle.h&quot;  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSArray</span> <span class="nl">(Swizzle)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">myLastObject</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">id</span> <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">myLastObject</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;**********  myLastObject *********** &quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
乍一看，这不递归了么？别忘记这是我们准备调换IMP的selector，[self myLastObject] 将会执行真的 [self lastObject] 。
</p>
<p>
第二步：调换IMP
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;objc/runtime.h&gt;  </span>
</span><span class="line"><span class="cp">#import &quot;NSArray+Swizzle.h&quot;  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">        <span class="n">Method</span> <span class="n">ori_Method</span> <span class="o">=</span>  <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">lastObject</span><span class="p">));</span>
</span><span class="line">        <span class="n">Method</span> <span class="n">my_Method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">myLastObject</span><span class="p">));</span>
</span><span class="line">        <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">ori_Method</span><span class="p">,</span> <span class="n">my_Method</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;0&quot;</span><span class="p">,</span><span class="s">@&quot;1&quot;</span><span class="p">,</span><span class="s">@&quot;2&quot;</span><span class="p">,</span><span class="s">@&quot;3&quot;</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSString</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;TEST RESULT : %@&quot;</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<!-- more -->
<p>
控制台输出Log：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="mi">2013</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">18</span> <span class="mi">16</span><span class="o">:</span><span class="mi">26</span><span class="o">:</span><span class="mf">12.585</span> <span class="n">Hook</span><span class="p">[</span><span class="mi">1740</span><span class="o">:</span><span class="n">c07</span><span class="p">]</span> <span class="o">**********</span>  <span class="n">myLastObject</span> <span class="o">***********</span>
</span><span class="line"><span class="mi">2013</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">18</span> <span class="mi">16</span><span class="o">:</span><span class="mi">26</span><span class="o">:</span><span class="mf">12.589</span> <span class="n">Hook</span><span class="p">[</span><span class="mi">1740</span><span class="o">:</span><span class="n">c07</span><span class="p">]</span> <span class="n">TEST</span> <span class="n">RESULT</span> <span class="o">:</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
结果很让人欣喜，是不是忍不住想给UIWebView的loadRequest: 加 TODO 了呢？
</p>
<h2>Method Swizzling 的封装</h2>
<p>之前在github上找到的RNSwizzle，推荐给大家，可以搜一下。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//  </span>
</span><span class="line"><span class="c1">//  RNSwizzle.m  </span>
</span><span class="line"><span class="c1">//  MethodSwizzle  </span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cp">#import &quot;RNSwizzle.h&quot;  </span>
</span><span class="line"><span class="cp">#import &lt;objc/runtime.h&gt;  </span>
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(RNSwizzle)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nf">swizzleSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">origSelector</span>
</span><span class="line">               <span class="nf">withIMP:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nv">newIMP</span> <span class="p">{</span>
</span><span class="line">  <span class="n">Class</span> <span class="n">class</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">class</span><span class="p">];</span>
</span><span class="line">  <span class="n">Method</span> <span class="n">origMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span>
</span><span class="line">                                              <span class="n">origSelector</span><span class="p">);</span>
</span><span class="line">  <span class="n">IMP</span> <span class="n">origIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">origMethod</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">class_addMethod</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">origSelector</span><span class="p">,</span> <span class="n">newIMP</span><span class="p">,</span>
</span><span class="line">                      <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">origMethod</span><span class="p">)))</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">origMethod</span><span class="p">,</span> <span class="n">newIMP</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">origIMP</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<h2>Method Swizzling 危险不危险</h2>
<p>
针对这个问题，我在<a href="http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c">stackoverflow</a>上看到了满意的答案，这里翻译一下，总结记录在本文中，以示分享：


使用 Method Swizzling 编程就好比切菜时使用锋利的刀，一些人因为担心切到自己所以害怕锋利的刀具，可是事实上，使用钝刀往往更容易出事，而利刀更为安全。
Method swizzling 可以帮助我们写出更好的，更高效的，易维护的代码。但是如果滥用它，也将会导致难以排查的bug。
</p>
<h3>背景</h3>
<p>
好比设计模式，如果我们摸清了一个模式的门道，使用该模式与否我们自己心里有数。单例模式就是一个很好的例子，它饱受争议但是许多人依旧使用它。Method Swizzling也是一样，一旦你真正理解它的优势和弊端，使用它与否你应该就有你自己的观点。
</p>
<h3>讨论</h3>
<p>
这里是一些 Method Swizzling的陷阱：
Method swizzling is not atomic
Changes behavior of un-owned code
Possible naming conflicts
Swizzling changes the method arguments
The order of swizzles matters
Difficult to understand (looks recursive)
Difficult to debug
</p>
<p>我将逐一分析这些点，增进对Method Swizzling的理解的同时，并搞懂如何应对。</p>
<h4>Method swizzling is not atomic</h4>
<p>
我所见过的使用method swizzling实现的方法在并发使用时基本都是安全的。95%的情况里这都不会是个问题。通常你替换一个方法的实现，是希望它在整个程序的生命周期里有效的。也就是说，你会把 method swizzling 修改方法实现的操作放在一个加号方法 +(void)load里，并在应用程序的一开始就调用执行。你将不会碰到并发问题。假如你在 +(void)initialize初始化方法中进行swizzle，那么……rumtime可能死于一个诡异的状态。
</p>
<h4>Changes behavior of un-owned code</h4>
<p>
这是swizzling的一个问题。我们的目标是改变某些代码。swizzling方法是一件灰常灰常重要的事，当你不只是对一个NSButton类的实例进行了修改，而是程序中所有的NSButton实例。因此在swizzling时应该多加小心，但也不用总是去刻意避免。
</p>
<p>
想象一下，如果你重写了一个类的方法，而且没有调用父类的这个方法，这可能会引起问题。大多数情况下，父类方法期望会被调用（至少文档是这样说的）。如果你在swizzling实现中也这样做了，这会避免大部分问题。还是调用原始实现吧，如若不然，你会费很大力气去考虑代码的安全问题。
</p>
<h4>Possible naming conflicts</h4>
<p>
命名冲突贯穿整个Cocoa的问题. 我们常常在类名和类别方法名前加上前缀。不幸的是，命名冲突仍是个折磨。但是swizzling其实也不必过多考虑这个问题。我们只需要在原始方法命名前做小小的改动来命名就好，比如通常我们这样命名：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">NSView</span> : <span class="nc">NSObject</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSView</span> <span class="nl">(MyViewAdditions)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">my_setFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// do custom work  </span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">my_setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_setFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>
这段代码运行正确，但是如果my_setFrame: 在别处被定义了会发生什么呢？

</p>
<p>
这个问题不仅仅存在于swizzling，这里有一个替代的变通方法：

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">NSView</span> <span class="nl">(MyViewAdditions)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">MySetFrame</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">SetFrameIMP</span><span class="p">)(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="nf">MySetFrame</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">NSRect</span> <span class="n">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// do custom work  </span>
</span><span class="line">    <span class="n">SetFrameIMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="n">MySetFrame</span> <span class="nl">store:</span><span class="p">(</span><span class="n">IMP</span><span class="o">*</span> <span class="p">)</span><span class="o">&amp;</span><span class="n">SetFrameIMP</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
看起来不那么Objectice-C了（用了函数指针），这样避免了selector的命名冲突。

最后给出一个较完美的swizzle方法的定义：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">typedef</span> <span class="n">IMP</span> <span class="o">*</span><span class="n">IMPPointer</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">BOOL</span> <span class="nf">class_swizzleMethodAndStore</span><span class="p">(</span><span class="n">Class</span> <span class="n">class</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">original</span><span class="p">,</span> <span class="n">IMP</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">IMPPointer</span> <span class="n">store</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">IMP</span> <span class="n">imp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">original</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">type</span> <span class="o">=</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">method</span><span class="p">);</span>
</span><span class="line">        <span class="n">imp</span> <span class="o">=</span> <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">original</span><span class="p">,</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">imp</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">imp</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">method</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">imp</span> <span class="o">&amp;&amp;</span> <span class="n">store</span><span class="p">)</span> <span class="p">{</span> <span class="o">*</span> <span class="n">store</span> <span class="o">=</span> <span class="n">imp</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">imp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(FRRuntimeAdditions)</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">swizzle:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">original</span> <span class="nf">with:</span><span class="p">(</span><span class="n">IMP</span><span class="p">)</span><span class="nv">replacement</span> <span class="nf">store:</span><span class="p">(</span><span class="n">IMPPointer</span><span class="p">)</span><span class="nv">store</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">class_swizzleMethodAndStore</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">original</span><span class="p">,</span> <span class="n">replacement</span><span class="p">,</span> <span class="n">store</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>Swizzling changes the method&#8217;s arguments</h4>
<p>
我认为这是最大的问题。想正常调用method swizzling 将会是个问题。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">self</span> <span class="nl">my_setFrame:</span><span class="n">frame</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
直接调用my_setFrame: ， runtime做的是
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">my_setFrame:</span><span class="p">),</span> <span class="n">frame</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
runtime去寻找my_setFrame:的方法实现, _ cmd参数为 my_setFrame: ，但是事实上runtime找到的方法实现是原始的 setFrame: 的。
一个简单的解决办法：使用上面介绍的swizzling定义。
</p>
<h4>The order of swizzles matters</h4>
<p>
多个swizzle方法的执行顺序也需要注意。假设 setFrame: 只定义在NSView中，想像一下按照下面的顺序执行：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSButton</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_buttonSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSControl</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_controlSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSView</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_viewSetFrame:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
What happens when the method on NSButton is swizzled? Well most swizzling will ensure that it&#8217;s not replacing the implementation of setFrame: for all views, so it will pull up the instance method. This will use the existing implementation to re-define setFrame: in the NSButton class so that exchanging implementations doesn&#8217;t affect all views. The existing implementation is the one defined on NSView. The same thing will happen when swizzling on NSControl (again using the NSView implementation).

When you call setFrame: on a button, it will therefore call your swizzled method, and then jump straight to the setFrame: method originally defined on NSView. The NSControl and NSView swizzled implementations will not be called.

But what if the order were:
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSView</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_viewSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSControl</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_controlSetFrame:</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">NSButton</span> <span class="nl">swizzle:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setFrame:</span><span class="p">)</span> <span class="nl">with:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">my_buttonSetFrame:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Since the view swizzling takes place first, the control swizzling will be able to pull up the right method. Likewise, since the control swizzling was before the button swizzling, the button will pull up the control&#8217;s swizzled implementation of setFrame:. This is a bit confusing, but this is the correct order. How can we ensure this order of things?

Again, just use load to swizzle things. If you swizzle in load and you only make changes to the class being loaded, you&#8217;ll be safe. The load method guarantees that the super class load method will be called before any subclasses. We&#8217;ll get the exact right order!
这段贴了原文，硬翻译太拗口……总结一下就是：多个有继承关系的类的对象swizzle时，先从父对象开始。 这样才能保证子类方法拿到父类中的被swizzle的实现。在+(void)load中swizzle不会出错，就是因为load类方法会默认从父类开始调用。
</p>
<h4>Difficult to understand (looks recursive)</h4>
<p>
（新方法的实现）看起来像递归，但是看看上面已经给出的 swizzling 封装方法, 使用起来就很易读懂.
这个问题是已完全解决的了！
</p>
<h4>Difficult to debug</h4>
<p>
debug时打出的backtrace，其中掺杂着被swizzle的方法名，一团糟啊！上面介绍的swizzle方案，使backtrace中打印出的方法名还是很清晰的。但仍然很难去debug，因为很难记住swizzling影响过什么。给你的代码写好文档（即使只有你一个人会看到）。养成一个好习惯，不会比调试多线程问题还难的。
</p>
<h2>结论</h2>
<p>
如果使用恰当，Method swizzling 还是很安全的.一个简单安全的方法是，仅在load中swizzle。 和许多其他东西一样，它也是有危险性的，但理解它了也就可以正确恰当的使用它了。
</p>

<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏感逻辑的保护方案]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/min-gan-luo-ji-de-bao-hu-fang-an/"/>
    <updated>2016-08-25T15:13:53+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/min-gan-luo-ji-de-bao-hu-fang-an</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">24</span> <span class="title">敏感逻辑的保护方案</span></h1>
    <p>Objective-C 代码容易被 hook，暴露信息太赤裸裸，为了安全，改用 C 来写吧！</p>

<div class="figure" id="figure-24-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760k4kot8j205p04gdfu.jpg" />

    <p class="caption"><strong>图片 24.1</strong> sensitive1</p>
</div>


<p>当然不是全部代码都要 C 来写，我指的是敏感业务逻辑代码。</p>

<p>本文就介绍一种低学习成本的，简易的，Objective-C 逻辑代码重写为 C 代码的办法。</p>

<p>也许，程序中存在一个类似这样的类：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">XXUtil</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isVerified</span><span class="p">;</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isNeedSomething</span><span class="p">;</span>
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">resetPassword:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">password</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>被 class-dump 出来后，利用 Cycript 很容易实现攻击，容易被 hook ，存在很大的安全隐患。</p>

<div class="figure" id="figure-24-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760knfbzhj20350360sm.jpg" />

    <p class="caption"><strong>图片 24.2</strong> sensitive2</p>
</div>


<p>想改，但是不想大改程序结构，肿么办呢？</p>

<p>把函数名隐藏在结构体里，以函数指针成员的形式存储。
这样做的好处是，编译后，只留了下地址，去掉了名字和参数表，提高了逆向成本和攻击门槛。</p>

<p>改写的程序如下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//XXUtil.h  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_util</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isVerified</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">    <span class="kt">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">isNeedSomething</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">resetPassword</span><span class="p">)(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span><span class="n">XXUtil_t</span> <span class="p">;</span>
</span><span class="line">
</span><span class="line"> <span class="err">#</span><span class="n">define</span> <span class="n">XXUtil</span> <span class="p">([</span><span class="n">_XXUtil</span> <span class="n">sharedUtil</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="nc">_XXUtil</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">//XXUtil.m  </span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;XXUtil.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isVerified</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">_isNeedSomething</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">_resetPassword</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//bala bala ...  </span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="n">XXUtil_t</span> <span class="o">*</span> <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="k">@implementation</span> <span class="nc">_XXUtil</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span><span class="p">(</span><span class="n">XXUtil_t</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedUtil</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class="line">    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">util</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">XXUtil_t</span><span class="p">));</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isVerified</span> <span class="o">=</span> <span class="n">_isVerified</span><span class="p">;</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">isNeedSomething</span> <span class="o">=</span> <span class="n">_isNeedSomething</span><span class="p">;</span>
</span><span class="line">        <span class="n">util</span><span class="o">-&gt;</span><span class="n">resetPassword</span> <span class="o">=</span> <span class="n">_resetPassword</span><span class="p">;</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="k">return</span> <span class="n">util</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">destroy</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">util</span> <span class="o">?</span> <span class="n">free</span><span class="p">(</span><span class="n">util</span><span class="p">)</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">util</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，根据 Xcode 的报错指引，把以前这样的调用
<code>[XXUtil isVerified];</code></p>

<p>对应改成：
<code>XXUtil-&gt;isVerified();</code></p>

<p>就可以了。</p>

<p>是的，绝不费一点脑子。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 代码混淆]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/objective-c-dai-ma-hun-yao/"/>
    <updated>2016-08-25T15:09:37+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/objective-c-dai-ma-hun-yao</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">23</span> <span class="title">Objective-C 代码混淆</span></h1>
    <p>class-dump 可以很方便的导出程序头文件，不仅让攻击者了解了程序结构方便逆向，还让着急赶进度时写出的欠完善的程序给同行留下笑柄。
所以，我们迫切的希望混淆自己的代码。</p>

<h3>混淆的常规思路</h3>

<p>混淆分许多思路，比如：</p>

<p>1）花代码花指令，即随意往程序中加入迷惑人的代码指令</p>

<p>2）易读字符替换 等等</p>

<div class="figure" id="figure-23-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f760g4dzitj202o031dfp.jpg" />

    <p class="caption"><strong>图片 23.1</strong> confusion1</p>
</div>


<p>防止 class-dump 出可读信息的有效办法是易读字符替换。</p>

<h3>Objective-C 的方法名混淆</h3>

<h4>混淆的时机</h4>

<p>我们希望在开发时一直保留清晰可读的程序代码，方便自己。
同时，希望编译出来的二进制包含乱七八糟的混淆后的程序代码，恶心他人。</p>

<p>因此，我们可以在 Build Phrase 中设定在编译之前进行方法名的字符串替换。</p>

<h4>混淆的方法</h4>

<p>方法名混淆其实就是字符串替换，有 2 个方法可以，一个是 <code>#define</code>，一个是利用 tops。</p>

<p>利用 <code>#define</code> 的方法有一个好处，就是可以把混淆结果合并在一个 .h 中，在工程 Prefix.pch 的最前面 <code>#import</code> 这个 .h 。不导入也可以编译、导入则实现混淆。</p>

<p>单段的 selector ，如 <code>func:</code> ，可以通过 <code>#define func</code> 来实现字符串替换。</p>

<p>多段的 selector，如 <code>a:b:c:</code> ，可以通过分别 <code>#define a 、b、c</code> 来实现字符串替换。</p>

<h3>我的混淆工具</h3>

<p>我写了个简易的混淆脚本，主要思路是把敏感方法名集中写在一个名叫 func.list 的文件中，逐一 <code>#define</code> 成随机字符，追加写入 .h 。</p>

<p>脚本如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/usr/bin/env bash  
</span><span class="line">
</span><span class="line">TABLENAME=symbols  
</span><span class="line">SYMBOL_DB_FILE="symbols"  
</span><span class="line">STRING_SYMBOL_FILE="func.list"  
</span><span class="line">HEAD_FILE="$PROJECT_DIR/$PROJECT_NAME/codeObfuscation.h"  
</span><span class="line">export LC_CTYPE=C  
</span><span class="line">
</span><span class="line">#维护数据库方便日后作排重  
</span><span class="line">createTable()  
</span><span class="line">{  
</span><span class="line">   echo "create table $TABLENAME(src text, des text);" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">insertValue()  
</span><span class="line">{  
</span><span class="line">   echo "insert into $TABLENAME values('$1' ,'$2');" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">query()  
</span><span class="line">{  
</span><span class="line">   echo "select * from $TABLENAME where src='$1';" | sqlite3 $SYMBOL_DB_FILE  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">ramdomString()  
</span><span class="line">{  
</span><span class="line">   openssl rand -base64 64 | tr -cd 'a-zA-Z' |head -c 16  
</span><span class="line">}  
</span><span class="line">
</span><span class="line">rm -f $SYMBOL_DB_FILE  
</span><span class="line">rm -f $HEAD_FILE  
</span><span class="line">createTable  
</span><span class="line">
</span><span class="line">touch $HEAD_FILE  
</span><span class="line">echo '#ifndef Demo_codeObfuscation_h  
</span><span class="line">#define Demo_codeObfuscation_h' &gt;&gt; $HEAD_FILE  
</span><span class="line">echo "//confuse string at `date`" &gt;&gt; $HEAD_FILE  
</span><span class="line">cat "$STRING_SYMBOL_FILE" | while read -ra line; do  
</span><span class="line">   if [[ ! -z "$line" ]]; then  
</span><span class="line">       ramdom=`ramdomString`  
</span><span class="line">       echo $line $ramdom  
</span><span class="line">       insertValue $line $ramdom  
</span><span class="line">       echo "#define $line $ramdom" &gt;&gt; $HEAD_FILE  
</span><span class="line">   fi  
</span><span class="line">done  
</span><span class="line">echo "#endif" &gt;&gt; $HEAD_FILE  
</span><span class="line">
</span><span class="line">
</span><span class="line">sqlite3 $SYMBOL_DB_FILE .dump</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>操作步骤</h4>

<p>1.将混淆脚本 confuse.sh 放到工程目录下
<code>mv confuse.sh your_proj_path/</code></p>

<p>2.修改 Prefix.pch</p>

<p>打开 Xcode，修改 XXX-Prefix.ch ，添加混淆头文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#ifdef __OBJC__  </span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">   <span class="c1">//添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  </span>
</span><span class="line">   <span class="err">#</span><span class="n">import</span> <span class="s">&quot;codeObfuscation.h&quot;</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.配置 Build Phase</p>

<p>在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：</p>

<div class="figure" id="figure-23-2">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f760gkuq1ej20z80eqjtx.jpg" />

    <p class="caption"><strong>图片 23.2</strong> confusion3</p>
</div>


<p>4.创建函数名列表 func.list ，写入待混淆的函数名，如:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sample</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">seg1:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span> <span class="nf">seg2:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">num</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就这样写：</p>

<p>sample<br />
seg1<br />
seg2</p>

<p>并将文件放置于与 confuse.sh 脚本同级<br />
<code>mv func.list your_proj_path/</code></p>

<p>5.编译查看结果</p>

<p>直接 build，混淆脚本会在编译前运行，进行字符随机替换，并且每次 build 的随机字符不同，如图：</p>

<div class="figure" id="figure-23-3">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760hdde9nj20w40ecwjs.jpg" />

    <p class="caption"><strong>图片 23.3</strong> confusion4</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[static 和被裁的符号表]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/static-he-bei-cai-de-fu-hao-biao/"/>
    <updated>2016-08-25T15:07:51+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/static-he-bei-cai-de-fu-hao-biao</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">22</span> <span class="title">static 和被裁的符号表</span></h1>
    <p>为了不让攻击者理清自己程序的敏感业务逻辑，于是我们想方设法提高逆向门槛。</p>

<p>本文就介绍一个防御技巧——利用 static 关键字裁掉函数符号。</p>

<h3>原理</h3>

<p>如果函数属性为 static ，那么编译时该函数符号就会被解析为 local 符号。</p>

<p>在发布 release 程序时（用 Xcode 打包编译二进制）默认会 strip 裁掉这些函数符号，无疑给逆向者加大了工作难度。</p>

<h3>验证</h3>

<p>写个 demo 验证一下上述理论，以一段创建 Button 的代码为例，对应补充一个 static 版本。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">id</span> <span class="nf">createBtn</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIButton</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]];</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">btn</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">id</span> <span class="nf">static_createBtn</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIButton</span> <span class="o">*</span><span class="n">btn</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIButton</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class="line">    <span class="p">[</span><span class="n">btn</span> <span class="nl">setBackgroundColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]];</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mf">7.0f</span><span class="p">;</span>
</span><span class="line">    <span class="n">btn</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">btn</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再来看一下反编的结果，对于 createBtn() 方法，我们可以得到它的伪代码：</p>

<div class="figure" id="figure-22-1">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760d9iqmfj20ns10aakb.jpg" />

    <p class="caption"><strong>图片 22.1</strong> static</p>
</div>


<p>函数名虽然面目全非，但是基本操作还是清晰的。</p>

<p>对于<code>static_createBtn() </code>方法呢，我们已经无法看到它任何直观的有价值信息了。</p>

<h3>局限</h3>

<p>当然这种方法也有局限性。正如你所知道的，<code>static </code>函数，只在本文件可见。</p>

<h3>打破局限</h3>

<p>怎么让别的文件也能调到本文件的<code> static </code>方法呢？</p>

<p>在本文件建造一个结构体，结构体里包含函数指针。把<code> static </code>函数的函数指针都赋在这个结构体里，再把这个结构体抛出去。</p>

<p>这样做的好处是，既隐藏了函数代码也丰富了调用方式。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[废除应用程序的 ASLR特性]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fei-chu-ying-yong-cheng-xu-de-aslrte-xing/"/>
    <updated>2016-08-25T15:02:16+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fei-chu-ying-yong-cheng-xu-de-aslrte-xing</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">21</span> <span class="title">废除应用程序的 ASLR 特性</span></h1>
    <p>ASLR (Address Space Layout Randomization)，即地址空间随机布局。大部分主流的操作系统都已实现了 ASLR，以防范对已知地址进行恶意攻击。iOS 从 4.3 开始支持 ASLR，Android 从 4.0 也支持了 ASLR 机制。</p>

<p>ASLR 的存在，给 iOS 系统越狱造成了很大的困难，某些不完美越狱方案就是因为攻破不了或者绕不开 ASLR ，所以每次重新启动后地址再度随机偏移，需要重新进行越狱操作。与此同时，ASLR 也给应用层攻击带来了一些困难，不同进程会造成不同的地址空间偏移，而且在运行时才可确定其偏移量，不易锁定攻击地址。</p>

<p><code>Mach-O </code>文件的文件头会记录二进制的属性标识，有个 flag 叫做 PIE  (Position Independent Enable)。开启了 PIE 的二进制文件，在执行时会产生 ASLR 。</p>

<p>我们可以使用<code> otool </code>工具，来查看任意应用程序二进制文件的属性，以支付宝为例：<br />
<code>otool -hv Portal</code></p>

<div class="figure" id="figure-21-1">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f7607zmgrxj216a032ju4.jpg" />

    <p class="caption"><strong>图片 21.1</strong> aslr</p>
</div>


<p>有 PIE 标识，表示该程序在启动时会产生随机地址布局。</p>

<div class="figure" id="figure-21-2">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7608woa04j202m02s3yc.jpg" />

    <p class="caption"><strong>图片 21.2</strong> aslr1</p>
</div>
<a href="https://github.com/peterfillmore/removePIE">removePIE</a> 是个去掉 PIE flag 的工具。

<p>坏消息是，年久失修，它不支持 iOS7 。
好消息是，我们还有 2 个变通方法可以走。<br />
    - 利用<code> Theos </code>编译 removePIE<br />
    - 改编一个 Mac 版的 MyRemovePIE</p>

<p>非越狱开发者可能不熟悉 Theos ，低学习成本的做法是第二种，那么让我们来改编一个 Mac 版的 MyRemovePIE 吧。
（懒得动手的可以直接到<a href="https://github.com/CarinaTT/MyRemovePIE">这里</a>下载 demo ）</p>

<p>创建一个 Command Line Tool 工程，</p>

<div class="figure" id="figure-21-3">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7609flo73j214k0rgqac.jpg" />

    <p class="caption"><strong>图片 21.3</strong> aslr2</p>
</div>


<p>然后复制 <a href="https://github.com/peterfillmore/removePIE/blob/master/removePIE.c">removePIE.c</a>  代码到 <code>main.c</code> 中，并且修改第 43 行：
    <code>if(currentHeader.magic == MH_MAGIC){ //little endian</code></p>

<p>添加 iOS7 的判断条件:
    <code>if(currentHeader.magic == MH_MAGIC || currentHeader.magic == 0xbebafeca ){ //little endian</code></p>

<p>编译后生成可执行文件 MyRemovePIE .</p>

<p>利用我们编译生成的 MyRemovePIE 来处理应用程序：</p>

<p><code>./MyRemovePIE Portal</code></p>

<div class="figure" id="figure-21-4">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f76079jd97j20p409iad1.jpg" />

    <p class="caption"><strong>图片 21.4</strong> aslr3</p>
</div>


<p>这样以后支付宝 Portal 再被启动执行就不会具有 ASLR 特性了</p>

<div class="figure" id="figure-21-5">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7609ztn5kj215y04egnk.jpg" />

    <p class="caption"><strong>图片 21.5</strong> aslr4</p>
</div>


<p>如何验证一下结果呢？</p>

<p>把处理过的 Portal 二进制拷贝回 iPhone ，启动支付宝钱包应用，然后 gdb 该进程，利用<code> info sh </code>命令查看偏移：</p>

<div class="figure" id="figure-21-6">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f760anz667j21kw066gri.jpg" />

    <p class="caption"><strong>图片 21.6</strong> aslr5</p>
</div>


<p>偏移量为 0 ，嗯，这下就好了。一些手动处理的过程可以升级为自动了～ <div class="figure" id="figure-21-7">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f760b57h2fj202j02ka9v.jpg" />

    <p class="caption"><strong>图片 21.7</strong> aslr6</p>
</div>




<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[越狱检测的攻与防]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/yue-yu-jian-ce-de-gong-yu-fang/"/>
    <updated>2016-08-25T14:58:25+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/yue-yu-jian-ce-de-gong-yu-fang</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">20</span> <span class="title">越狱检测的攻与防</span></h1>
    <p>在应用开发过程中，我们希望知道设备是否越狱，正以什么权限运行程序，好对应采取一些防御和安全提示措施。</p>

<p>iOS7 相比之前版本的系统而言，升级了沙盒机制，封锁了几乎全部应用沙盒可以共享数据的入口。即使在越狱情况下，限制也非常多，大大增加了应用层攻击难度。比如，在 iOS7 之前，我们可以尝试往沙盒外写文件判断是否越狱，但 iOS7 越狱后也无该权限，还使用老方法检测会导致误判。</p>

<p>那么，到底应该如何检测越狱呢？攻击者又会如果攻破检测呢？本文就着重讨论一下越狱检测的攻与防。</p>

<div class="figure" id="figure-20-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f7603q16m8j203703i3yg.jpg" />

    <p class="caption"><strong>图片 20.1</strong> gongfang</p>
</div>


<p>首先，你可以尝试使用<code> NSFileManager </code>判断设备是否安装了如下越狱常用工具：</p>

<p>/Applications/Cydia.app
/Library/MobileSubstrate/MobileSubstrate.dylib
/bin/bash
/usr/sbin/sshd
/etc/apt</p>

<p>但是不要写成<code> BOOL </code>开关方法，给攻击者直接锁定目标<code> hook </code>绕过的机会</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isJailbroken</span><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath:</span><span class="s">@&quot;/Applications/Cydia.app&quot;</span><span class="p">]){</span>
</span><span class="line">        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// ...  </span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>攻击者可能会改变这些工具的安装路径，躲过你的判断。</p>

<p>那么，你可以尝试打开<code> cydia </code>应用注册的<code> URL scheme：</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span><span class="p">([[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">canOpenURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;cydia://package/com.example.package&quot;</span><span class="p">]]){</span>
</span><span class="line">     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是不是所有的工具都会注册<code> URL scheme</code>，而且攻击者可以修改任何应用的<code> URL scheme</code>。</p>

<p>那么，你可以尝试读取下应用列表，看看有无权限获取：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">([[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">fileExistsAtPath:</span><span class="s">@&quot;/User/Applications/&quot;</span><span class="p">]){</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSArray</span><span class="o">*</span> <span class="n">applist</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">contentsOfDirectoryAtPath:</span><span class="s">@&quot;/User/Applications/&quot;</span>
</span><span class="line">                                                                               <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;applist = %@&quot;</span><span class="p">,</span><span class="n">applist</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>越了狱的设备是可以获取到的：</p>

<div class="figure" id="figure-20-2">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f760484s75j20zc0cg7ce.jpg" />

    <p class="caption"><strong>图片 20.2</strong> gongfang2</p>
</div>


<p>攻击者可能会<code> hook NSFileManager </code>的方法，让你的想法不能如愿。</p>

<p>那么，你可以回避<code> NSFileManager</code>，使用 <code>stat </code>系列函数检测<code> Cydia </code>等工具：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;sys/stat.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkCydia</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">   <span class="k">struct</span> <span class="n">stat</span> <span class="n">stat_info</span><span class="p">;</span>
</span><span class="line">   <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">stat</span><span class="p">(</span><span class="s">&quot;/Applications/Cydia.app&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stat_info</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">       <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Device is jailbroken&quot;</span><span class="p">);</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>攻击者可能会利用 <a href="blog/2016/08/25/fish-hook/">Fishhook 原理</a> hook 了 stat 。</p>

<p>那么，你可以看看<code> stat </code>是不是出自系统库，有没有被攻击者换掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;dlfcn.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkInject</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ret</span> <span class="p">;</span>
</span><span class="line">    <span class="n">Dl_info</span> <span class="n">dylib_info</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span> <span class="n">func_stat</span><span class="p">)(</span><span class="k">const</span> <span class="n">charchar</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span><span class="o">*</span> <span class="p">)</span> <span class="o">=</span> <span class="n">stat</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">dladdr</span><span class="p">(</span><span class="n">func_stat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dylib_info</span><span class="p">)))</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;lib :%s&quot;</span><span class="p">,</span> <span class="n">dylib_info</span><span class="p">.</span><span class="n">dli_fname</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果结果不是 <code>/usr/lib/system/libsystem_kernel.dylib</code> 的话，那就 <code>100%</code> 被攻击了。
如果 <code>libsystem_kernel.dylib</code> 都是被攻击者替换掉的……
那也没什么可防的大哥你随便吧……</p>

<p>那么，你可能会想，我该检索一下自己的应用程序是否被链接了异常动态库。
列出所有已链接的动态库：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;mach-o/dyld.h&gt;  </span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">checkDylibs</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">count</span> <span class="o">=</span> <span class="n">_dyld_image_count</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithUTF8String:</span><span class="n">_dyld_get_image_name</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;--%@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通常情况下，会包含越狱机的输出结果会包含字符串：<code>Library/MobileSubstrate/MobileSubstrate.dylib</code> 。</p>

<p>攻击者可能会给<code> MobileSubstrate </code>改名，但是原理都是通过 <code>DYLD_INSERT_LIBRARIES</code>注入动态库。</p>

<p>那么，你可以通过检测当前程序运行的环境变量：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">void</span> <span class="nf">printEnv</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">char</span><span class="o">*</span> <span class="n">env</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;DYLD_INSERT_LIBRARIES&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">env</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>未越狱设备返回结果是<code> null </code>，越狱设备就各有各的精彩了，尤其是老一点的 iOS 版本越狱环境。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于脚本实现动态库注入]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ji-yu-jiao-ben-shi-xian-dong-tai-ku-zhu-ru/"/>
    <updated>2016-08-25T14:51:36+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/ji-yu-jiao-ben-shi-xian-dong-tai-ku-zhu-ru</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">19</span> <span class="title">基于脚本实现动态库注入</span></h1>
    <p><code>MobileSubstrate </code>可以帮助我们加载自己的动态库，于是开发者们谨慎的采取了对<code> MobileSubstrate </code>的检索和防御措施。</p>

<p>那么，除了依靠<code> MobileSubstrate </code>帮忙注入<code> dylib </code>，还有别的攻击入口吗？</p>

<div class="figure" id="figure-19-1">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zxwgbjpj202m02vwec.jpg" />

    <p class="caption"><strong>图片 19.1</strong> sript-injection1</p>
</div>


<p>理理思路，条件、目的很明确：</p>

<p>1）必须在应用程序启动之前，把<code> dylib </code>的环境变量配置好<br />
2）<code>dylib </code>的位置必须能被应用程序放问到<br />
3）最后再启动应用程序</p>

<div class="figure" id="figure-19-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69gw1f75zyl6cmbj203i02ygli.jpg" />

    <p class="caption"><strong>图片 19.2</strong> sript-injection2</p>
</div>


<p>啊哈，原汁原味，走 <code>bash</code>！</p>

<p>在点击应用程序图标&#8211;&gt;程序启动这个过程中，在我们看来程序是被动执行的。为了让特定功能的脚本被执行，我们可以把脚本改成应用程序二进制的名字伪装成应用程序，让系统调用启动。在脚本中，配置好<code> dylib </code>，然后再手动启动真的应用程序，假装什么也没发生，挥一挥衣袖不带走一片云彩～
将真的支付宝程序改名为 oriPortal ：</p>

<p><code>mv Portal oriPortal</code></p>

<p>将待执行的脚本改名为支付宝：</p>

<p><code>mv Portal.sh Portal</code></p>

<p>脚本代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash  
</span><span class="line">
</span><span class="line"> #得到第一个参数  
</span><span class="line">C=$0  
</span><span class="line">
</span><span class="line"> #第一个参数是二进制的绝对路径 比如 :  
</span><span class="line"> #/private/var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Portal.app/  
</span><span class="line"> #截取最后一个 / 之前的内容  
</span><span class="line">C=${C%/*}  
</span><span class="line">
</span><span class="line"> #库和二进制放在一起  
</span><span class="line">export DYLD_INSERT_LIBRARIES=${C:-.}/wq.dylib  
</span><span class="line"> #执行原来APP $@ 别忘了把原来的参数保留  
</span><span class="line">exec "${C:-.}"/oriPortal "$@"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果不尽人意，失败了……<div class="figure" id="figure-19-3">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75zzekq0ij2050035wef.jpg" />

    <p class="caption"><strong>图片 19.3</strong> sript-injection3</p>
</div>


<p>错误信息如下：
<div class="figure" id="figure-19-4">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zzvk0ybj21kw073ajf.jpg" />

    <p class="caption"><strong>图片 19.4</strong> sript-injection6</p>
</div>


<p>在打开某个加密信息时出了错误，大概猜一下应该是类似加密签名校验的步骤，但是我们无法去了解其中详细的操作到底是什么样的，没关系，那么就把原始的可执行文件环境全部给他造出来，因为检验文件属性肯定不会带着路径信息的。</p>

<p>备份一份<code> Portal.app </code>目录<code> Portal_ori.app </code>，修改脚本为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#!/bin/bash  
</span><span class="line">C=$0  
</span><span class="line">C=${C%/*}  
</span><span class="line">export DYLD_INSERT_LIBRARIES=${C:-.}/wq.dylib  
</span><span class="line">exec "${C:-.}"/../Portal_ori.app/Portal "$@"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行支付宝<code> app </code>验证一下，
好消息是，在<code> iOS6 </code>上，成功加载了动态库<code> wq.dylib </code>
坏消息是，在<code> iOS7 </code>上，失败了</p>

<p>错误信息如下：
<div class="figure" id="figure-19-5">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7600otenxj21kw096wsw.jpg" />

    <p class="caption"><strong>图片 19.5</strong> sript-injection7</p>
</div>


<p>应该是因为<code> iOS7 </code>的沙盒机制升了级，把我们这套小把戏拦在门外了……<br />
<div class="figure" id="figure-19-6">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f7601b60kfj207304d74a.jpg" />

    <p class="caption"><strong>图片 19.6</strong> sript-injection8</p>
</div>


<p>那又怎么样，面包总会有的～</p>



<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</p></p></p></p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据保护 API]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-bao-hu-api/"/>
    <updated>2016-08-25T14:48:07+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-bao-hu-api</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">18</span> <span class="title">数据保护 API</span></h1>
    <h3>题外话</h3>

<p>开篇先扯几句题外话，许多朋友都问我怎么不写防啊，我确实有点犹豫。
hackers 总是想象如果自己是开发者会怎么写，然后才能找到入手点。同理，开发者们也要想象自己是 hackers 会怎么做，才能采取相应的防御措施。然后，就是一场递归的博弈。</p>

<p>拿越狱检测这件事来说，起初大家只需判断有无安装<code> Cydia </code>就好了，hackers 们说好，那我就不安装<code> Cydia </code>也可以动手脚。开发者们又说，那你一定得用的上<code> MobileSubstrate </code>，<code>bash </code>，<code>ssh </code>吧，我去检测手机有没有安装这些工具。可是又有什么用呢？你判断什么我绕过去什么。</p>

<p>当<code> class-dump </code>大肆流行，函数符号都被暴露，开发者想尽办法藏起自己的敏感函数代码。hackers 们也知道<code> class-dump </code>的死穴在哪里，于是新的检索办法油然而生。也就说，当一个防御手段成为流行，它就不会再是个让 hackers 大骂“真特么费劲”的防御手段了。比如之前介绍的一个小技巧：<a href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shu-ju-ca-chu/">内存数据擦除</a> ，hackers 知道开发者都去擦数据了，那我<code> hook memset </code>在你擦之前去读就好了。开发者说：我直接写硬盘上然后删除！hackers 说：难道你没听说过文件恢复？</p>

<div class="figure" id="figure-18-1">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75ztnpoq2j202f031zk3.jpg" />

    <p class="caption"><strong>图片 18.1</strong> data-erase1</p>
</div>


<p>OK，贫的有点多了，本文介绍一下防御相关的话题—— iOS 的数据保护 API 。</p>

<h3>数据保护 API</h3>

<p>文件系统中的文件、<code>keychain </code>中的项，都是加密存储的。当用户解锁设备后，系统通过<code> UDID </code>密钥和用户设定的密码生成一个用于解密的密码密钥，存放在内存中，直到设备再次被锁，开发者可以通过<code> Data Protection API </code>来设定文件系统中的文件、<code>keychain</code> 中的项应该何时被解密。</p>

<h4>文件保护</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/* 为filePath文件设置保护等级 */</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">NSFileProtectionComplete</span>
</span><span class="line">                                                       <span class="nl">forKey:</span><span class="n">NSFileProtectionKey</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">setAttributes:</span><span class="n">attributes</span>
</span><span class="line">                                 <span class="nl">ofItemAtPath:</span><span class="n">filePath</span>
</span><span class="line">                                        <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="c1">//文件保护等级属性列表  </span>
</span><span class="line"><span class="n">NSFileProtectionNone</span>                                    <span class="c1">//文件未受保护，随时可以访问 （Default）  </span>
</span><span class="line"><span class="n">NSFileProtectionComplete</span>                                <span class="c1">//文件受到保护，而且只有在设备未被锁定时才可访问  </span>
</span><span class="line"><span class="n">NSFileProtectionCompleteUntilFirstUserAuthentication</span>    <span class="c1">//文件收到保护，直到设备启动且用户第一次输入密码  </span>
</span><span class="line"><span class="n">NSFileProtectionCompleteUnlessOpen</span>                      <span class="c1">//文件受到保护，而且只有在设备未被锁定时才可打开，不过即便在设备被锁定时，已经打开的文件还是可以继续使用和写入</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>keychain 项保护</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/* 设置keychain项保护等级 */</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="err">@</span><span class="p">{(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecClass:</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecClassGenericPassword</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrGeneric:</span><span class="s">@&quot;MyItem&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrAccount:</span><span class="s">@&quot;username&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecValueData:</span><span class="s">@&quot;password&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrService:</span><span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">].</span><span class="n">bundleIdentifier</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrLabel:</span><span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrDescription:</span><span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class="line">                        <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="nl">kSecAttrAccessible:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">kSecAttrAccessibleWhenUnlocked</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">OSStatus</span> <span class="n">result</span> <span class="o">=</span> <span class="n">SecItemAdd</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)(</span><span class="n">query</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//keychain项保护等级列表  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleWhenUnlocked</span>                          <span class="c1">//keychain项受到保护，只有在设备未被锁定时才可以访问  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAfterFirstUnlock</span>                      <span class="c1">//keychain项受到保护，直到设备启动并且用户第一次输入密码  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAlways</span>                                <span class="c1">//keychain未受保护，任何时候都可以访问 （Default）  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleWhenUnlockedThisDeviceOnly</span>            <span class="c1">//keychain项受到保护，只有在设备未被锁定时才可以访问，而且不可以转移到其他设备  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</span>        <span class="c1">//keychain项受到保护，直到设备启动并且用户第一次输入密码，而且不可以转移到其他设备  </span>
</span><span class="line"><span class="n">kSecAttrAccessibleAlwaysThisDeviceOnly</span>                  <span class="c1">//keychain未受保护，任何时候都可以访问，但是不能转移到其他设备</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>应用实例</h3>

<p>把一段信息<code> infoStrng </code>字符串写进文件，然后通过 Data Protection API 设置保护。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span><span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;DataProtect&quot;</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">infoString</span> <span class="nl">writeToFile:</span><span class="n">filePath</span>
</span><span class="line">             <span class="nl">atomically:</span><span class="n">YES</span>
</span><span class="line">               <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span>
</span><span class="line">                  <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">NSFileProtectionComplete</span>
</span><span class="line">                                                       <span class="nl">forKey:</span><span class="n">NSFileProtectionKey</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">setAttributes:</span><span class="n">attributes</span>
</span><span class="line">                                 <span class="nl">ofItemAtPath:</span><span class="n">filePath</span>
</span><span class="line">                                        <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>设备锁屏（带密码保护）后，即使是越狱机，在<code> root </code>权限下<code> cat </code>读取那个文件信息也会被拒绝。</p>

<div class="figure" id="figure-18-2">
    <img src="http://ww3.sinaimg.cn/large/626e5d69gw1f75zu9sgihj202q02xdfo.jpg" />

    <p class="caption"><strong>图片 18.2</strong> data-erase2</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fish Hook]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fish-hook/"/>
    <updated>2016-08-25T14:47:04+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/fish-hook</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">17</span> <span class="title">Fishhook</span></h1>
    <p>众所周知，<code>Objective-C </code>的首选<code> hook </code>方案为<code> Method Swizzle</code>，于是大家纷纷表示核心内容应该用 C 写。</p>

<p>接下来进阶说说 <code>iOS</code> 下 C 函数的<code> hook </code>方案，先介绍第一种方案&#8212; <a href="https://github.com/facebook/fishhook">fishhook</a> .</p>

<h3>什么是 fishhook</h3>

<p><code>fishhook </code>是 facebook 提供的一个动态修改链接<code> Mach-O </code>符号表的开源工具。</p>

<h3>什么是<code> Mach-O</code></h3>

<p><code>Mach-O </code>为 Mach Object 文件格式的缩写,也是用于 <code>iOS </code>可执行文件，目标代码，动态库，内核转储的文件格式。</p>

<p><code>Mach-O </code>有自己的<code> dylib </code>规范。</p>

<h3>fishhook 的原理</h3>

<p>详见官方的 How it works，这里我作个简要说明。</p>

<p><code>dyld </code>链接 2 种符号，<code>lazy </code>和<code> non-lazy </code>，fishhook 可以重新链接/替换本地符号。</p>

<div class="figure" id="figure-17-1">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zprz6wrj20jo0pcgo0.jpg" />

    <p class="caption"><strong>图片 17.1</strong> fishhook1</p>
</div>


<p>如图所示，<code>__DATA</code>区有两个 section 和动态符号链接相关：<code>__nl_symbol_ptr</code>、<code>__la_symbol_ptr</code>。<code>__nl_symbol_ptr</code> 为一个指针数组，直接对应<code> non-lazy </code>绑定数据。<code>__la_symbol_ptr</code> 也是一个指针数组，通过<code>dyld_stub_binder</code> 辅助链接。<code>&lt;mach-o/loader.h&gt;</code>的 section 头提供符号表的偏移量。</p>

<p>图示中，1061 是间接符号表的偏移量，*（偏移量+间接符号地址）=16343，即符号表偏移量。符号表中每一个结构都是一个<code> nlist </code>结构体，其中包含字符表偏移量。通过字符表偏移量最终确定函数指针。</p>

<p>fishhook 就是对间接符号表的偏移量动的手脚，提供一个假的<code> nlist </code>结构体，从而达到 hook 的目的。</p>

<p>fishhook 替换符号函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">int</span> <span class="nf">rebind_symbols</span><span class="p">(</span><span class="k">struct</span> <span class="n">rebinding</span> <span class="n">rebindings</span><span class="p">[],</span> <span class="n">size_t</span> <span class="n">rebindings_nel</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="n">prepend_rebindings</span><span class="p">(</span><span class="n">rebindings</span><span class="p">,</span> <span class="n">rebindings_nel</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1">// If this was the first call, register callback for image additions (which is also invoked for  </span>
</span><span class="line">  <span class="c1">// existing images, otherwise, just run on existing images  </span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rebindings_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_dyld_register_func_for_add_image</span><span class="p">(</span><span class="n">rebind_symbols_for_image</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">c</span> <span class="o">=</span> <span class="n">_dyld_image_count</span><span class="p">();</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">uint32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">rebind_symbols_for_image</span><span class="p">(</span><span class="n">_dyld_get_image_header</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">_dyld_get_image_vmaddr_slide</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关键函数是 <code>_dyld_register_func_for_add_image</code>，这个函数是用来注册回调，当 dyld 链接符号时，调用此回调函数。 <code>rebind_symbols_for_image</code> 做了具体的替换和填充。</p>

<h3>fishhook 替换<code> Core Foundation </code>函数的例子</h3>

<p>以下是官方提供的替换<code> Core Foundation </code>中 open 和 close 函数的实例代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">dlfcn</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="o">&lt;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;AppDelegate.h&quot;</span>
</span><span class="line"> <span class="err">#</span><span class="n">import</span> <span class="s">&quot;fishhook.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">orig_close</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="k">static</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">orig_open</span><span class="p">)(</span><span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="p">...);</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">save_original_symbols</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">orig_close</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">RTLD_DEFAULT</span><span class="p">,</span> <span class="s">&quot;close&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">orig_open</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">RTLD_DEFAULT</span><span class="p">,</span> <span class="s">&quot;open&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">my_close</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real close(%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">orig_close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">my_open</span><span class="p">(</span><span class="k">const</span> <span class="n">charchar</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oflag</span><span class="p">,</span> <span class="p">...)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">va_list</span> <span class="n">ap</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class="line">  <span class="n">mode_t</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">((</span><span class="n">oflag</span> <span class="o">&amp;</span> <span class="n">O_CREAT</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// mode only applies to O_CREAT  </span>
</span><span class="line">    <span class="n">va_start</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">oflag</span><span class="p">);</span>
</span><span class="line">    <span class="n">mode</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line">    <span class="n">va_end</span><span class="p">(</span><span class="n">ap</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real open(&#39;%s&#39;, %d, %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">orig_open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Calling real open(&#39;%s&#39;, %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">orig_open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">oflag</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">charchar</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">    <span class="n">save_original_symbols</span><span class="p">();</span>
</span><span class="line">    <span class="c1">//fishhook用法  </span>
</span><span class="line">    <span class="n">rebind_symbols</span><span class="p">((</span><span class="k">struct</span> <span class="n">rebinding</span><span class="p">[</span><span class="mi">2</span><span class="p">]){</span>
</span><span class="line">      <span class="p">{</span><span class="s">&quot;close&quot;</span><span class="p">,</span> <span class="n">my_close</span><span class="p">},</span>
</span><span class="line">      <span class="p">{</span><span class="s">&quot;open&quot;</span><span class="p">,</span> <span class="n">my_open</span><span class="p">}},</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Open our own binary and print out first 4 bytes (which is the same  </span>
</span><span class="line">    <span class="c1">// for all Mach-O binaries on a given architecture)  </span>
</span><span class="line">    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">magic_number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">magic_number</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Mach-O Magic Number: %x </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">magic_number</span><span class="p">);</span>
</span><span class="line">    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">// fishhook 用法处:</span>
</span><span class="line"><span class="n">rebind_symbols</span><span class="p">((</span><span class="k">struct</span> <span class="n">rebinding</span><span class="p">[</span><span class="mi">2</span><span class="p">]){</span>
</span><span class="line">  <span class="p">{</span><span class="s">&quot;close&quot;</span><span class="p">,</span> <span class="n">my_close</span><span class="p">},</span>
</span><span class="line">  <span class="p">{</span><span class="s">&quot;open&quot;</span><span class="p">,</span> <span class="n">my_open</span><span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>传入 rebind_symbols 的第一个参数是一个结构体数组，大括号中为对应数组内容。</p>

<p>不得不说，facebook 忒 NB 。</p>

</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 introspy 追踪分析应用程序]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-introspy-zhui-zong-fen-xi-ying-yong-cheng-xu/"/>
    <updated>2016-08-25T12:01:59+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/08/25/shi-yong-introspy-zhui-zong-fen-xi-ying-yong-cheng-xu</id>
    <content type="html"><![CDATA[<div class="container">
<div class="item chapter">
    <h1 class="title"><span class="label">16</span> <span class="title">使用 introspy 追踪分析应用程序</span></h1>
    <p>如果你已阅读了《 iOS 安全攻防》系列专栏之前的文章，一定已经对静态以及运行时分析<code> App </code>有了一定的了解。</p>

<p>我们可以借助的分析工具很多，工具和工具之间一般没有什么优劣比较性，完全看个人习惯什么擅长什么。</p>

<p>多个工具多条路，那么本文将介绍追踪分析利器<code> introspy </code>。</p>

<p>对应 iOS 系统版本，下载适用的<code> introspy </code>工具包：<a href="https://github.com/iSECPartners/Introspy-iOS/releases">introspy下载地址传送门</a></p>

<p>下载后，将其拷贝到设备中，并执行安装命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># dpkg -i com.isecpartners.introspy-v0.4-iOS_7.deb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启设备：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># killall SpringBoard</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>到设置中，就可以查看到 instrospy 的设置选项了:</p>

<div class="figure" id="figure-16-1">
    <img src="http://ww2.sinaimg.cn/large/626e5d69jw1f75zfuzba2j208w0adjrr.jpg" />

    <p class="caption"><strong>图片 16.1</strong> instrospy1</p>
</div>


<p>在<code> Introspy-Apps </code>中选择要跟踪的<code> app </code>名称。
<code>Instrospy-Settings </code>则提供一些常规跟踪设置选项，默认是全部开启。</p>

<p>然后启动想要跟踪的应用程序，就可以直接查看 log 获取<code> Instrospy </code>为我们跟踪捕获的信息，这里以跟踪支付宝 app 为例。</p>

<p>打开支付宝 App ，选择添加银行卡，随意添加一个卡号，然后点击下一步:</p>

<div class="figure" id="figure-16-2">
    <img src="http://ww2.sinaimg.cn/large/626e5d69jw1f75zgf02jqj208w0fsjrq.jpg" />

    <p class="caption"><strong>图片 16.2</strong> instrospy2</p>
</div>


<p>支付宝 app 反馈添加失败，该卡暂不支持，Instrospy 捕获的信息也很清晰：</p>

<div class="figure" id="figure-16-3">
    <img src="http://ww4.sinaimg.cn/large/626e5d69gw1f75zm8s5qyj21bc0h4425.jpg" />

    <p class="caption"><strong>图片 16.3</strong> instrospy3</p>
</div>


<p>追踪信息被保存为一个数据库<code>introspy-com.alipay.iphoneclient.db</code>，存放在：
<code>./private/var/mobile/Applications/4763A8A5-2E1D-4DC2-8376-6CB7A8B98728/Library/introspy-com.alipay.iphoneclient.db</code></p>

<p>也可以借助<code> Introspy-Analyzer </code>在本地将该数据库解析成一个直观的 report.html 查看
<a href="https://github.com/iSECPartners/Introspy-Analyzer">Introspy-Analyzer下载地址传送门</a></p>

<p>将 <code>introspy-com.alipay.iphoneclient.db</code> 拷贝到本地，执行：
<code>python introspy.py -p ios --outdir Portal-introspy-html introspy-com.alipay.iphoneclient.db</code></p>

<p>就会生成一个 <code>Portal-introspy-html</code>  文件夹，该目录下有 <code>report.html</code> ，用浏览器打开:
<code>open report.html</code></p>

<p>就可以清晰的查看追踪信息了，主要分为<code> DataStorage</code>、<code>IPC</code>、<code>Misc</code>、<code>Network</code>、<code>Crypto</code> 六大类信息。
举个例子，选择<code> Crypto </code>可以查看支付宝 app 采取了什么加密措施，如果你看过我之前的文章，一定会一眼就认出来手势密码的：</p>

<div class="figure" id="figure-16-4">
    <img src="http://ww1.sinaimg.cn/large/626e5d69gw1f75zn5ysdnj218u1cctgb.jpg" />

    <p class="caption"><strong>图片 16.4</strong> instrospy4</p>
</div>


</div>
</div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
</feed>
