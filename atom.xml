<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[IT Monkey Life]]></title>
  <link href="http://ITMonkeyLife.github.io/Blog/atom.xml" rel="self"/>
  <link href="http://ITMonkeyLife.github.io/Blog/"/>
  <updated>2016-06-17T14:24:45+08:00</updated>
  <id>http://ITMonkeyLife.github.io/Blog/</id>
  <author>
    <name><![CDATA[Rick]]></name>
    <email><![CDATA[382542165@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift 3.0 ABI]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/06/15/swift-3-dot-0-abi/"/>
    <updated>2016-06-15T16:02:03+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/06/15/swift-3-dot-0-abi</id>
    <content type="html"><![CDATA[<p>
<span id="abi"></span><h1><a class="toc-backref" href="#id1">The Swift ABI</a><a class="headerlink" href="#the-swift-abi" title="Permalink to this headline"></a></h1>
<div class="contents topic" id="contents">

<p class="topic-title first">Contents</p>
<ul class="simple">
<li><a class="reference internal" href="#the-swift-abi" id="id1">The Swift ABI</a><ul>
<li><a class="reference internal" href="#hard-constraints-on-resilience" id="id2">Hard Constraints on Resilience</a></li>
<li><a class="reference internal" href="#type-layout" id="id3">Type Layout</a><ul>
<li><a class="reference internal" href="#fragile-struct-and-tuple-layout" id="id4">Fragile Struct and Tuple Layout</a></li>
<li><a class="reference internal" href="#class-layout" id="id5">Class Layout</a></li>
<li><a class="reference internal" href="#fragile-enum-layout" id="id6">Fragile Enum Layout</a><ul>
<li><a class="reference internal" href="#empty-enums" id="id7">Empty Enums</a></li>
<li><a class="reference internal" href="#single-case-enums" id="id8">Single-Case Enums</a></li>
<li><a class="reference internal" href="#c-like-enums" id="id9">C-Like Enums</a></li>
<li><a class="reference internal" href="#single-payload-enums" id="id10">Single-Payload Enums</a></li>
<li><a class="reference internal" href="#multi-payload-enums" id="id11">Multi-Payload Enums</a></li>
</ul>
</li>
<li><a class="reference internal" href="#existential-container-layout" id="id12">Existential Container Layout</a><ul>
<li><a class="reference internal" href="#opaque-existential-containers" id="id13">Opaque Existential Containers</a></li>
<li><a class="reference internal" href="#class-existential-containers" id="id14">Class Existential Containers</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#type-metadata" id="id15">Type Metadata</a><ul>
<li><a class="reference internal" href="#common-metadata-layout" id="id16">Common Metadata Layout</a></li>
<li><a class="reference internal" href="#struct-metadata" id="id17">Struct Metadata</a></li>
<li><a class="reference internal" href="#enum-metadata" id="id18">Enum Metadata</a></li>
<li><a class="reference internal" href="#tuple-metadata" id="id19">Tuple Metadata</a></li>
<li><a class="reference internal" href="#function-metadata" id="id20">Function Metadata</a></li>
<li><a class="reference internal" href="#protocol-metadata" id="id21">Protocol Metadata</a></li>
<li><a class="reference internal" href="#metatype-metadata" id="id22">Metatype Metadata</a></li>
<li><a class="reference internal" href="#class-metadata" id="id23">Class Metadata</a></li>
<li><a class="reference internal" href="#generic-parameter-vector" id="id24">Generic Parameter Vector</a></li>
<li><a class="reference internal" href="#nominal-type-descriptor" id="id25">Nominal Type Descriptor</a></li>
<li><a class="reference internal" href="#protocol-descriptor" id="id26">Protocol Descriptor</a></li>
</ul>
</li>
<li><a class="reference internal" href="#heap-objects" id="id27">Heap Objects</a><ul>
<li><a class="reference internal" href="#heap-metadata" id="id28">Heap Metadata</a></li>
<li><a class="reference internal" href="#heap-object-header" id="id29">Heap Object Header</a></li>
</ul>
</li>
<li><a class="reference internal" href="#mangling" id="id30">Mangling</a><ul>
<li><a class="reference internal" href="#globals" id="id31">Globals</a></li>
<li><a class="reference internal" href="#direct-and-indirect-symbols" id="id32">Direct and Indirect Symbols</a></li>
<li><a class="reference internal" href="#declaration-contexts" id="id33">Declaration Contexts</a></li>
<li><a class="reference internal" href="#types" id="id34">Types</a></li>
<li><a class="reference internal" href="#generics" id="id35">Generics</a></li>
<li><a class="reference internal" href="#value-witnesses" id="id36">Value Witnesses</a></li>
<li><a class="reference internal" href="#identifiers" id="id37">Identifiers</a></li>
<li><a class="reference internal" href="#substitutions" id="id38">Substitutions</a></li>
<li><a class="reference internal" href="#predefined-substitutions" id="id39">Predefined Substitutions</a></li>
<li><a class="reference internal" href="#indexes" id="id40">Indexes</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="section" id="hard-constraints-on-resilience">
<h2><a class="toc-backref" href="#id2">Hard Constraints on Resilience</a><a class="headerlink" href="#hard-constraints-on-resilience" title="Permalink to this headline"></a></h2>
<p>The root of a class hierarchy must remain stable, at pain of
invalidating the metaclass hierarchy.  Note that a Swift class without an
explicit base class is implicitly rooted in the SwiftObject
Objective-C class.</p>
</div>
<div class="section" id="type-layout">
<h2><a class="toc-backref" href="#id3">Type Layout</a><a class="headerlink" href="#type-layout" title="Permalink to this headline"></a></h2>
<div class="section" id="fragile-struct-and-tuple-layout">
<h3><a class="toc-backref" href="#id4">Fragile Struct and Tuple Layout</a><a class="headerlink" href="#fragile-struct-and-tuple-layout" title="Permalink to this headline"></a></h3>
<p>Structs and tuples currently share the same layout algorithm, noted as the
&#8220;Universal&#8221; layout algorithm in the compiler implementation. The algorithm
is as follows:</p>
<ul class="simple">
<li>Start with a <strong>size</strong> of <strong>0</strong> and an <strong>alignment</strong> of <strong>1</strong>.</li>
<li>Iterate through the fields, in element order for tuples, or in <code class="docutils literal"><span class="pre">var</span></code>
declaration order for structs. For each field:<ul>
<li>Update <strong>size</strong> by rounding up to the <strong>alignment of the field</strong>, that is,
increasing it to the least value greater or equal to <strong>size</strong> and evenly
divisible by the <strong>alignment of the field</strong>.</li>
<li>Assign the <strong>offset of the field</strong> to the current value of <strong>size</strong>.</li>
<li>Update <strong>size</strong> by adding the <strong>size of the field</strong>.</li>
<li>Update <strong>alignment</strong> to the max of <strong>alignment</strong> and the
<strong>alignment of the field</strong>.</li>
</ul>
</li>
<li>The final <strong>size</strong> and <strong>alignment</strong> are the size and alignment of the
aggregate. The <strong>stride</strong> of the type is the final <strong>size</strong> rounded up to
<strong>alignment</strong>.</li>
</ul>
<p>Note that this differs from C or LLVM&#8217;s normal layout rules in that <em>size</em>
and <em>stride</em> are distinct; whereas C layout requires that an embedded struct&#8217;s
size be padded out to its alignment and that nothing be laid out there,
Swift layout allows an outer struct to lay out fields in the inner struct&#8217;s
tail padding, alignment permitting. Unlike C, zero-sized structs and tuples
are also allowed, and take up no storage in enclosing aggregates. The Swift
compiler emits LLVM packed struct types with manual padding to get the
necessary control over the binary layout. Some examples:</p>
<div class="highlight-swift"><div class="highlight"><pre>// LLVM &lt;{ i64, i8 }&gt;
struct S {
  var x: Int
  var y: UInt8
}

// LLVM &lt;{ i8, [7 x i8], &lt;{ i64, i8 }&gt;, i8 }&gt;
struct S2 {
  var x: UInt8
  var s: S
  var y: UInt8
}

// LLVM &lt;{}&gt;
struct Empty {}

// LLVM &lt;{ i64, i64 }&gt;
struct ContainsEmpty {
  var x: Int
  var y: Empty
  var z: Int
}
</pre></div>
</div>
</div>
<div class="section" id="class-layout">
<h3><a class="toc-backref" href="#id5">Class Layout</a><a class="headerlink" href="#class-layout" title="Permalink to this headline"></a></h3>
<p>Swift relies on the following assumptions about the Objective-C runtime,
which are therefore now part of the Objective-C ABI:</p>
<ul class="simple">
<li>32-bit platforms never have tagged pointers.  ObjC pointer types are
either nil or an object pointer.</li>
<li>On x86-64, a tagged pointer either sets the lowest bit of the pointer
or the highest bit of the pointer.  Therefore, both of these bits are
zero if and only if the value is not a tagged pointer.</li>
<li>On ARM64, a tagged pointer always sets the highest bit of the pointer.</li>
<li>32-bit platforms never perform any isa masking.  <code class="docutils literal"><span class="pre">object_getClass</span></code>
is always equivalent to <code class="docutils literal"><span class="pre">*(Class*)object</span></code>.</li>
<li>64-bit platforms perform isa masking only if the runtime exports a
symbol <code class="docutils literal"><span class="pre">uintptr_t</span> <span class="pre">objc_debug_isa_class_mask;</span></code>.  If this symbol
is exported, <code class="docutils literal"><span class="pre">object_getClass</span></code> on a non-tagged pointer is always
equivalent to <code class="docutils literal"><span class="pre">(Class)(objc_debug_isa_class_mask</span> <span class="pre">&amp;</span> <span class="pre">*(uintptr_t*)object)</span></code>.</li>
<li>The superclass field of a class object is always stored immediately
after the isa field.  Its value is either nil or a pointer to the
class object for the superclass; it never has other bits set.</li>
</ul>
<p>The following assumptions are part of the Swift ABI:</p>
<ul class="simple">
<li>Swift class pointers are never tagged pointers.</li>
</ul>
<p>TODO</p>
</div>
<div class="section" id="fragile-enum-layout">
<h3><a class="toc-backref" href="#id6">Fragile Enum Layout</a><a class="headerlink" href="#fragile-enum-layout" title="Permalink to this headline"></a></h3>
<p>In laying out enum types, the ABI attempts to avoid requiring additional
storage to store the tag for the enum case. The ABI chooses one of five
strategies based on the layout of the enum:</p>
<div class="section" id="empty-enums">
<h4><a class="toc-backref" href="#id7">Empty Enums</a><a class="headerlink" href="#empty-enums" title="Permalink to this headline"></a></h4>
<p>In the degenerate case of an enum with no cases, the enum is an empty type.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">enum</span><span class="w"> </span><span class="n">Empty</span><span class="w"> </span><span class="p">{}</span><span class="w"> </span><span class="c1">// =&gt; empty type</span>
</pre></div>
</div>
</div>
<div class="section" id="single-case-enums">
<h4><a class="toc-backref" href="#id8">Single-Case Enums</a><a class="headerlink" href="#single-case-enums" title="Permalink to this headline"></a></h4>
<p>In the degenerate case of an enum with a single case, there is no
discriminator needed, and the enum type has the exact same layout as its
case&#8217;s data type, or is empty if the case has no data type.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">enum</span><span class="w"> </span><span class="n">EmptyCase</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">case</span><span class="w"> </span><span class="n">X</span><span class="w"> </span><span class="p">}</span><span class="w">             </span><span class="c1">// =&gt; empty type</span>
<span class="n">enum</span><span class="w"> </span><span class="n">DataCase</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">case</span><span class="w"> </span><span class="no">Y</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="w"> </span><span class="n">Double</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="c1">// =&gt; LLVM &lt;{ i64, double }&gt;</span>
</pre></div>
</div>
</div>
<!-- more-->
<div class="section" id="c-like-enums">
<h4><a class="toc-backref" href="#id9">C-Like Enums</a><a class="headerlink" href="#c-like-enums" title="Permalink to this headline"></a></h4>
<p>If none of the cases has a data type (a &#8220;C-like&#8221; enum), then the enum
is laid out as an integer tag with the minimal number of bits to contain
all of the cases. The machine-level layout of the type then follows LLVM&#8217;s
data layout rules for integer types on the target platform. The cases are
assigned tag values in declaration order.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">enum</span><span class="w"> </span><span class="n">EnumLike2</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// =&gt; LLVM i1</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">A</span><span class="w">         </span><span class="c1">// =&gt; i1 0</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">B</span><span class="w">         </span><span class="c1">// =&gt; i1 1</span>
<span class="p">}</span>

<span class="n">enum</span><span class="w"> </span><span class="n">EnumLike8</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// =&gt; LLVM i3</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">A</span><span class="w">         </span><span class="c1">// =&gt; i3 0</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">B</span><span class="w">         </span><span class="c1">// =&gt; i3 1</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">C</span><span class="w">         </span><span class="c1">// =&gt; i3 2</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">D</span><span class="w">         </span><span class="c1">// etc.</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">E</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">F</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">G</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">H</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Discriminator values after the one used for the last case become <em>extra
inhabitants</em> of the enum type (see <a class="reference internal" href="#single-payload-enums">Single-Payload Enums</a>).</p>
</div>
<div class="section" id="single-payload-enums">
<h4><a class="toc-backref" href="#id10">Single-Payload Enums</a><a class="headerlink" href="#single-payload-enums" title="Permalink to this headline"></a></h4>
<p>If an enum has a single case with a data type and one or more no-data cases
(a &#8220;single-payload&#8221; enum), then the case with data type is represented using
the data type&#8217;s binary representation, with added zero bits for tag if
necessary. If the data type&#8217;s binary representation
has <strong>extra inhabitants</strong>, that is, bit patterns with the size and alignment of
the type but which do not form valid values of that type, they are used to
represent the no-data cases, with extra inhabitants in order of ascending
numeric value matching no-data cases in declaration order. If the type
has <em>spare bits</em> (see <a class="reference internal" href="#multi-payload-enums">Multi-Payload Enums</a>), they are used to form extra
inhabitants. The enum value is then represented as an integer with the storage
size in bits of the data type. Extra inhabitants of the payload type not used
by the enum type become extra inhabitants of the enum type itself.</p>
<div class="highlight-swift"><div class="highlight"><pre>enum CharOrSectionMarker { =&gt; LLVM i32
  case Paragraph            =&gt; i32 0x0020_0000
  case Char(UnicodeScalar)  =&gt; i32 (zext i21 %Char to i32)
  case Chapter              =&gt; i32 0x0020_0001
}

CharOrSectionMarker.Char(&#39;\x00&#39;) =&gt; i32 0x0000_0000
CharOrSectionMarker.Char(&#39;\u10FFFF&#39;) =&gt; i32 0x0010_FFFF

enum CharOrSectionMarkerOrFootnoteMarker { =&gt; LLVM i32
  case CharOrSectionMarker(CharOrSectionMarker) =&gt; i32 %CharOrSectionMarker
  case Asterisk                                 =&gt; i32 0x0020_0002
  case Dagger                                   =&gt; i32 0x0020_0003
  case DoubleDagger                             =&gt; i32 0x0020_0004
}
</pre></div>
</div>
<p>If the data type has no extra inhabitants, or there are not enough extra
inhabitants to represent all of the no-data cases, then a tag bit is added
to the enum&#8217;s representation. The tag bit is set for the no-data cases, which
are then assigned values in the data area of the enum in declaration order.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">enum</span><span class="w"> </span><span class="n">IntOrInfinity</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">LLVM</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">NegInfinity</span><span class="w">    </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">    </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Int</span><span class="p">(</span><span class="n">Int</span><span class="p">)</span><span class="w">       </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">%</span><span class="n">Int</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">}</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">PosInfinity</span><span class="w">    </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">    </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span>
<span class="p">}</span>

<span class="n">IntOrInfinity</span><span class="p">.</span><span class="no">Int</span><span class="p">(</span><span class="w">    </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">     </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">}</span>
<span class="n">IntOrInfinity</span><span class="p">.</span><span class="no">Int</span><span class="p">(</span><span class="mi">20721</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i1</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">20721</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="multi-payload-enums">
<h4><a class="toc-backref" href="#id11">Multi-Payload Enums</a><a class="headerlink" href="#multi-payload-enums" title="Permalink to this headline"></a></h4>
<p>If an enum has more than one case with data type, then a tag is necessary to
discriminate the data types. The ABI will first try to find common
<strong>spare bits</strong>, that is, bits in the data types&#8217; binary representations which are
either fixed-zero or ignored by valid values of all of the data types. The tag
will be scattered into these spare bits as much as possible. Currently only
spare bits of primitive integer types, such as the high bits of an <code class="docutils literal"><span class="pre">i21</span></code>
type, are considered. The enum data is represented as an integer with the
storage size in bits of the largest data type.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">enum</span><span class="w"> </span><span class="n">TerminalChar</span><span class="w"> </span><span class="p">{</span><span class="w">             </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">LLVM</span><span class="w"> </span><span class="n">i32</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Plain</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span><span class="w">     </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w">     </span><span class="p">(</span><span class="n">zext</span><span class="w"> </span><span class="n">i21</span><span class="w"> </span><span class="o">%</span><span class="n">Plain</span><span class="w">     </span><span class="n">to</span><span class="w"> </span><span class="n">i32</span><span class="p">)</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Bold</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span><span class="w">      </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w"> </span><span class="p">(</span><span class="n">or</span><span class="w"> </span><span class="p">(</span><span class="n">zext</span><span class="w"> </span><span class="n">i21</span><span class="w"> </span><span class="o">%</span><span class="n">Bold</span><span class="w">      </span><span class="n">to</span><span class="w"> </span><span class="n">i32</span><span class="p">),</span><span class="w"> </span><span class="mh">0x0020</span><span class="n">_0000</span><span class="p">)</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Underline</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w"> </span><span class="p">(</span><span class="n">or</span><span class="w"> </span><span class="p">(</span><span class="n">zext</span><span class="w"> </span><span class="n">i21</span><span class="w"> </span><span class="o">%</span><span class="n">Underline</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">i32</span><span class="p">),</span><span class="w"> </span><span class="mh">0x0040</span><span class="n">_0000</span><span class="p">)</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Blink</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span><span class="w">     </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w"> </span><span class="p">(</span><span class="n">or</span><span class="w"> </span><span class="p">(</span><span class="n">zext</span><span class="w"> </span><span class="n">i21</span><span class="w"> </span><span class="o">%</span><span class="n">Blink</span><span class="w">     </span><span class="n">to</span><span class="w"> </span><span class="n">i32</span><span class="p">),</span><span class="w"> </span><span class="mh">0x0060</span><span class="n">_0000</span><span class="p">)</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">Empty</span><span class="w">                    </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w"> </span><span class="mh">0x0080</span><span class="n">_0000</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="n">Cursor</span><span class="w">                   </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">i32</span><span class="w"> </span><span class="mh">0x0080</span><span class="n">_0001</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If there are not enough spare bits to contain the tag, then additional bits are
added to the representation to contain the tag. Tag values are
assigned to data cases in declaration order. If there are no-data cases, they
are collected under a common tag, and assigned values in the data area of the
enum in declaration order.</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="kd">class </span><span class="nc">Bignum</span><span class="w"> </span><span class="p">{}</span>

<span class="n">enum</span><span class="w"> </span><span class="n">IntDoubleOrBignum</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">LLVM</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Int</span><span class="p">(</span><span class="n">Int</span><span class="p">)</span><span class="w">           </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">           </span><span class="o">%</span><span class="n">Int</span><span class="p">,</span><span class="w">            </span><span class="mi">0</span><span class="w"> </span><span class="p">}</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Double</span><span class="p">(</span><span class="n">Double</span><span class="p">)</span><span class="w">     </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">(</span><span class="n">bitcast</span><span class="w">  </span><span class="o">%</span><span class="n">Double</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">i64</span><span class="p">),</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span>
<span class="w">  </span><span class="n">case</span><span class="w"> </span><span class="no">Bignum</span><span class="p">(</span><span class="n">Bignum</span><span class="p">)</span><span class="w">     </span><span class="o">=&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="p">{</span><span class="w"> </span><span class="n">i64</span><span class="p">,</span><span class="w"> </span><span class="n">i2</span><span class="w"> </span><span class="p">}</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">(</span><span class="n">ptrtoint</span><span class="w"> </span><span class="o">%</span><span class="n">Bignum</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">i64</span><span class="p">),</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="existential-container-layout">
<h3><a class="toc-backref" href="#id12">Existential Container Layout</a><a class="headerlink" href="#existential-container-layout" title="Permalink to this headline"></a></h3>
<p>Values of protocol type, protocol composition type, or &#8220;any&#8221; type
(<code class="docutils literal"><span class="pre">protocol&lt;&gt;</span></code>) are laid out using <strong>existential containers</strong> (so-called
because these types are &#8220;existential types&#8221; in type theory).</p>
<div class="section" id="opaque-existential-containers">
<h4><a class="toc-backref" href="#id13">Opaque Existential Containers</a><a class="headerlink" href="#opaque-existential-containers" title="Permalink to this headline"></a></h4>
<p>If there is no class constraint on a protocol or protocol composition type,
the existential container has to accommodate a value of arbitrary size and
alignment. It does this using a <strong>fixed-size buffer</strong>, which is three pointers
in size and pointer-aligned. This either directly contains the value, if its
size and alignment are both less than or equal to the fixed-size buffer&#8217;s, or
contains a pointer to a side allocation owned by the existential container.
The type of the contained value is identified by its <cite>type metadata</cite> record,
and witness tables for all of the required protocol conformances are included.
The layout is as if declared in the following C struct:</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="kd">struct </span><span class="nc">OpaqueExistentialContainer</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="n">void</span><span class="w"> </span><span class="o">*</span><span class="n">fixedSizeBuffer</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
<span class="w">  </span><span class="n">Metadata</span><span class="w"> </span><span class="o">*</span><span class="n">type</span><span class="p">;</span>
<span class="w">  </span><span class="n">WitnessTable</span><span class="w"> </span><span class="o">*</span><span class="n">witnessTables</span><span class="p">[</span><span class="n">NUM_WITNESS_TABLES</span><span class="p">];</span>
<span class="p">};</span>
</pre></div>
</div>
</div>
<div class="section" id="class-existential-containers">
<h4><a class="toc-backref" href="#id14">Class Existential Containers</a><a class="headerlink" href="#class-existential-containers" title="Permalink to this headline"></a></h4>
<p>If one or more of the protocols in a protocol or protocol composition type
have a class constraint, then only class values can be stored in the existential
container, and a more efficient representation is used. Class instances are
always a single pointer in size, so a fixed-size buffer and potential side
allocation is not needed, and class instances always have a reference to their
own type metadata, so the separate metadata record is not needed. The
layout is thus as if declared in the following C struct:</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="kd">struct </span><span class="nc">ClassExistentialContainer</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="n">HeapObject</span><span class="w"> </span><span class="o">*</span><span class="n">value</span><span class="p">;</span>
<span class="w">  </span><span class="n">WitnessTable</span><span class="w"> </span><span class="o">*</span><span class="n">witnessTables</span><span class="p">[</span><span class="n">NUM_WITNESS_TABLES</span><span class="p">];</span>
<span class="p">};</span>
</pre></div>
</div>
<p>Note that if no witness tables are needed, such as for the &#8220;any class&#8221; type
<code class="docutils literal"><span class="pre">protocol&lt;class&gt;</span></code> or an Objective-C protocol type, then the only element of
the layout is the heap object pointer. This is ABI-compatible with <code class="docutils literal"><span class="pre">id</span></code>
and <code class="docutils literal"><span class="pre">id</span> <span class="pre">&lt;Protocol&gt;</span></code> types in Objective-C.</p>
</div>
</div>
</div>
<div class="section" id="type-metadata">
<h2><a class="toc-backref" href="#id15">Type Metadata</a><a class="headerlink" href="#type-metadata" title="Permalink to this headline"></a></h2>
<p>The Swift runtime keeps a <strong>metadata record</strong> for every type used in a program,
including every instantiation of generic types. These metadata records can
be used by (TODO: reflection and) debugger tools to discover information about
types. For non-generic nominal types, these metadata records are generated
statically by the compiler. For instances of generic types, and for intrinsic
types such as tuples, functions, protocol compositions, etc., metadata records
are lazily created by the runtime as required. Every type has a unique metadata
record; two <strong>metadata pointer</strong> values are equal iff the types are equivalent.</p>
<p>In the layout descriptions below, offsets are given relative to the
metadata pointer as an index into an array of pointers. On a 32-bit platform,
<strong>offset 1</strong> means an offset of 4 bytes, and on 64-bit platforms, it means
an offset of 8 bytes.</p>
<div class="section" id="common-metadata-layout">
<h3><a class="toc-backref" href="#id16">Common Metadata Layout</a><a class="headerlink" href="#common-metadata-layout" title="Permalink to this headline"></a></h3>
<p>All metadata records share a common header, with the following fields:</p>
<ul>
<li><p class="first">The <strong>value witness table</strong> pointer references a vtable of functions
that implement the value semantics of the type, providing fundamental
operations such as allocating, copying, and destroying values of the type.
The value witness table also records the size, alignment, stride, and other
fundamental properties of the type. The value witness table pointer is at
<strong>offset -1</strong> from the metadata pointer, that is, the pointer-sized word
<strong>immediately before</strong> the pointer&#8217;s referenced address.</p>
</li>
<li><p class="first">The <strong>kind</strong> field is a pointer-sized integer that describes the kind of type
the metadata describes. This field is at <strong>offset 0</strong> from the metadata
pointer.</p>
<p>The current kind values are as follows:</p>
<ul class="simple">
<li><a class="reference internal" href="#struct-metadata">Struct metadata</a> has a kind of <strong>1</strong>.</li>
<li><a class="reference internal" href="#enum-metadata">Enum metadata</a> has a kind of <strong>2</strong>.</li>
<li><strong>Opaque metadata</strong> has a kind of <strong>8</strong>. This is used for compiler
<code class="docutils literal"><span class="pre">Builtin</span></code> primitives that have no additional runtime information.</li>
<li><a class="reference internal" href="#tuple-metadata">Tuple metadata</a> has a kind of <strong>9</strong>.</li>
<li><a class="reference internal" href="#function-metadata">Function metadata</a> has a kind of <strong>10</strong>.</li>
<li><a class="reference internal" href="#protocol-metadata">Protocol metadata</a> has a kind of <strong>12</strong>. This is used for
protocol types, for protocol compositions, and for the &#8220;any&#8221; type
<code class="docutils literal"><span class="pre">protocol&lt;&gt;</span></code>.</li>
<li><a class="reference internal" href="#metatype-metadata">Metatype metadata</a> has a kind of <strong>13</strong>.</li>
<li><a class="reference internal" href="#class-metadata">Class metadata</a>, instead of a kind, has an <em>isa pointer</em> in its kind slot,
pointing to the class&#8217;s metaclass record. This isa pointer is guaranteed
to have an integer value larger than <strong>4096</strong> and so can be discriminated
from non-class kind values.</li>
</ul>
</li>
</ul>
</div>
<div class="section" id="struct-metadata">
<h3><a class="toc-backref" href="#id17">Struct Metadata</a><a class="headerlink" href="#struct-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, struct metadata records
contain the following fields:</p>
<ul>
<li><p class="first">The <a class="reference internal" href="#nominal-type-descriptor">nominal type descriptor</a> is referenced at <strong>offset 1</strong>.</p>
</li>
<li><p class="first">A reference to the <strong>parent</strong> metadata record is stored at <strong>offset 2</strong>. For
structs that are members of an enclosing nominal type, this is a reference
to the enclosing type&#8217;s metadata. For top-level structs, this is null.</p>
<p>TODO: The parent pointer is currently always null.</p>
</li>
<li><p class="first">A vector of <strong>field offsets</strong> begins at <strong>offset 3</strong>. For each field of the
struct, in <code class="docutils literal"><span class="pre">var</span></code> declaration order, the field&#8217;s offset in bytes from the
beginning of the struct is stored as a pointer-sized integer.</p>
</li>
<li><p class="first">If the struct is generic, then the
<a class="reference internal" href="#generic-parameter-vector">generic parameter vector</a> begins at <strong>offset 3+n</strong>, where <strong>n</strong> is the
number of fields in the struct.</p>
</li>
</ul>
</div>
<div class="section" id="enum-metadata">
<h3><a class="toc-backref" href="#id18">Enum Metadata</a><a class="headerlink" href="#enum-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, enum metadata records
contain the following fields:</p>
<ul>
<li><p class="first">The <a class="reference internal" href="#nominal-type-descriptor">nominal type descriptor</a> is referenced at <strong>offset 1</strong>.</p>
</li>
<li><p class="first">A reference to the <strong>parent</strong> metadata record is stored at <strong>offset 2</strong>. For
enums that are members of an enclosing nominal type, this is a reference to
the enclosing type&#8217;s metadata. For top-level enums, this is null.</p>
<p>TODO: The parent pointer is currently always null.</p>
</li>
<li><p class="first">If the enum is generic, then the
<a class="reference internal" href="#generic-parameter-vector">generic parameter vector</a> begins at <strong>offset 3</strong>.</p>
</li>
</ul>
</div>
<div class="section" id="tuple-metadata">
<h3><a class="toc-backref" href="#id19">Tuple Metadata</a><a class="headerlink" href="#tuple-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, tuple metadata records
contain the following fields:</p>
<ul>
<li><p class="first">The <strong>number of elements</strong> in the tuple is a pointer-sized integer at
<strong>offset 1</strong>.</p>
</li>
<li><p class="first">The <strong>labels string</strong> is a pointer to a list of consecutive null-terminated
label names for the tuple at <strong>offset 2</strong>. Each label name is given as a
null-terminated, UTF-8-encoded string in sequence. If the tuple has no
labels, this is a null pointer.</p>
<p>TODO: The labels string pointer is currently always null, and labels are
not factored into tuple metadata uniquing.</p>
</li>
<li><p class="first">The <strong>element vector</strong> begins at <strong>offset 3</strong> and consists of a vector of
type-offset pairs. The metadata for the <em>n</em>th element&#8217;s type is a pointer
at <strong>offset 3+2*n</strong>. The offset in bytes from the beginning of the tuple to
the beginning of the <em>n</em>th element is at <strong>offset 3+2*n+1</strong>.</p>
</li>
</ul>
</div>
<div class="section" id="function-metadata">
<h3><a class="toc-backref" href="#id20">Function Metadata</a><a class="headerlink" href="#function-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, function metadata records
contain the following fields:</p>
<ul>
<li><p class="first">The number of arguments to the function is stored at <strong>offset 1</strong>.</p>
</li>
<li><p class="first">A reference to the <strong>result type</strong> metadata record is stored at
<strong>offset 2</strong>. If the function has multiple returns, this references a
<a class="reference internal" href="#tuple-metadata">tuple metadata</a> record.</p>
</li>
<li><p class="first">The <strong>argument vector</strong> begins at <strong>offset 3</strong> and consists of pointers to
metadata records of the function&#8217;s arguments.</p>
<p>If the function takes any <strong>inout</strong> arguments, a pointer to each argument&#8217;s
metadata record will be appended separately, the lowest bit being set if it is
<strong>inout</strong>. Because of pointer alignment, the lowest bit will always be free to
hold this tag.</p>
<p>If the function takes no <strong>inout</strong> arguments, there will be only one pointer in
the vector for the following cases:</p>
<ul class="simple">
<li>0 arguments: a <a class="reference internal" href="#tuple-metadata">tuple metadata</a> record for the empty tuple</li>
<li>1 argument: the first and only argument&#8217;s metadata record</li>
<li>&gt;1 argument: a <a class="reference internal" href="#tuple-metadata">tuple metadata</a> record containing the arguments</li>
</ul>
</li>
</ul>
</div>
<div class="section" id="protocol-metadata">
<h3><a class="toc-backref" href="#id21">Protocol Metadata</a><a class="headerlink" href="#protocol-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, protocol metadata records
contain the following fields:</p>
<ul>
<li><p class="first">A <strong>layout flags</strong> word is stored at <strong>offset 1</strong>. The bits of this word
describe the <a class="reference internal" href="#existential-container-layout">existential container layout</a> used to represent
values of the type. The word is laid out as follows:</p>
<ul class="simple">
<li>The <strong>number of witness tables</strong> is stored in the least significant 31 bits.
Values of the protocol type contain this number of witness table pointers
in their layout.</li>
<li>The <strong>class constraint</strong> is stored at bit 31. This bit is set if the type
is <strong>not</strong> class-constrained, meaning that struct, enum, or class values
can be stored in the type. If not set, then only class values can be stored
in the type, and the type uses a more efficient layout.</li>
</ul>
<p>Note that the field is pointer-sized, even though only the lowest 32 bits are
currently inhabited on all platforms. These values can be derived from the
<a class="reference internal" href="#protocol-descriptor">protocol descriptor</a> records, but are pre-calculated for convenience.</p>
</li>
<li><p class="first">The <strong>number of protocols</strong> that make up the protocol composition is stored at
<strong>offset 2</strong>. For the &#8220;any&#8221; types <code class="docutils literal"><span class="pre">protocol&lt;&gt;</span></code> or <code class="docutils literal"><span class="pre">protocol&lt;class&gt;</span></code>, this
is zero. For a single-protocol type <code class="docutils literal"><span class="pre">P</span></code>, this is one. For a protocol
composition type <code class="docutils literal"><span class="pre">protocol&lt;P,</span> <span class="pre">Q,</span> <span class="pre">...&gt;</span></code>, this is the number of protocols.</p>
</li>
<li><p class="first">The <strong>protocol descriptor vector</strong> begins at <strong>offset 3</strong>. This is an inline
array of pointers to the <a class="reference internal" href="#protocol-descriptor">protocol descriptor</a> for every protocol in the
composition, or the single protocol descriptor for a protocol type. For
an &#8220;any&#8221; type, there is no protocol descriptor vector.</p>
</li>
</ul>
</div>
<div class="section" id="metatype-metadata">
<h3><a class="toc-backref" href="#id22">Metatype Metadata</a><a class="headerlink" href="#metatype-metadata" title="Permalink to this headline"></a></h3>
<p>In addition to the <a class="reference internal" href="#common-metadata-layout">common metadata layout</a> fields, metatype metadata records
contain the following fields:</p>
<ul class="simple">
<li>A reference to the metadata record for the <strong>instance type</strong> that the metatype
represents is stored at <strong>offset 1</strong>.</li>
</ul>
</div>
<div class="section" id="class-metadata">
<h3><a class="toc-backref" href="#id23">Class Metadata</a><a class="headerlink" href="#class-metadata" title="Permalink to this headline"></a></h3>
<p>Class metadata is designed to interoperate with Objective-C; all class metadata
records are also valid Objective-C <code class="docutils literal"><span class="pre">Class</span></code> objects. Class metadata pointers
are used as the values of class metatypes, so a derived class&#8217;s metadata
record also serves as a valid class metatype value for all of its ancestor
classes.</p>
<ul>
<li><p class="first">The <strong>destructor pointer</strong> is stored at <strong>offset -2</strong> from the metadata
pointer, behind the value witness table. This function is invoked by Swift&#8217;s
deallocator when the class instance is destroyed.</p>
</li>
<li><p class="first">The <strong>isa pointer</strong> pointing to the class&#8217;s Objective-C-compatible metaclass
record is stored at <strong>offset 0</strong>, in place of an integer kind discriminator.</p>
</li>
<li><p class="first">The <strong>super pointer</strong> pointing to the metadata record for the superclass is
stored at <strong>offset 1</strong>. If the class is a root class, it is null.</p>
</li>
<li><p class="first">Two words are reserved for use by the Objective-C runtime at <strong>offset 2</strong>
and <strong>offset 3</strong>.</p>
</li>
<li><p class="first">The <strong>rodata pointer</strong> is stored at <strong>offset 4</strong>; it points to an Objective-C
compatible rodata record for the class. This pointer value includes a tag.
The <strong>low bit is always set to 1</strong> for Swift classes and always set to 0 for
Objective-C classes.</p>
</li>
<li><p class="first">The <strong>class flags</strong> are a 32-bit field at <strong>offset 5</strong>.</p>
</li>
<li><p class="first">The <strong>instance address point</strong> is a 32-bit field following the class flags.
A pointer to an instance of this class points this number of bytes after the
beginning of the instance.</p>
</li>
<li><p class="first">The <strong>instance size</strong> is a 32-bit field following the instance address point.
This is the number of bytes of storage present in every object of this type.</p>
</li>
<li><p class="first">The <strong>instance alignment mask</strong> is a 16-bit field following the instance size.
This is a set of low bits which must not be set in a pointer to an instance
of this class.</p>
</li>
<li><p class="first">The <strong>runtime-reserved field</strong> is a 16-bit field following the instance
alignment mask.  The compiler initializes this to zero.</p>
</li>
<li><p class="first">The <strong>class object size</strong> is a 32-bit field following the runtime-reserved
field.  This is the total number of bytes of storage in the class metadata
object.</p>
</li>
<li><p class="first">The <strong>class object address point</strong> is a 32-bit field following the class
object size.  This is the number of bytes of storage in the class metadata
object.</p>
</li>
<li><p class="first">The <a class="reference internal" href="#nominal-type-descriptor">nominal type descriptor</a> for the most-derived class type is referenced
at an offset immediately following the class object address point. This is
<strong>offset 8</strong> on a 64-bit platform or <strong>offset 11</strong> on a 32-bit platform.</p>
</li>
<li><p class="first">For each Swift class in the class&#8217;s inheritance hierarchy, in order starting
from the root class and working down to the most derived class, the following
fields are present:</p>
<ul>
<li><p class="first">First, a reference to the <strong>parent</strong> metadata record is stored.
For classes that are members of an enclosing nominal type, this is a
reference to the enclosing type&#8217;s metadata. For top-level classes, this is
null.</p>
<p>TODO: The parent pointer is currently always null.</p>
</li>
<li><p class="first">If the class is generic, its <a class="reference internal" href="#generic-parameter-vector">generic parameter vector</a> is stored inline.</p>
</li>
<li><p class="first">The <strong>vtable</strong> is stored inline and contains a function pointer to the
implementation of every method of the class in declaration order.</p>
</li>
<li><p class="first">If the layout of a class instance is dependent on its generic parameters,
then a <strong>field offset vector</strong> is stored inline, containing offsets in
bytes from an instance pointer to each field of the class in declaration
order. (For classes with fixed layout, the field offsets are accessible
statically from global variables, similar to Objective-C ivar offsets.)</p>
</li>
</ul>
<p>Note that none of these fields are present for Objective-C base classes in
the inheritance hierarchy.</p>
</li>
</ul>
</div>
<div class="section" id="generic-parameter-vector">
<h3><a class="toc-backref" href="#id24">Generic Parameter Vector</a><a class="headerlink" href="#generic-parameter-vector" title="Permalink to this headline"></a></h3>
<p>Metadata records for instances of generic types contain information about their
generic parameters. For each parameter of the type, a reference to the metadata
record for the type argument is stored.  After all of the type argument
metadata references, for each type parameter, if there are protocol
requirements on that type parameter, a reference to the witness table for each
protocol it is required to conform to is stored in declaration order.</p>
<p>For example, given a generic type with the parameters <code class="docutils literal"><span class="pre">&lt;T,</span> <span class="pre">U,</span> <span class="pre">V&gt;</span></code>, its
generic parameter record will consist of references to the metadata records
for <code class="docutils literal"><span class="pre">T</span></code>, <code class="docutils literal"><span class="pre">U</span></code>, and <code class="docutils literal"><span class="pre">V</span></code> in succession, as if laid out in a C struct:</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="kd">struct </span><span class="nc">GenericParameterVector</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="n">TypeMetadata</span><span class="w"> </span><span class="o">*</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">U</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">V</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</div>
<p>If we add protocol requirements to the parameters, for example,
<code class="docutils literal"><span class="pre">&lt;T:</span> <span class="pre">Runcible,</span> <span class="pre">U:</span> <span class="pre">protocol&lt;Fungible,</span> <span class="pre">Ansible&gt;,</span> <span class="pre">V&gt;</span></code>, then the type&#8217;s generic
parameter vector contains witness tables for those protocols, as if laid out:</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="kd">struct </span><span class="nc">GenericParameterVector</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="n">TypeMetadata</span><span class="w"> </span><span class="o">*</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">U</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">V</span><span class="p">;</span>
<span class="w">  </span><span class="n">RuncibleWitnessTable</span><span class="w"> </span><span class="o">*</span><span class="n">T_Runcible</span><span class="p">;</span>
<span class="w">  </span><span class="n">FungibleWitnessTable</span><span class="w"> </span><span class="o">*</span><span class="n">U_Fungible</span><span class="p">;</span>
<span class="w">  </span><span class="n">AnsibleWitnessTable</span><span class="w"> </span><span class="o">*</span><span class="n">U_Ansible</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</div>
</div>
<div class="section" id="nominal-type-descriptor">
<h3><a class="toc-backref" href="#id25">Nominal Type Descriptor</a><a class="headerlink" href="#nominal-type-descriptor" title="Permalink to this headline"></a></h3>
<p>The metadata records for class, struct, and enum types contain a pointer to a
<strong>nominal type descriptor</strong>, which contains basic information about the nominal
type such as its name, members, and metadata layout. For a generic type, one
nominal type descriptor is shared for all instantiations of the type. The
layout is as follows:</p>
<ul class="simple">
<li>The <strong>kind</strong> of type is stored at <strong>offset 0</strong>, which is as follows:<ul>
<li><strong>0</strong> for a class,</li>
<li><strong>1</strong> for a struct, or</li>
<li><strong>2</strong> for an enum.</li>
</ul>
</li>
<li>The mangled <strong>name</strong> is referenced as a null-terminated C string at
<strong>offset 1</strong>. This name includes no bound generic parameters.</li>
<li>The following four fields depend on the kind of nominal type.<ul>
<li>For a struct or class:<ul>
<li>The <strong>number of fields</strong> is stored at <strong>offset 2</strong>. This is the length
of the field offset vector in the metadata record, if any.</li>
<li>The <strong>offset to the field offset vector</strong> is stored at <strong>offset 3</strong>.
This is the offset in pointer-sized words of the field offset vector for
the type in the metadata record. If no field offset vector is stored
in the metadata record, this is zero.</li>
<li>The <strong>field names</strong> are referenced as a doubly-null-terminated list of
C strings at <strong>offset 4</strong>. The order of names corresponds to the order
of fields in the field offset vector.</li>
<li>The <strong>field type accessor</strong> is a function pointer at <strong>offset 5</strong>. If
non-null, the function takes a pointer to an instance of type metadata
for the nominal type, and returns a pointer to an array of type metadata
references for the types of the fields of that instance. The order matches
that of the field offset vector and field name list.</li>
</ul>
</li>
<li>For an enum:<ul>
<li>The <strong>number of payload cases</strong> and <strong>payload size offset</strong> are stored
at <strong>offset 2</strong>. The least significant 24 bits are the number of payload
cases, and the most significant 8 bits are the offset of the payload
size in the type metadata, if present.</li>
<li>The <strong>number of no-payload cases</strong> is stored at <strong>offset 3</strong>.</li>
<li>The <strong>case names</strong> are referenced as a doubly-null-terminated list of
C strings at <strong>offset 4</strong>. The names are ordered such that payload cases
come first, followed by no-payload cases. Within each half of the list,
the order of names corresponds to the order of cases in the enum
declaration.</li>
<li>The <strong>case type accessor</strong> is a function pointer at <strong>offset 5</strong>. If
non-null, the function takes a pointer to an instance of type metadata
for the enum, and returns a pointer to an array of type metadata
references for the types of the cases of that instance. The order matches
that of the case name list. This function is similar to the field type
accessor for a struct, except also the least significant bit of each
element in the result is set if the enum case is an <strong>indirect case</strong>.</li>
</ul>
</li>
</ul>
</li>
<li>If the nominal type is generic, a pointer to the <strong>metadata pattern</strong> that
is used to form instances of the type is stored at <strong>offset 6</strong>. The pointer
is null if the type is not generic.</li>
<li>The <strong>generic parameter descriptor</strong> begins at <strong>offset 7</strong>. This describes
the layout of the generic parameter vector in the metadata record:<ul>
<li>The <strong>offset of the generic parameter vector</strong> is stored at <strong>offset 7</strong>.
This is the offset in pointer-sized words of the generic parameter vector
inside the metadata record. If the type is not generic, this is zero.</li>
<li>The <strong>number of type parameters</strong> is stored at <strong>offset 8</strong>. This count
includes associated types of type parameters with protocol constraints.</li>
<li>The <strong>number of type parameters</strong> is stored at <strong>offset 9</strong>. This count
includes only the primary formal type parameters.</li>
<li>For each type parameter <strong>n</strong>, the following fields are stored:<ul>
<li>The <strong>number of witnesses</strong> for the type parameter is stored at
<strong>offset 10+n</strong>. This is the number of witness table pointers that are
stored for the type parameter in the generic parameter vector.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Note that there is no nominal type descriptor for protocols or protocol types.
See the <a class="reference internal" href="#protocol-descriptor">protocol descriptor</a> description below.</p>
</div>
<div class="section" id="protocol-descriptor">
<h3><a class="toc-backref" href="#id26">Protocol Descriptor</a><a class="headerlink" href="#protocol-descriptor" title="Permalink to this headline"></a></h3>
<p><cite>Protocol metadata</cite> contains references to zero, one, or more <strong>protocol
descriptors</strong> that describe the protocols values of the type are required to
conform to. The protocol descriptor is laid out to be compatible with
Objective-C <code class="docutils literal"><span class="pre">Protocol</span></code> objects. The layout is as follows:</p>
<ul class="simple">
<li>An <strong>isa</strong> placeholder is stored at <strong>offset 0</strong>. This field is populated by
the Objective-C runtime.</li>
<li>The mangled <strong>name</strong> is referenced as a null-terminated C string at
<strong>offset 1</strong>.</li>
<li>If the protocol inherits one or more other protocols, a pointer to the
<strong>inherited protocols list</strong> is stored at <strong>offset 2</strong>. The list starts with
the number of inherited protocols as a pointer-sized integer, and is followed
by that many protocol descriptor pointers. If the protocol inherits no other
protocols, this pointer is null.</li>
<li>For an ObjC-compatible protocol, its <strong>required instance methods</strong> are stored
at <strong>offset 3</strong> as an ObjC-compatible method list. This is null for native
Swift protocols.</li>
<li>For an ObjC-compatible protocol, its <strong>required class methods</strong> are stored
at <strong>offset 4</strong> as an ObjC-compatible method list. This is null for native
Swift protocols.</li>
<li>For an ObjC-compatible protocol, its <strong>optional instance methods</strong> are stored
at <strong>offset 5</strong> as an ObjC-compatible method list. This is null for native
Swift protocols.</li>
<li>For an ObjC-compatible protocol, its <strong>optional class methods</strong> are stored
at <strong>offset 6</strong> as an ObjC-compatible method list. This is null for native
Swift protocols.</li>
<li>For an ObjC-compatible protocol, its <strong>instance properties</strong> are stored
at <strong>offset 7</strong> as an ObjC-compatible property list. This is null for native
Swift protocols.</li>
<li>The <strong>size</strong> of the protocol descriptor record is stored as a 32-bit integer
at <strong>offset 8</strong>. This is currently 72 on 64-bit platforms and 40 on 32-bit
platforms.</li>
<li><strong>Flags</strong> are stored as a 32-bit integer after the size. The following bits
are currently used (counting from least significant bit zero):<ul>
<li><strong>Bit 0</strong> is the <strong>Swift bit</strong>. It is set for all protocols defined in
Swift and unset for protocols defined in Objective-C.</li>
<li><strong>Bit 1</strong> is the <strong>class constraint bit</strong>. It is set if the protocol is
<strong>not</strong> class-constrained, meaning that any struct, enum, or class type
may conform to the protocol. It is unset if only classes can conform to
the protocol. (The inverted meaning is for compatibility with Objective-C
protocol records, in which the bit is never set. Objective-C protocols can
only be conformed to by classes.)</li>
<li><strong>Bit 2</strong> is the <strong>witness table bit</strong>. It is set if dispatch to the
protocol&#8217;s methods is done through a witness table, which is either passed
as an extra parameter to generic functions or included in the <a class="reference internal" href="#existential-container-layout">existential
container layout</a> of protocol types. It is unset if dispatch is done
through <code class="docutils literal"><span class="pre">objc_msgSend</span></code> and requires no additional information to accompany
a value of conforming type.</li>
<li><strong>Bit 31</strong> is set by the Objective-C runtime when it has done its
initialization of the protocol record. It is unused by the Swift runtime.</li>
</ul>
</li>
</ul>
</div>
</div>
<div class="section" id="heap-objects">
<h2><a class="toc-backref" href="#id27">Heap Objects</a><a class="headerlink" href="#heap-objects" title="Permalink to this headline"></a></h2>
<div class="section" id="heap-metadata">
<h3><a class="toc-backref" href="#id28">Heap Metadata</a><a class="headerlink" href="#heap-metadata" title="Permalink to this headline"></a></h3>
</div>
<div class="section" id="heap-object-header">
<h3><a class="toc-backref" href="#id29">Heap Object Header</a><a class="headerlink" href="#heap-object-header" title="Permalink to this headline"></a></h3>
</div>
</div>
<div class="section" id="mangling">
<h2><a class="toc-backref" href="#id30">Mangling</a><a class="headerlink" href="#mangling" title="Permalink to this headline"></a></h2>
<div class="highlight-swift"><div class="highlight"><pre>mangled-name ::= &#39;_T&#39; global
</pre></div>
</div>
<p>All Swift-mangled names begin with this prefix.</p>
<div class="section" id="globals">
<h3><a class="toc-backref" href="#id31">Globals</a><a class="headerlink" href="#globals" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>global ::= &#39;t&#39; type                    // standalone type (for DWARF)
global ::= &#39;M&#39; type                    // type metadata (address point)
                                       // -- type starts with [BCOSTV]
global ::= &#39;Mf&#39; type                   // &#39;full&#39; type metadata (start of object)
global ::= &#39;MP&#39; type                   // type metadata pattern
global ::= &#39;Ma&#39; type                   // type metadata access function
global ::= &#39;ML&#39; type                   // type metadata lazy cache variable
global ::= &#39;Mm&#39; type                   // class metaclass
global ::= &#39;Mn&#39; nominal-type           // nominal type descriptor
global ::= &#39;Mp&#39; protocol               // protocol descriptor
global ::= &#39;PA&#39; .*                     // partial application forwarder
global ::= &#39;PAo&#39; .*                    // ObjC partial application forwarder
global ::= &#39;w&#39; value-witness-kind type // value witness
global ::= &#39;Wa&#39; protocol-conformance   // protocol witness table accessor
global ::= &#39;WG&#39; protocol-conformance   // generic protocol witness table
global ::= &#39;WI&#39; protocol-conformance   // generic protocol witness table instantiation function
global ::= &#39;Wl&#39; type protocol-conformance // lazy protocol witness table accessor
global ::= &#39;WL&#39; protocol-conformance   // lazy protocol witness table cache variable
global ::= &#39;Wo&#39; entity                 // witness table offset
global ::= &#39;WP&#39; protocol-conformance   // protocol witness table
global ::= &#39;Wt&#39; protocol-conformance identifier // associated type metadata accessor
global ::= &#39;WT&#39; protocol-conformance identifier nominal-type // associated type witness table accessor
global ::= &#39;Wv&#39; directness entity      // field offset
global ::= &#39;WV&#39; type                   // value witness table
global ::= entity                      // some identifiable thing
global ::= &#39;TO&#39; global                 // ObjC-as-swift thunk
global ::= &#39;To&#39; global                 // swift-as-ObjC thunk
global ::= &#39;TD&#39; global                 // dynamic dispatch thunk
global ::= &#39;Td&#39; global                 // direct method reference thunk
global ::= &#39;TR&#39; reabstract-signature   // reabstraction thunk helper function
global ::= &#39;Tr&#39; reabstract-signature   // reabstraction thunk

global ::= &#39;TS&#39; specializationinfo &#39;_&#39; mangled-name
specializationinfo ::= &#39;g&#39; passid (type protocol-conformance* &#39;_&#39;)+            // Generic specialization info.
specializationinfo ::= &#39;f&#39; passid (funcspecializationarginfo &#39;_&#39;)+             // Function signature specialization kind
passid ::= integer                                                             // The id of the pass that generated this specialization.
funcsigspecializationarginfo ::= &#39;cl&#39; closurename type*                        // Closure specialized with closed over types in argument order.
funcsigspecializationarginfo ::= &#39;n&#39;                                           // Unmodified argument
funcsigspecializationarginfo ::= &#39;cp&#39; funcsigspecializationconstantproppayload // Constant propagated argument
funcsigspecializationarginfo ::= &#39;d&#39;                                           // Dead argument
funcsigspecializationarginfo ::= &#39;g&#39; &#39;s&#39;?                                      // Owned =&gt; Guaranteed and Exploded if &#39;s&#39; present.
funcsigspecializationarginfo ::= &#39;s&#39;                                           // Exploded
funcsigspecializationarginfo ::= &#39;k&#39;                                           // Exploded
funcsigspecializationconstantpropinfo ::= &#39;fr&#39; mangled-name
funcsigspecializationconstantpropinfo ::= &#39;g&#39; mangled-name
funcsigspecializationconstantpropinfo ::= &#39;i&#39; 64-bit-integer
funcsigspecializationconstantpropinfo ::= &#39;fl&#39; float-as-64-bit-integer
funcsigspecializationconstantpropinfo ::= &#39;se&#39; stringencoding &#39;v&#39; md5hash

global ::= &#39;TV&#39; global                 // vtable override thunk
global ::= &#39;TW&#39; protocol-conformance entity
                                       // protocol witness thunk
entity ::= nominal-type                // named type declaration
entity ::= static? entity-kind context entity-name
entity-kind ::= &#39;F&#39;                    // function (ctor, accessor, etc.)
entity-kind ::= &#39;v&#39;                    // variable (let/var)
entity-kind ::= &#39;i&#39;                    // subscript (&#39;i&#39;ndex) itself (not the individual accessors)
entity-kind ::= &#39;I&#39;                    // initializer
entity-name ::= decl-name type         // named declaration
entity-name ::= &#39;A&#39; index              // default argument generator
entity-name ::= &#39;a&#39; addressor-kind decl-name type     // mutable addressor
entity-name ::= &#39;C&#39; type               // allocating constructor
entity-name ::= &#39;c&#39; type               // non-allocating constructor
entity-name ::= &#39;D&#39;                    // deallocating destructor; untyped
entity-name ::= &#39;d&#39;                    // non-deallocating destructor; untyped
entity-name ::= &#39;g&#39; decl-name type     // getter
entity-name ::= &#39;i&#39;                    // non-local variable initializer
entity-name ::= &#39;l&#39; addressor-kind decl-name type     // non-mutable addressor
entity-name ::= &#39;m&#39; decl-name type     // materializeForSet
entity-name ::= &#39;s&#39; decl-name type     // setter
entity-name ::= &#39;U&#39; index type         // explicit anonymous closure expression
entity-name ::= &#39;u&#39; index type         // implicit anonymous closure
entity-name ::= &#39;w&#39; decl-name type     // willSet
entity-name ::= &#39;W&#39; decl-name type     // didSet
static ::= &#39;Z&#39;                         // entity is a static member of a type
decl-name ::= identifier
decl-name ::= local-decl-name
decl-name ::= private-decl-name
local-decl-name ::= &#39;L&#39; index identifier  // locally-discriminated declaration
private-decl-name ::= &#39;P&#39; identifier identifier  // file-discriminated declaration
reabstract-signature ::= (&#39;G&#39; generic-signature)? type type
addressor-kind ::= &#39;u&#39;                 // unsafe addressor (no owner)
addressor-kind ::= &#39;O&#39;                 // owning addressor (non-native owner)
addressor-kind ::= &#39;o&#39;                 // owning addressor (native owner)
addressor-kind ::= &#39;p&#39;                 // pinning addressor (native owner)
</pre></div>
</div>
<p>An <code class="docutils literal"><span class="pre">entity</span></code> starts with a <code class="docutils literal"><span class="pre">nominal-type-kind</span></code> (<code class="docutils literal"><span class="pre">[COPV]</span></code>), a
substitution (<code class="docutils literal"><span class="pre">[Ss]</span></code>) of a nominal type, or an <code class="docutils literal"><span class="pre">entity-kind</span></code>
(<code class="docutils literal"><span class="pre">[FIiv]</span></code>).</p>
<p>An <code class="docutils literal"><span class="pre">entity-name</span></code> starts with <code class="docutils literal"><span class="pre">[AaCcDggis]</span></code> or a <code class="docutils literal"><span class="pre">decl-name</span></code>.
A <code class="docutils literal"><span class="pre">decl-name</span></code> starts with <code class="docutils literal"><span class="pre">[LP]</span></code> or an <code class="docutils literal"><span class="pre">identifier</span></code> (<code class="docutils literal"><span class="pre">[0-9oX]</span></code>).</p>
<p>A <code class="docutils literal"><span class="pre">context</span></code> starts with either an <code class="docutils literal"><span class="pre">entity</span></code>, an <code class="docutils literal"><span class="pre">extension</span></code> (which starts
with <code class="docutils literal"><span class="pre">[Ee]</span></code>), or a <code class="docutils literal"><span class="pre">module</span></code>, which might be an <code class="docutils literal"><span class="pre">identifier</span></code> (<code class="docutils literal"><span class="pre">[0-9oX]</span></code>)
or a substitution of a module (<code class="docutils literal"><span class="pre">[Ss]</span></code>).</p>
<p>A global mangling starts with an <code class="docutils literal"><span class="pre">entity</span></code> or <code class="docutils literal"><span class="pre">[MTWw]</span></code>.</p>
<p>If a partial application forwarder is for a static symbol, its name will
start with the sequence <code class="docutils literal"><span class="pre">_TPA_</span></code> followed by the mangled symbol name of the
forwarder&#8217;s destination.</p>
<p>A generic specialization mangling consists of a header, specifying the types
and conformances used to specialize the generic function, followed by the
full mangled name of the original unspecialized generic symbol.</p>
<p>The first identifier in a <code class="docutils literal"><span class="pre">&lt;private-decl-name&gt;</span></code> is a string that represents
the file the original declaration came from. It should be considered unique
within the enclosing module. The second identifier is the name of the entity.</p>
<p>Not all declarations marked <code class="docutils literal"><span class="pre">private</span></code> declarations will use the
<code class="docutils literal"><span class="pre">&lt;private-decl-name&gt;</span></code> mangling; if the entity&#8217;s context is enough to uniquely
identify the entity, the simple <code class="docutils literal"><span class="pre">identifier</span></code> form is preferred.</p>
<p>The types in a <code class="docutils literal"><span class="pre">&lt;reabstract-signature&gt;</span></code> are always non-polymorphic
<code class="docutils literal"><span class="pre">&lt;impl-function-type&gt;</span></code> types.</p>
</div>
<div class="section" id="direct-and-indirect-symbols">
<h3><a class="toc-backref" href="#id32">Direct and Indirect Symbols</a><a class="headerlink" href="#direct-and-indirect-symbols" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>directness ::= &#39;d&#39;                         // direct
directness ::= &#39;i&#39;                         // indirect
</pre></div>
</div>
<p>A direct symbol resolves directly to the address of an object.  An
indirect symbol resolves to the address of a pointer to the object.
They are distinct manglings to make a certain class of bugs
immediately obvious.</p>
<p>The terminology is slightly overloaded when discussing offsets.  A
direct offset resolves to a variable holding the true offset.  An
indirect offset resolves to a variable holding an offset to be applied
to type metadata to get the address of the true offset.  (Offset
variables are required when the object being accessed lies within a
resilient structure.  When the layout of the object may depend on
generic arguments, these offsets must be kept in metadata.  Indirect
field offsets are therefore required when accessing fields in generic
types where the metadata itself has unknown layout.)</p>
</div>
<div class="section" id="declaration-contexts">
<h3><a class="toc-backref" href="#id33">Declaration Contexts</a><a class="headerlink" href="#declaration-contexts" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>context ::= module
context ::= extension
context ::= entity
module ::= substitution                    // other substitution
module ::= identifier                      // module name
module ::= known-module                    // abbreviation
extension ::= &#39;E&#39; module entity
extension ::= &#39;e&#39; module generic-signature entity
</pre></div>
</div>
<p>These manglings identify the enclosing context in which an entity was declared,
such as its enclosing module, function, or nominal type.</p>
<p>An <code class="docutils literal"><span class="pre">extension</span></code> mangling is used whenever an entity&#8217;s declaration context is
an extension <em>and</em> the entity being extended is in a different module. In this
case the extension&#8217;s module is mangled first, followed by the entity being
extended. If the extension and the extended entity are in the same module, the
plain <code class="docutils literal"><span class="pre">entity</span></code> mangling is preferred. If the extension is constrained, the
constraints on the extension are mangled in its generic signature.</p>
<p>When mangling the context of a local entity within a constructor or
destructor, the non-allocating or non-deallocating variant is used.</p>
</div>
<div class="section" id="types">
<h3><a class="toc-backref" href="#id34">Types</a><a class="headerlink" href="#types" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>type ::= &#39;Bb&#39;                              // Builtin.BridgeObject
type ::= &#39;BB&#39;                              // Builtin.UnsafeValueBuffer
type ::= &#39;Bf&#39; natural &#39;_&#39;                  // Builtin.Float&lt;n&gt;
type ::= &#39;Bi&#39; natural &#39;_&#39;                  // Builtin.Int&lt;n&gt;
type ::= &#39;BO&#39;                              // Builtin.UnknownObject
type ::= &#39;Bo&#39;                              // Builtin.NativeObject
type ::= &#39;Bp&#39;                              // Builtin.RawPointer
type ::= &#39;Bv&#39; natural type                 // Builtin.Vec&lt;n&gt;x&lt;type&gt;
type ::= &#39;Bw&#39;                              // Builtin.Word
type ::= nominal-type
type ::= associated-type
type ::= &#39;a&#39; context identifier            // Type alias (DWARF only)
type ::= &#39;b&#39; type type                     // objc block function type
type ::= &#39;c&#39; type type                     // C function pointer type
type ::= &#39;F&#39; throws-annotation? type type  // function type
type ::= &#39;f&#39; throws-annotation? type type  // uncurried function type
type ::= &#39;G&#39; type &lt;type&gt;+ &#39;_&#39;              // generic type application
type ::= &#39;K&#39; type type                     // @auto_closure function type
type ::= &#39;M&#39; type                          // metatype without representation
type ::= &#39;XM&#39; metatype-repr type           // metatype with representation
type ::= &#39;P&#39; protocol-list &#39;_&#39;             // protocol type
type ::= &#39;PM&#39; type                         // existential metatype without representation
type ::= &#39;XPM&#39; metatype-repr type          // existential metatype with representation
type ::= archetype
type ::= &#39;R&#39; type                          // inout
type ::= &#39;T&#39; tuple-element* &#39;_&#39;            // tuple
type ::= &#39;t&#39; tuple-element* &#39;_&#39;            // variadic tuple
type ::= &#39;Xo&#39; type                         // @unowned type
type ::= &#39;Xu&#39; type                         // @unowned(unsafe) type
type ::= &#39;Xw&#39; type                         // @weak type
type ::= &#39;XF&#39; impl-function-type           // function implementation type
type ::= &#39;Xf&#39; type type                    // @thin function type
type ::= &#39;Xb&#39; type                         // SIL @box type
nominal-type ::= known-nominal-type
nominal-type ::= substitution
nominal-type ::= nominal-type-kind declaration-name
nominal-type-kind ::= &#39;C&#39;                  // class
nominal-type-kind ::= &#39;O&#39;                  // enum
nominal-type-kind ::= &#39;V&#39;                  // struct
declaration-name ::= context decl-name
archetype ::= &#39;Q&#39; index                    // archetype with depth=0, idx=N
archetype ::= &#39;Qd&#39; index index             // archetype with depth=M+1, idx=N
archetype ::= associated-type
archetype ::= qualified-archetype
associated-type ::= substitution
associated-type ::= &#39;Q&#39; protocol-context     // self type of protocol
associated-type ::= &#39;Q&#39; archetype identifier // associated type
qualified-archetype ::= &#39;Qq&#39; index context   // archetype+context (DWARF only)
protocol-context ::= &#39;P&#39; protocol
tuple-element ::= identifier? type
metatype-repr ::= &#39;t&#39;                      // Thin metatype representation
metatype-repr ::= &#39;T&#39;                      // Thick metatype representation
metatype-repr ::= &#39;o&#39;                      // ObjC metatype representation
throws-annotation ::= &#39;z&#39;                  // &#39;throws&#39; annotation on function types


type ::= &#39;u&#39; generic-signature type        // generic type
type ::= &#39;x&#39;                               // generic param, depth=0, idx=0
type ::= &#39;q&#39; generic-param-index           // dependent generic parameter
type ::= &#39;q&#39; type assoc-type-name          // associated type of non-generic param
type ::= &#39;w&#39; generic-param-index assoc-type-name // associated type
type ::= &#39;W&#39; generic-param-index assoc-type-name+ &#39;_&#39; // associated type at depth

generic-param-index ::= &#39;x&#39;                // depth = 0,   idx = 0
generic-param-index ::= index              // depth = 0,   idx = N+1
generic-param-index ::= &#39;d&#39; index index    // depth = M+1, idx = N
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;type&gt;</span></code> never begins or ends with a number.
<code class="docutils literal"><span class="pre">&lt;type&gt;</span></code> never begins with an underscore.
<code class="docutils literal"><span class="pre">&lt;type&gt;</span></code> never begins with <code class="docutils literal"><span class="pre">d</span></code>.
<code class="docutils literal"><span class="pre">&lt;type&gt;</span></code> never begins with <code class="docutils literal"><span class="pre">z</span></code>.</p>
<p>Note that protocols mangle differently as types and as contexts. A protocol
context always consists of a single protocol name and so mangles without a
trailing underscore. A protocol type can have zero, one, or many protocol bounds
which are juxtaposed and terminated with a trailing underscore.</p>
<div class="highlight-swift"><div class="highlight"><pre>assoc-type-name ::= (&#39;P&#39; protocol-name)? identifier
assoc-type-name ::= substitution
</pre></div>
</div>
<p>Associated types use an abbreviated mangling when the base generic parameter
or associated type is constrained by a single protocol requirement. The
associated type in this case can be referenced unambiguously by name alone.
If the base has multiple conformance constraints, then the protocol name is
mangled in to disambiguate.</p>
<div class="highlight-swift"><div class="highlight"><pre>impl-function-type ::=
  impl-callee-convention impl-function-attribute* generic-signature? &#39;_&#39;
  impl-parameter* &#39;_&#39; impl-result* &#39;_&#39;
impl-callee-convention ::= &#39;t&#39;              // thin
impl-callee-convention ::= impl-convention  // thick, callee transferred with given convention
impl-convention ::= &#39;a&#39;                     // direct, autoreleased
impl-convention ::= &#39;d&#39;                     // direct, no ownership transfer
impl-convention ::= &#39;D&#39;                     // direct, no ownership transfer,
                                            // dependent on &#39;self&#39; parameter
impl-convention ::= &#39;g&#39;                     // direct, guaranteed
impl-convention ::= &#39;e&#39;                     // direct, deallocating
impl-convention ::= &#39;i&#39;                     // indirect, ownership transfer
impl-convention ::= &#39;l&#39;                     // indirect, inout
impl-convention ::= &#39;G&#39;                     // indirect, guaranteed
impl-convention ::= &#39;o&#39;                     // direct, ownership transfer
impl-convention ::= &#39;z&#39; impl-convention     // error result
impl-function-attribute ::= &#39;Cb&#39;            // compatible with C block invocation function
impl-function-attribute ::= &#39;Cc&#39;            // compatible with C global function
impl-function-attribute ::= &#39;Cm&#39;            // compatible with Swift method
impl-function-attribute ::= &#39;CO&#39;            // compatible with ObjC method
impl-function-attribute ::= &#39;Cw&#39;            // compatible with protocol witness
impl-function-attribute ::= &#39;N&#39;             // noreturn
impl-function-attribute ::= &#39;G&#39;             // generic
impl-function-attribute ::= &#39;g&#39;             // pseudogeneric
impl-parameter ::= impl-convention type
impl-result ::= impl-convention type
</pre></div>
</div>
<p>For the most part, manglings follow the structure of formal language
types.  However, in some cases it is more useful to encode the exact
implementation details of a function type.</p>
<p>Any <code class="docutils literal"><span class="pre">&lt;impl-function-attribute&gt;</span></code> productions must appear in the order
in which they are specified above: e.g. a noreturn C function is
mangled with <code class="docutils literal"><span class="pre">CcN</span></code>.  <code class="docutils literal"><span class="pre">g</span></code> and <code class="docutils literal"><span class="pre">G</span></code> are exclusive and mark the presence
of a generic signature immediately following.</p>
<p>Note that the convention and function-attribute productions do not
need to be disambiguated from the start of a <code class="docutils literal"><span class="pre">&lt;type&gt;</span></code>.</p>
</div>
<div class="section" id="generics">
<h3><a class="toc-backref" href="#id35">Generics</a><a class="headerlink" href="#generics" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>protocol-conformance ::= (&#39;u&#39; generic-signature)? type protocol module
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;protocol-conformance&gt;</span></code> refers to a type&#8217;s conformance to a protocol. The
named module is the one containing the extension or type declaration that
declared the conformance.</p>
<div class="highlight-swift"><div class="highlight"><pre>// Property behavior conformance
protocol-conformance ::= (&#39;u&#39; generic-signature)?
                         &#39;b&#39; identifier context identifier protocol
</pre></div>
</div>
<p>Property behaviors are implemented using private protocol conformances.</p>
<div class="highlight-swift"><div class="highlight"><pre>generic-signature ::= (generic-param-count+)? (&#39;R&#39; requirement*)? &#39;r&#39;
generic-param-count ::= &#39;z&#39;       // zero parameters
generic-param-count ::= index     // N+1 parameters
requirement ::= type-param protocol-name // protocol requirement
requirement ::= type-param type          // base class requirement
                                         // type starts with [CS]
requirement ::= type-param &#39;z&#39; type      // &#39;z&#39;ame-type requirement

// Special type mangling for type params that saves the initial &#39;q&#39; on
// generic params
type-param ::= generic-param-index       // generic parameter
type-param ::= &#39;w&#39; generic-param-index assoc-type-name // associated type
type-param ::= &#39;W&#39; generic-param-index assoc-type-name+ &#39;_&#39;
</pre></div>
</div>
<p>A generic signature begins by describing the number of generic parameters at
each depth of the signature, followed by the requirements. As a special case,
no <code class="docutils literal"><span class="pre">generic-param-count</span></code> values indicates a single generic parameter at
the outermost depth:</p>
<div class="highlight-swift"><div class="highlight"><pre><span class="n">urFq_q_</span><span class="w">                           </span><span class="c1">// &lt;T_0_0&gt; T_0_0 -&gt; T_0_0</span>
<span class="n">u_0_rFq_qd_0_</span><span class="w">                     </span><span class="c1">// &lt;T_0_0&gt;&lt;T_1_0, T_1_1&gt; T_0_0 -&gt; T_1_1</span>
</pre></div>
</div>
</div>
<div class="section" id="value-witnesses">
<h3><a class="toc-backref" href="#id36">Value Witnesses</a><a class="headerlink" href="#value-witnesses" title="Permalink to this headline"></a></h3>
<p>TODO: document these</p>
<div class="highlight-swift"><div class="highlight"><pre>value-witness-kind ::= &#39;al&#39;           // allocateBuffer
value-witness-kind ::= &#39;ca&#39;           // assignWithCopy
value-witness-kind ::= &#39;ta&#39;           // assignWithTake
value-witness-kind ::= &#39;de&#39;           // deallocateBuffer
value-witness-kind ::= &#39;xx&#39;           // destroy
value-witness-kind ::= &#39;XX&#39;           // destroyBuffer
value-witness-kind ::= &#39;Xx&#39;           // destroyArray
value-witness-kind ::= &#39;CP&#39;           // initializeBufferWithCopyOfBuffer
value-witness-kind ::= &#39;Cp&#39;           // initializeBufferWithCopy
value-witness-kind ::= &#39;cp&#39;           // initializeWithCopy
value-witness-kind ::= &#39;TK&#39;           // initializeBufferWithTakeOfBuffer
value-witness-kind ::= &#39;Tk&#39;           // initializeBufferWithTake
value-witness-kind ::= &#39;tk&#39;           // initializeWithTake
value-witness-kind ::= &#39;pr&#39;           // projectBuffer
value-witness-kind ::= &#39;xs&#39;           // storeExtraInhabitant
value-witness-kind ::= &#39;xg&#39;           // getExtraInhabitantIndex
value-witness-kind ::= &#39;Cc&#39;           // initializeArrayWithCopy
value-witness-kind ::= &#39;Tt&#39;           // initializeArrayWithTakeFrontToBack
value-witness-kind ::= &#39;tT&#39;           // initializeArrayWithTakeBackToFront
value-witness-kind ::= &#39;ug&#39;           // getEnumTag
value-witness-kind ::= &#39;up&#39;           // destructiveProjectEnumData
value-witness-kind ::= &#39;ui&#39;           // destructiveInjectEnumTag
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;value-witness-kind&gt;</span></code> differentiates the kinds of value
witness functions for a type.</p>
</div>
<div class="section" id="identifiers">
<h3><a class="toc-backref" href="#id37">Identifiers</a><a class="headerlink" href="#identifiers" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>identifier ::= natural identifier-start-char identifier-char*
identifier ::= &#39;o&#39; operator-fixity natural operator-char+

operator-fixity ::= &#39;p&#39;                    // prefix operator
operator-fixity ::= &#39;P&#39;                    // postfix operator
operator-fixity ::= &#39;i&#39;                    // infix operator

operator-char ::= &#39;a&#39;                      // &amp; &#39;and&#39;
operator-char ::= &#39;c&#39;                      // @ &#39;commercial at&#39;
operator-char ::= &#39;d&#39;                      // / &#39;divide&#39;
operator-char ::= &#39;e&#39;                      // = &#39;equals&#39;
operator-char ::= &#39;g&#39;                      // &gt; &#39;greater&#39;
operator-char ::= &#39;l&#39;                      // &lt; &#39;less&#39;
operator-char ::= &#39;m&#39;                      // * &#39;multiply&#39;
operator-char ::= &#39;n&#39;                      // ! &#39;not&#39;
operator-char ::= &#39;o&#39;                      // | &#39;or&#39;
operator-char ::= &#39;p&#39;                      // + &#39;plus&#39;
operator-char ::= &#39;q&#39;                      // ? &#39;question&#39;
operator-char ::= &#39;r&#39;                      // % &#39;remainder&#39;
operator-char ::= &#39;s&#39;                      // - &#39;subtract&#39;
operator-char ::= &#39;t&#39;                      // ~ &#39;tilde&#39;
operator-char ::= &#39;x&#39;                      // ^ &#39;xor&#39;
operator-char ::= &#39;z&#39;                      // . &#39;zperiod&#39;
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;identifier&gt;</span></code> is run-length encoded: the natural indicates how many
characters follow.  Operator characters are mapped to letter characters as
given. In neither case can an identifier start with a digit, so
there&#8217;s no ambiguity with the run-length.</p>
<div class="highlight-swift"><div class="highlight"><pre>identifier ::= &#39;X&#39; natural identifier-start-char identifier-char*
identifier ::= &#39;X&#39; &#39;o&#39; operator-fixity natural identifier-char*
</pre></div>
</div>
<p>Identifiers that contain non-ASCII characters are encoded using the Punycode
algorithm specified in RFC 3492, with the modifications that <code class="docutils literal"><span class="pre">_</span></code> is used
as the encoding delimiter, and uppercase letters A through J are used in place
of digits 0 through 9 in the encoding character set. The mangling then
consists of an <code class="docutils literal"><span class="pre">X</span></code> followed by the run length of the encoded string and the
encoded string itself. For example, the identifier <code class="docutils literal"><span class="pre">vergüenza</span></code> is mangled
to <code class="docutils literal"><span class="pre">X12vergenza_JFa</span></code>. (The encoding in standard Punycode would be
<code class="docutils literal"><span class="pre">vergenza-95a</span></code>)</p>
<p>Operators that contain non-ASCII characters are mangled by first mapping the
ASCII operator characters to letters as for pure ASCII operator names, then
Punycode-encoding the substituted string. The mangling then consists of
<code class="docutils literal"><span class="pre">Xo</span></code> followed by the fixity, run length of the encoded string, and the encoded
string itself. For example, the infix operator <code class="docutils literal"><span class="pre">«+»</span></code> is mangled to
<code class="docutils literal"><span class="pre">Xoi7p_qcaDc</span></code> (<code class="docutils literal"><span class="pre">p_qcaDc</span></code> being the encoding of the substituted
string <code class="docutils literal"><span class="pre">«p»</span></code>).</p>
</div>
<div class="section" id="substitutions">
<h3><a class="toc-backref" href="#id38">Substitutions</a><a class="headerlink" href="#substitutions" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>substitution ::= &#39;S&#39; index
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;substitution&gt;</span></code> is a back-reference to a previously mangled entity. The mangling
algorithm maintains a mapping of entities to substitution indices as it runs.
When an entity that can be represented by a substitution (a module, nominal
type, or protocol) is mangled, a substitution is first looked for in the
substitution map, and if it is present, the entity is mangled using the
associated substitution index. Otherwise, the entity is mangled normally, and
it is then added to the substitution map and associated with the next
available substitution index.</p>
<p>For example, in mangling a function type
<code class="docutils literal"><span class="pre">(zim.zang.zung,</span> <span class="pre">zim.zang.zung,</span> <span class="pre">zim.zippity)</span> <span class="pre">-&gt;</span> <span class="pre">zim.zang.zoo</span></code> (with module
<code class="docutils literal"><span class="pre">zim</span></code> and class <code class="docutils literal"><span class="pre">zim.zang</span></code>),
the recurring contexts <code class="docutils literal"><span class="pre">zim</span></code>, <code class="docutils literal"><span class="pre">zim.zang</span></code>, and <code class="docutils literal"><span class="pre">zim.zang.zung</span></code>
will be mangled using substitutions after being mangled
for the first time. The first argument type will mangle in long form,
<code class="docutils literal"><span class="pre">CC3zim4zang4zung</span></code>, and in doing so, <code class="docutils literal"><span class="pre">zim</span></code> will acquire substitution <code class="docutils literal"><span class="pre">S_</span></code>,
<code class="docutils literal"><span class="pre">zim.zang</span></code> will acquire substitution <code class="docutils literal"><span class="pre">S0_</span></code>, and <code class="docutils literal"><span class="pre">zim.zang.zung</span></code> will
acquire <code class="docutils literal"><span class="pre">S1_</span></code>. The second argument is the same as the first and will mangle
using its substitution, <code class="docutils literal"><span class="pre">S1_</span></code>. The
third argument type will mangle using the substitution for <code class="docutils literal"><span class="pre">zim</span></code>,
<code class="docutils literal"><span class="pre">CS_7zippity</span></code>. (It also acquires substitution <code class="docutils literal"><span class="pre">S2_</span></code> which would be used
if it mangled again.) The result type will mangle using the substitution for
<code class="docutils literal"><span class="pre">zim.zang</span></code>, <code class="docutils literal"><span class="pre">CS0_3zoo</span></code> (and acquire substitution <code class="docutils literal"><span class="pre">S3_</span></code>). The full
function type thus mangles as <code class="docutils literal"><span class="pre">fTCC3zim4zang4zungS1_CS_7zippity_CS0_3zoo</span></code>.</p>
<div class="highlight-swift"><div class="highlight"><pre>substitution ::= &#39;s&#39;
</pre></div>
</div>
<p>The special substitution <code class="docutils literal"><span class="pre">s</span></code> is used for the <code class="docutils literal"><span class="pre">Swift</span></code> standard library
module.</p>
</div>
<div class="section" id="predefined-substitutions">
<h3><a class="toc-backref" href="#id39">Predefined Substitutions</a><a class="headerlink" href="#predefined-substitutions" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>known-module ::= &#39;s&#39;                       // Swift
known-module ::= &#39;SC&#39;                      // C
known-module ::= &#39;So&#39;                      // Objective-C
known-nominal-type ::= &#39;Sa&#39;                // Swift.Array
known-nominal-type ::= &#39;Sb&#39;                // Swift.Bool
known-nominal-type ::= &#39;Sc&#39;                // Swift.UnicodeScalar
known-nominal-type ::= &#39;Sd&#39;                // Swift.Float64
known-nominal-type ::= &#39;Sf&#39;                // Swift.Float32
known-nominal-type ::= &#39;Si&#39;                // Swift.Int
known-nominal-type ::= &#39;SP&#39;                // Swift.UnsafePointer
known-nominal-type ::= &#39;Sp&#39;                // Swift.UnsafeMutablePointer
known-nominal-type ::= &#39;SQ&#39;                // Swift.ImplicitlyUnwrappedOptional
known-nominal-type ::= &#39;Sq&#39;                // Swift.Optional
known-nominal-type ::= &#39;SR&#39;                // Swift.UnsafeBufferPointer
known-nominal-type ::= &#39;Sr&#39;                // Swift.UnsafeMutableBufferPointer
known-nominal-type ::= &#39;SS&#39;                // Swift.String
known-nominal-type ::= &#39;Su&#39;                // Swift.UInt
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;known-module&gt;</span></code> and <code class="docutils literal"><span class="pre">&lt;known-nominal-type&gt;</span></code> are built-in substitutions for
certain common entities.  Like any other substitution, they all start
with &#8216;S&#8217;.</p>
<p>The Objective-C module is used as the context for mangling Objective-C
classes as <code class="docutils literal"><span class="pre">&lt;type&gt;</span></code>s.</p>
</div>
<div class="section" id="indexes">
<h3><a class="toc-backref" href="#id40">Indexes</a><a class="headerlink" href="#indexes" title="Permalink to this headline"></a></h3>
<div class="highlight-swift"><div class="highlight"><pre>index ::= &#39;_&#39;                              // 0
index ::= natural &#39;_&#39;                      // N+1
natural ::= [0-9]+
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">&lt;index&gt;</span></code> is a production for encoding numbers in contexts that can&#8217;t
end in a digit; it&#8217;s optimized for encoding smaller numbers.</p>
</div>
<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动画详解]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/06/12/dong-hua-xiang-jie/"/>
    <updated>2016-06-12T19:26:02+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/06/12/dong-hua-xiang-jie</id>
    <content type="html"><![CDATA[<p>
最近发现自己对iOS的动画理解很肤浅，于是执行了一段相对复杂的动画，加深自己对CAKeyframeAnimation关键帧动画的理解。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="c1">//执行事件</span>
</span><span class="line">    <span class="n">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">positionAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAKeyframeAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="s">@&quot;position&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">values</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)],</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="mi">110</span><span class="p">,</span> <span class="mi">73</span><span class="p">)],</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="mi">167</span><span class="p">,</span> <span class="mi">116</span><span class="p">)],</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="mi">189</span><span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="mi">133</span><span class="o">+</span><span class="mi">30</span><span class="p">)]];</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">keyTimes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="mi">0</span><span class="p">,</span> <span class="err">@</span><span class="p">(</span><span class="mi">11</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="p">(</span><span class="mi">22</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">additive</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">timingFunctions</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">],</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">],</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">],</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">]];</span>
</span><span class="line">
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="n">positionAnimation</span><span class="p">.</span><span class="n">calculationMode</span> <span class="o">=</span> <span class="n">kCAAnimationLinear</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">_meteroStar</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">positionAnimation</span> <span class="nl">forKey:</span><span class="s">@&quot;PositionAnimation&quot;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//    Alpha</span>
</span><span class="line">    <span class="n">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">alphaAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAKeyframeAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;opacity&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="n">alphaAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span>
</span><span class="line">    <span class="n">alphaAnimation</span><span class="p">.</span><span class="n">values</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="mf">0.0</span><span class="p">,</span> <span class="err">@</span><span class="mf">1.0</span><span class="p">,</span> <span class="err">@</span><span class="mf">0.5</span><span class="p">,</span> <span class="err">@</span><span class="mf">0.4</span><span class="p">];</span>
</span><span class="line">    <span class="n">alphaAnimation</span><span class="p">.</span><span class="n">keyTimes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="mi">0</span><span class="p">,</span> <span class="err">@</span><span class="p">(</span><span class="mi">11</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="p">(</span><span class="mi">22</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="n">alphaAnimation</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="n">alphaAnimation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">_meteroStar</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">alphaAnimation</span> <span class="nl">forKey:</span><span class="s">@&quot;alphaPositionAnimation&quot;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Transform</span>
</span><span class="line">    <span class="n">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">animation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAKeyframeAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;transform&quot;</span><span class="p">];</span>
</span><span class="line">         <span class="n">CATransform3D</span> <span class="n">scale1</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">         <span class="n">CATransform3D</span> <span class="n">scale2</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">         <span class="n">CATransform3D</span> <span class="n">scale3</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">         <span class="n">CATransform3D</span> <span class="n">scale4</span> <span class="o">=</span> <span class="n">CATransform3DMakeScale</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">frameValues</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span>
</span><span class="line">                                  <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCATransform3D:</span><span class="n">scale1</span><span class="p">],</span>
</span><span class="line">                                  <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCATransform3D:</span><span class="n">scale2</span><span class="p">],</span>
</span><span class="line">                                  <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCATransform3D:</span><span class="n">scale3</span><span class="p">],</span>
</span><span class="line">                                  <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCATransform3D:</span><span class="n">scale4</span><span class="p">],</span>
</span><span class="line">                                                               <span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">animation</span> <span class="nl">setValues:</span><span class="n">frameValues</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">animation</span><span class="p">.</span><span class="n">keyTimes</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="mi">0</span><span class="p">,</span> <span class="err">@</span><span class="p">(</span><span class="mi">11</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="p">(</span><span class="mi">22</span> <span class="o">/</span> <span class="mf">30.0</span><span class="p">),</span> <span class="err">@</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="n">animation</span><span class="p">.</span><span class="n">fillMode</span> <span class="o">=</span> <span class="n">kCAFillModeForwards</span><span class="p">;</span>
</span><span class="line">    <span class="n">animation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">    <span class="n">animation</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="n">animation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">meteroStar</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">animation</span> <span class="nl">forKey:</span><span class="s">@&quot;PopUpAnimation&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Native 资源整理]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/05/26/react-native-zi-yuan-zheng-li/"/>
    <updated>2016-05-26T16:20:13+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/05/26/react-native-zi-yuan-zheng-li</id>
    <content type="html"><![CDATA[<p>
最近在学习React-Native过程中整理了一些学习的资源。
</p>

<h2 id="section">教程</h2>

<p><a href="http://facebook.github.io/react-native/docs/getting-started.html">react-native 官方api文档</a>.</p>

<p><a href="https://github.com/jondot/awesome-react-native">Awesome React-Native</a>.</p>

<p><a href="https://github.com/ecomfe/react-native-cn">react-native 中文api文档 (翻译中)</a>.</p>

<p><a href="http://reactjs.cn/">react.js中文文档</a>.</p>

<p><a href="http://hulufei.gitbooks.io/react-tutorial/content/introduction.html">react.js入门教程(gitbook)</a>.</p>

<p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html">react.js快速入门教程</a>.</p>

<p><a href="http://react.nodejs-china.org/t/reactjszhong-wen-shi-pin-jiao-cheng-bai-du-wang-pan/584">react.js视频教程</a>.</p>

<p><a href="http://html-js.com/article/2783">react-native第一课</a>.
<!-- more -->
<a href="http://zhuanlan.zhihu.com/FrontendMagazine/19996445">深入浅出 React Native：使用 JavaScript 构建原生应用</a>.</p>

<p><a href="http://blog.cnbang.net/tech/2698/">React Native通信机制详解</a>.</p>

<p><a href="http://segmentfault.com/a/1190000002658374">React Native布局篇</a>.</p>

<p><a href="http://segmentfault.com/a/1190000002645929">React Native 基础练习指北（一)</a>.</p>

<p><a href="http://segmentfault.com/a/1190000002647733">React Native 基础练习指北（二）</a>.</p>

<p><a href="http://www.逍遥仙.cn/archives/235#6838470-tsina-1-17436-6a377b1a66595f9ede646cf5c012734c">构建一个简单的列表页和2页导航</a>.</p>

<p><a href="http://herman.asia/building-a-flashcard-app-with-react-native">Diary of Building an iOS App with React Native</a>.</p>

<p><a href="http://blog-en.leapoahead.com/post/use-react-native-in-existing-ios-app">Use React Native in Existing iOS App</a>.</p>

<p><a href="http://react.rocks/example/tcomb-form-native">tcomb-form-native使用视频教程(需翻墙)</a>.</p>

<h2 id="app">开源APP</h2>

<p>
研究源码也是很好的方式去掌握React-Native
</p>
<p><a href="https://github.com/facebook/react-native/tree/master/Examples">官方演示App</a>.</p>

<p><a href="https://github.com/henter/ReactNativeRubyChina">ReactNativeRubyChina</a>.</p>

<p><a href="https://github.com/iSimar/HackerNews-React-Native">HackerNews-React-Native</a>.</p>

<p><a href="https://github.com/tabalt/ReactNativeNews">React-Native新闻客户端</a>.</p>

<p><a href="https://github.com/bradoyler/newswatch-react-native">newswatch(新闻客户端)</a>.</p>

<p><a href="https://github.com/appintheair/react-native-buyscreen">buyscreen(购买页面)</a>.</p>

<p><a href="https://github.com/samuel1112/v2er">V2EX客户端</a>.</p>

<p><a href="https://github.com/joemaddalone/react-native-todo">react-native-todo</a>.</p>

<p><a href="https://github.com/muratsu/react-native-beer">react-native-beer</a>.</p>

<p><a href="https://github.com/86/react-native-stars">react-native-stars</a>.</p>

<p><a href="https://github.com/baofen14787/react-native-demo">模仿天猫首页的app</a>.</p>

<p><a href="https://github.com/csarsam/ReactNativeChess">ReactNativeChess</a>.</p>

<p><a href="https://github.com/Johnqing/miumiu">react native 编写的音乐软件</a>.</p>

<p><a href="https://github.com/ababol/react-native-pokedex">react-native-pokedex</a>.</p>

<p><a href="https://github.com/SFantasy/CNode-React-Native">CNode-React-Native</a>.</p>

<p><a href="https://github.com/voronianski/EightTracksReactNative">8tracks电台客户端</a>.</p>

<p><a href="https://github.com/yoxisem544/Calculator-using-React-Native">React-Native实现的计算器</a>.</p>

<p><a href="https://github.com/jawee/react-native-PropertyFinder">房产搜索app</a>.</p>

<p><a href="https://github.com/LeezQ/react-native-zhihu-app">知乎专栏app</a>.</p>

<p><a href="https://github.com/peralmq/ForeignExchangeApp">ForeignExchangeApp</a>.</p>

<p><a href="https://github.com/peralmq/ForeignExchangeApp">ForeignExchangeApp</a>.</p>

<p><a href="https://github.com/fakefish/sf-react-native">Segmentfault 客户端</a>.</p>

<p><a href="https://github.com/stormhouse/QiuShiReactNative">糗事百科app</a>.</p>

<p><a href="https://github.com/Hi-Rube/baoz-ReactNative">孢子社区app</a>.</p>

<p><a href="https://github.com/fraserxu/shenjs">深JS app</a>.</p>

<p><a href="https://github.com/asamiller/den">Den - 房屋销售app</a>.</p>

<p><a href="https://github.com/soliury/noder-react-native">Noder-cnodejs客户端</a>.</p>

<p><a href="https://github.com/race604/ZhiHuDaily-React-Native">知乎日报Android版</a>.</p>

<p><a href="https://github.com/sonnylazuardi/ziliun-react-native">ziliun-react-native</a>.</p>

<p><a href="https://github.com/shevawen/react-native-weather-app">react-native-weather-app</a>.</p>

<p><a href="https://github.com/taskrabbit/ReactNativeSampleApp">React Native Sample App(Navigation,Flux)</a>.</p>

<p><a href="https://github.com/qddegtya/A-ReactNative-TesterHome">TesterHome社区app</a>.</p>

<p><a href="https://github.com/7kfpun/FinanceReactNative">Finance - 股票报价app</a>.</p>

<p><a href="https://github.com/bigsui/shopping-react-native">shopping - 购物app</a>.</p>

<p><a href="https://github.com/kazaff/ZhuiYuanDemo">zhuiyuan - 追源cms app</a></p>

<p><a href="https://github.com/just4fun/uestc-bbs-react-native">uestc-bbs-react-native - UESTC清水河畔RN客户端(with Redux)</a>.</p>

<p><a href="https://github.com/benoitvallon/react-native-nw-react-calculator">react-native-nw-react-calculator(iOS/Android、Web、桌面多端)</a>.</p>

<p><a href="https://github.com/wwayne/react-native-nba-app">react-native-nba-app</a>.</p>

<p><a href="http://git.oschina.net/rplees/react-native-gitosc">开源中国的Git@OSC客户端</a>.</p>

<p><a href="https://github.com/liuchungui/rn_bycloud">rn_bycloud 帮瀛律师端app</a>.</p>

<h2 id="section-1">工具</h2>

<p><a href="https://github.com/Shrugs/react-native-snippets">react-native-snippets(代码提示)</a>.</p>

<p><a href="https://github.com/roman01la/react-native-babel">react-native-babel(使用ES6+)</a>.</p>

<p><a href="https://github.com/almost/react-native-sqlite">sqlite for react-native</a>.</p>

<p><a href="https://github.com/soliury/gulp-react-native-css">gulp-react-native-css(就像写css一样写React Style)</a>.</p>

<p><a href="https://github.com/rnpm/rnpm">rnpm(React Native Package Manager)</a>.</p>

<p><a href="https://github.com/futurice/pepperoni-app-kit">Pepperoni - React Native项目初始化套件</a>.</p>

<p><a href="https://www.decosoftware.com/">Deco IDE - React Native IDE</a>.</p>

<h2 id="section-2">资源文件</h2>

<p><a href="http://facebook.github.io/react-native/">React-native官网</a>.</p>

<p><a href="http://react-china.org/">React-China社区</a>.</p>

<p><a href="http://react.parts/">React-native组件库（比较全的组件库）</a>.</p>

<p><a href="http://reactnativemodules.com/">React Native Modules</a>.</p>

<p><a href="http://www.oschina.net/news/61214/11-react-native-ui-components">11款React Native开源移动 UI 组件</a>.</p>

<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS小技巧]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/05/04/zhuan-zhi-ioskai-fa-xi-lie-jie-jue-jian-pan-zhe-dang-shi-tu/"/>
    <updated>2016-05-04T14:08:52+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/05/04/zhuan-zhi-ioskai-fa-xi-lie-jie-jue-jian-pan-zhe-dang-shi-tu</id>
    <content type="html"><![CDATA[<p>最近开始记录下自己开发遇到的问题，如果解决了就会记录下来，以便自己日后回顾工作。
</p>
<p>测试妹子给我提了一个问题是视图遮挡了，我一看，确实会遮挡，我就加了下面的这段代码
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nf">keyboardView</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span> <span class="n">windows</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">windows</span><span class="p">];</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">UIWindow</span> <span class="o">*</span> <span class="n">window</span> <span class="k">in</span> <span class="p">[</span><span class="n">windows</span> <span class="n">reverseObjectEnumerator</span><span class="p">])</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span> <span class="n">view</span> <span class="k">in</span> <span class="p">[</span><span class="n">window</span> <span class="n">subviews</span><span class="p">])</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">// UIPeripheralHostView is used from iOS 4.0, UIKeyboard was used in previous versions,UIInputSetContainerView was used iOS 8.0</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">object_getClassName</span><span class="p">(</span><span class="n">view</span><span class="p">),</span> <span class="s">&quot;UIPeripheralHostView&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">object_getClassName</span><span class="p">(</span><span class="n">view</span><span class="p">),</span> <span class="s">&quot;UIKeyboard&quot;</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">                <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">object_getClassName</span><span class="p">(</span><span class="n">view</span><span class="p">),</span> <span class="s">&quot;UIInputSetContainerView&quot;</span><span class="p">))</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span><span class="p">)</span><span class="nf">keyboardViewForView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIView</span> <span class="o">*</span> <span class="n">keyboardView</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">keyboardView</span><span class="p">];</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">keyboardView</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">view</span> <span class="o">=</span> <span class="n">keyboardView</span><span class="p">.</span><span class="n">superview</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样我们在调用下面的方法keyboardViewForView就能显示出来了。问题得到了解决。
</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Control Version]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/04/07/git-control-version/"/>
    <updated>2016-04-07T16:35:09+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/04/07/git-control-version</id>
    <content type="html"><![CDATA[<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript学习之基本概念]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/03/23/javascriptxue-xi-zhi-ji-ben-gai-nian/"/>
    <updated>2016-03-23T15:20:45+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/03/23/javascriptxue-xi-zhi-ji-ben-gai-nian</id>
    <content type="html"><![CDATA[<p>
任何语言的核心都会描述这门语言的最基本的工作原理。而描述的内容又涉及到这门语言的语法、操作符、数据类型、内置功能等用于构建复杂解决方案的基本概念。
</p>

<h2>语法</h2>
<p>
</p>

<h3>区分大小写</h3>
<p>
</p>

<h3>标识符</h3>
<p>
</p>
<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/03/23/react-native/"/>
    <updated>2016-03-23T11:46:49+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/03/23/react-native</id>
    <content type="html"><![CDATA[<p>
React-Native 帮助在原生平台打造世界一流的应用体验，使用基于<code>JavaSript</code>和React的结合的开发经验。React-Native的宗旨是更有效的开发全平台的应用。
</p>

<h2>Native Components</h2>
<p>
在React-Native你能使用标准平台组件如：iOS的<code>UITabBar</code>以及<code>Android</code>的<code>Drawer</code>。这个给了你APP标准统一的外观，使用这个平台的生态系统，去保持高质量。这些组件能轻易的嵌入到你的APP中使用，和React组件是差不多的，例如:<code>TabBariOS</code>和<code>DrawerLayoutAndroid</code>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// iOS</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">TabBarIOS</span><span class="p">,</span> <span class="nx">NavigatorIOS</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">TabBarIOS</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">TabBarIOS</span><span class="p">.</span><span class="nx">Item</span> <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;React Native&quot;</span> <span class="nx">selected</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">          <span class="o">&lt;</span><span class="nx">NavigatorIOS</span> <span class="nx">initialRoute</span><span class="o">=</span><span class="p"></span> <span class="o">/&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="err">/TabBarIOS.Item&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/TabBarIOS&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Android</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">DrawerLayoutAndroid</span><span class="p">,</span> <span class="nx">ProgressBarAndroid</span><span class="p">,</span> <span class="nx">Text</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">DrawerLayoutAndroid</span>
</span><span class="line">        <span class="nx">renderNavigationView</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">React</span> <span class="nx">Native</span><span class="o">&lt;</span><span class="err">/Text&gt;}&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">ProgressBarAndroid</span> <span class="o">/&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/DrawerLayoutAndroid&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h2>异步执行</h2>
<p>
所有的<code>Javascript</code>应用程序代码以及原生平台的操作都是异步的，并且原生模块也能够使用额外的线程。这意味着我们能关闭主线程的图像解码，后台把图片保存到磁盘，渲染文字和计算布局而不会阻塞UI。这样一来，React-Native应用自然流畅性和响应。通信也完全序列化，这使我们能够充分利用<code>Chrome</code>开发者工具来调试<code>Javascript</code>的运行时完整的应用程序，无论是模拟器还是真实设备。
</p>
<!-- more-->
<h2>触摸处理</h2>
<p>
React-Native实现了一个功能强大的系统解决触摸在复杂的视图层次中，并且提供高层级的组件，例如：<code>TouchableHighlight</code>和滚动视图和其他元素融合在一起，不需要额外的配置。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// iOS &amp; Android</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">ScrollView</span><span class="p">,</span> <span class="nx">TouchableHighlight</span><span class="p">,</span> <span class="nx">Text</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">TouchDemo</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">ScrollView</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">TouchableHighlight</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;pressed&#39;</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class="line">          <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="nx">Proper</span> <span class="nx">Touch</span> <span class="nx">Handling</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/ScrollView&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h2>Flexbox和样式</h2>
<p>
视图布局应该很容易，这就是为什么我们把<code>Flexbox</code>的布局模型从web带到了React-Native。Flexbox让构建大部分公共部分的UI布局更简单，例如用<code>margin</code>和<code>padding</code>堆叠和嵌套的Box。React-Native也支持公共的网页样式，如：<code>fontWeight</code>和<code>StyleSheet</code>抽象提供了一个优化的机制来声明所有的样式和布局正确一起使用它们和内联应用它们的组件
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// iOS &amp; Android</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">Image</span><span class="p">,</span> <span class="nx">StyleSheet</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">ReactNative</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">row</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">Image</span>
</span><span class="line">          <span class="nx">source</span><span class="o">=</span><span class="p"></span>
</span><span class="line">          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">image</span><span class="p">}</span>
</span><span class="line">        <span class="o">/&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">            <span class="nx">React</span> <span class="nx">Native</span>
</span><span class="line">          <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">subtitle</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">            <span class="nx">Build</span> <span class="nx">high</span> <span class="nx">quality</span> <span class="nx">mobile</span> <span class="nx">apps</span> <span class="nx">using</span> <span class="nx">React</span>
</span><span class="line">          <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class="line">  <span class="nx">row</span><span class="o">:</span> <span class="p">{</span> <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="nx">margin</span><span class="o">:</span> <span class="mi">40</span> <span class="p">},</span>
</span><span class="line">  <span class="nx">image</span><span class="o">:</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">marginRight</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class="line">  <span class="nx">text</span><span class="o">:</span> <span class="p">{</span> <span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">},</span>
</span><span class="line">  <span class="nx">title</span><span class="o">:</span> <span class="p">{</span> <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span> <span class="nx">fontWeight</span><span class="o">:</span> <span class="s1">&#39;bold&#39;</span> <span class="p">},</span>
</span><span class="line">  <span class="nx">subtitle</span><span class="o">:</span> <span class="p">{</span> <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h2>开源</h2>
<p>
React-Native集中于改变视图代码编写的方式，至于剩下的，我们期待在网络的普遍标准和在恰当情况下填充那些API。你能使用npm安装<code>JavaSript</code>库拷贝到React-Native运行。如:<code>XMLHttpRequest</code>,window.requestAnimationFrame,navigator.geolocation。我们努力扩展可用的API，并且很高兴为开源贡献力量。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// iOS (Android support for geolocation coming)</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">Text</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">GeoInfo</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;unknown&#39;</span> <span class="p">};</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span>
</span><span class="line">      <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">position</span><span class="p">}),</span>
</span><span class="line">      <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span>
</span><span class="line">        <span class="nx">Position</span><span class="o">:</span> <span class="p">{</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">position</span><span class="p">)}</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h2>可扩展性</h2>
<p>
React-Native可用来开发一个伟大的APP而不用写一行原生代码，但是React-Native的设计也与自定义原生的视图和模块的扩展，这意味着你开源复用任何你之前已经构建过的，也能导入使用你喜欢的原生库。
</p>

<h3>创建iOS模块</h3>
<p>
创建一个简单的iOS模块，创建一个新的类来实现<code>RCTBridgeModule</code>协议,包含函数实现JavaSript在RCT_EXPORT_METHOD的功能。额外，这个类自身必须明确的导出RCT_EXPORT_MODULE();。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;RCTBridgeModule.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="nc">MyCustomModule</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">RCTBridgeModule</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">MyCustomModule</span>
</span><span class="line">
</span><span class="line"><span class="n">RCT_EXPORT_MODULE</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Available as NativeModules.MyCustomModule.processString</span>
</span><span class="line">
</span><span class="line"><span class="n">RCT_EXPORT_METHOD</span><span class="p">(</span><span class="nl">processString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="p">)</span><span class="n">input</span> <span class="nl">callback:</span><span class="p">(</span><span class="n">RCTResponseSenderBlock</span><span class="p">)</span><span class="n">callback</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">callback</span><span class="p">(</span><span class="err">@</span><span class="p">[[</span><span class="n">input</span> <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="s">@&quot;Goodbye&quot;</span> <span class="nl">withString:</span><span class="s">@&quot;Hello&quot;</span><span class="p">]]);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">NativeModules</span><span class="p">,</span> <span class="nx">Text</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">Message</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Goodbye World.&#39;</span> <span class="p">};</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">NativeModules</span><span class="p">.</span><span class="nx">MyCustomModule</span><span class="p">.</span><span class="nx">processString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">text</span><span class="p">});</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h3>创建iOS视图</h3>
<p>
自定义的iOS视图能被导出，继承于<code>RCTViewManager</code>,实现-(UIView*)view方法，并且导出属性通过<code>RCT_EXPORT_VIEW_PROPERTY</code>这个宏。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &quot;RCTViewManager.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="nc">MyCustomViewManager</span> : <span class="nc">RCTViewManager</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">MyCustomViewManager</span>
</span><span class="line">
</span><span class="line"><span class="n">RCT_EXPORT_MODULE</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span> <span class="p">)</span><span class="n">view</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">[[</span><span class="n">MyCustomView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">RCT_EXPORT_VIEW_PROPERTY</span><span class="p">(</span><span class="n">myCustomProperty</span><span class="p">,</span> <span class="n">NSString</span><span class="p">);</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">requireNativeComponent</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">MyCustomView</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">NativeMyCustomView</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">MyCustomView</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">myCustomProperty</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">oneOf</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]),</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">NativeMyCustomView</span> <span class="o">=</span> <span class="nx">requireNativeComponent</span><span class="p">(</span><span class="s1">&#39;MyCustomView&#39;</span><span class="p">,</span> <span class="nx">MyCustomView</span><span class="p">);</span>
</span><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">MyCustomView</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h3>创建安卓模块</h3>
<p>
同样，安卓也支持自定义扩展，这些方法只是略有不同。
</p>
<p>
要在Android的一个简单的模块，创建一个扩展<code>ReactContextBaseJavaModule</code>类的新类和注释，你要提供给<code>JavaScript</code>与@ReactMethod功能。此外，类本身必须的<code>ReactPackage</code>注册您的React-Native程序。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomModule</span> <span class="kd">extends</span> <span class="n">ReactContextBaseJavaModule</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Available as NativeModules.MyCustomModule.processString</span>
</span><span class="line">  <span class="nd">@ReactMethod</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processString</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">,</span> <span class="n">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">callback</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;Goodbye&quot;</span><span class="o">,</span> <span class="s">&quot;Hello&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">NativeModules</span><span class="p">,</span> <span class="nx">Text</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">Message</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class="line">  <span class="nx">getInitialState</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Goodbye World.&#39;</span> <span class="p">};</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">NativeModules</span><span class="p">.</span><span class="nx">MyCustomModule</span><span class="p">.</span><span class="nx">processString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">text</span><span class="p">});</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h3>创建安卓视图</h3>
<p>
定制安卓视图能通过<code>SimpleViewManager</code>扩展，实现一个创建视图实例并且返货函数名称的方法，并与@UIProp标记导出属性被暴露。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomViewManager</span> <span class="kd">extends</span> <span class="n">SimpleViewManager</span><span class="o">&lt;</span><span class="n">MyCustomView</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">REACT_CLASS</span> <span class="o">=</span> <span class="s">&quot;MyCustomView&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@UIProp</span><span class="o">(</span><span class="n">UIProp</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PROP_MY_CUSTOM_PROPERTY</span> <span class="o">=</span> <span class="s">&quot;myCustomProperty&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">REACT_CLASS</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="n">MyCustomView</span> <span class="nf">createViewInstance</span><span class="o">(</span><span class="n">ThemedReactContext</span> <span class="n">reactContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nf">MyCustomView</span><span class="o">(</span><span class="n">reactContext</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateView</span><span class="o">(</span><span class="n">MyCustomView</span> <span class="n">view</span><span class="o">,</span> <span class="n">ReactStylesDiffMap</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">updateView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">props</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">props</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="n">PROP_MY_CUSTOM_PROPERTY</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">      <span class="n">view</span><span class="o">.</span><span class="na">setMyCustomProperty</span><span class="o">(</span><span class="n">props</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">PROP_MY_CUSTOM_PROPERTY</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react-native&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="p">{</span> <span class="nx">requireNativeComponent</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">MyCustomView</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">NativeMyCustomView</span> <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">MyCustomView</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">myCustomProperty</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">oneOf</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]),</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">NativeMyCustomView</span> <span class="o">=</span> <span class="nx">requireNativeComponent</span><span class="p">(</span><span class="s1">&#39;MyCustomView&#39;</span><span class="p">,</span> <span class="nx">MyCustomView</span><span class="p">);</span>
</span><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">MyCustomView</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录一次修改Swift的错误]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/03/04/ji-lu-%5B%3F%5D-ci-xiu-gai-swiftde-cuo-wu/"/>
    <updated>2016-03-04T18:32:47+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/03/04/ji-lu-[?]-ci-xiu-gai-swiftde-cuo-wu</id>
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/626e5d69gw1f1l040x0l2j20xe0sotgc.jpg" alt="screen-shot-0" />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f1l04x8j0ij20wo0sqdp1.jpg" alt="screen-shot-1" />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f1l056kc5qj20xq0t0aj0.jpg" alt="screen-shot-2" />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f1l05da3cmj20xi0ti78x.jpg" alt="screen-shot-3" />
<img src="http://ww2.sinaimg.cn/large/626e5d69gw1f1l05jk9etj20xs0taq8a.jpg" alt="screen-shot-4" />
<img src="http://ww4.sinaimg.cn/large/626e5d69gw1f1l05oxgsfj20y00ss0zu.jpg" alt="screen-shot-5" />
<img src="http://ww1.sinaimg.cn/large/626e5d69gw1f1l05usxv8j20xw0su0y9.jpg" alt="screen-shot-6" />
<img src="http://ww3.sinaimg.cn/large/626e5d69gw1f1l060hn0sj20yc0t6474.jpg" alt="screen-shot-7" /></p>

<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年度总结]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2015/12/26/2015nian-du-zong-jie/"/>
    <updated>2015-12-26T14:14:29+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2015/12/26/2015nian-du-zong-jie</id>
    <content type="html"><![CDATA[<h2 id="目录"><a name="summaryIntroducton">目录</a></h2>
<ol>
<li><a href="#summaryHistory"><strong>北漂的过去</strong></a></li>
<li><a href="#summary-now"><strong>我所拥有的现在</strong></a></li>
<li><a href="#summary-future"><strong>展望未来</strong></a></li>
<li><a href="#summary-work"><strong>工作总结</strong></a></li>
</ol>
<h2 id="一、北漂的过去"><a name="summaryHistory">一、北漂的过去</a></h2>
<p>
今年我结束了我长达4年多的北漂生活，也同时结束了我长达4年多的外包工作生涯。有时候和现在的同事聊天，他们问：你当初在北京，为什么想到来上海呢？太多太多的原因，我承认我擅自选择北京，来上海这个决定，非常冲动，但是现在看来这个决定并不是多么愚蠢。<br />
我就按照时间展开回忆吧！
</p>
<p>
那是2011年的4月15日，我们一行5人从学校踏上了北漂的列车。这是我北漂的开始，那晚的我在火车座位上度过，当时怀揣着对未来的命运，心底对北京很兴奋也很迷茫。第二天，我的初中同学一大早就来车站接我，我特感恩是我念了这么多年书，唯一的用处就是现在走到任何城市都有小伙伴陪我。
那是我北漂的开始。我开始工作了，终于不用家里每月寄钱给我了，我可以自己养活自己了。我其实一开始是很没有工作责任感的人，我刚加入的团队，由于我们团队boss即将离职，于是我作为一个刚进来的新人，没有安排导师，也没有分配任务，完全放养。我当时乐在其中，和另外2个同学一起在这个公司实习。他们没有我这么幸运，他们分在了A组每天分配了很多活，我没有活可干。转眼在公司待了2月，我B组Leader 终于离职了，而且公司也到了淡季，7月份公司不裁人以给员工放2月假不发薪水的方式逼很多人跳槽，我另外2个同学所在的B组老大决定不要他们，于是他们两个人失业了，而我却不知道为什么被留了下来。但是我想他们都走了，我留下来多没意思啊。（我很重感情 = =|）于是我和当时的团队负责人说我也不想做测试了，申请辞职。不顾Leader强烈挽留毅然决然的和小伙伴们一起失业。我当时真的没有想到这个决定导致的后果非常严重。
</p>
<!-- more -->
<p>
我失业了，而且一失业就长达2月久。那时候竞争的残酷第一次在我面前露出它狰狞的面目。因为我还没有毕业，没有毕业证，当然和这个毕业证关系不大，主要是我当时确实没有什么能力。我的资金用完了，朱姐把她的850工资给我，我靠着着850元，撑下来了。我如果没有撑下来，或许现在又是另外的光景。当知道我没有工作，Leader打电话给我让我回来，我没有接受，我当时说好马不吃回头草，他就又说给我推荐另一家公司，但是也是做测试。我2月天天三国杀看视频，对测试的工作实在是没有兴趣，我就坚持不去了，他说你没有电脑，给了我一台Dell笔记本我是靠这个Dell笔记本自学iOS。
</p>
<p>
到了2011年10月8号，这是非常重要的日子，是我正式踏入iOS开发的日子。揭开了新的序幕<br />
我在这里遇到了人生的第一个贵人，我的学长，是他带我入了这行。其实我一直都不会开发，我是2014年才突然开窍会开发了。
靠着iOS开发这个技能，我一路坑蒙拐骗，去过很多城市，打着出差的名义。因为当时iOS开发门槛是比较高的，因为你需要苹果设备，那时候对于大多数人来说，是非常大的支出的。不像现在，买什么都不眨眼。我开发是用的一台Dell笔记本装的黑苹果，这个电脑让我非常痛苦不堪，因为没有驱动，声卡没有驱动，网卡没有驱动，就连自带键盘都无法驱动，需要USB外接键盘开发，你可想我开发遇到问题，必须自己苦想，实在是想不出来才切换成windows玩。为什么我不装虚拟机跑苹果，因为Dell电脑年代久远CPU不支持虚拟化。而且这个Dell笔记本是我Leader给我的。特别感谢Leader的这台笔记本。好人一生平安。
</p>
<p>
我一直是个急性子，所以有时候我怀疑我做程序猿是不是一个错误的决定，我希望做了立刻就出现效果。所以我第一个项目是给一个iPad项目改bug，我从那时候开始就很不喜欢看别人的代码，而且从那时候我就养成了一个习惯，使用界面去开发。我当时做的项目，所有界面全是代码敲的，我找的时候一个一个特别费劲。我当时心很浮躁。然后那个项目失败了。然后开始了第二个项目，所幸当时项目非常多，我在不同的项目之间得到了锻炼，我不知道本质，但是我也能一点点开发了。技术一点点增长中。
印象最深的还是五道口，每天上下班，五道口地铁排的长队，还有那个甜的发腻的枣糕。
</p>
<p>
时间到了2013年8月，我开始带团队开发了，在一个专业做移动APP的外包公司，被外派去客户现场。
经常出差，是我离职的一个主要原因，第二是压力大，我离职前，连续1月顶着干活。这时候我就有了退出的想法，一方面是我外派离开公司期间，公司人员变动都很大，我回到北京公司，那时候有一个前辈也要离职了，他离职之后再找了工作，现在在百度地图开始新的职业生涯。而我那时候负责把手头APP护上线。中间还成为了iOS招聘负责人，现在公司除了一部分是公司自己开设的培训机构的，差不多都是我当时招的。这期间我感觉，每天上班是一种痛苦，而这种痛苦是谁也无法倾诉的。于是在8月我终于选择结束现在的状态。想给自己换个环境于是，提出离职，同样离职被驳回，想我完成手头这个项目，但是我当时状态完全排斥，我仔细跟领导商量，终于结束了长达4年多的北漂生涯。
</p>
<h2 id="二、我所拥有的现在"><a name="summary-now">二、我所拥有的现在</a></h2>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch用法剖析]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2015/12/23/jspatchyong-fa-pou-xi/"/>
    <updated>2015-12-23T09:51:39+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2015/12/23/jspatchyong-fa-pou-xi</id>
    <content type="html"><![CDATA[<h2 id="目录"><a name="jspatchIntroducton">目录</a></h2>
<ol>
<li><a href="#jspatchIntroducton"><strong>JSPatch介绍</strong></a></li>
<li><a href="#jspatch-wax"><strong>JSPatch VS Wax lua</strong></a></li>
<li><a href="#jspatch-core"><strong>JSPatch的原理和核心</strong></a></li>
<li><a href="#jspatch-Extension"><strong>JSPatch Extension机制</strong></a></li>
<li><a href="#jspatch-Tech"><strong>JSPatch中的实现技巧总结</strong></a> </li>
<li><a href="#jspatch-problem"><strong>遇到的问题与解决方法</strong></a></li>
</ol>
<h2 id="一、JSPatch介绍"><a name="jspatchIntroducton">一、JSPatch介绍</a></h2>
<h3 id="用途">用途</h3>
<p>iOS产品开发之中常常会遇到这种情况: 新版本上线后发现有个严重的bug，可能会导致crash率激增，可能会使网络请求无法发出，这时能做的只是赶紧修复bug然后提交等待漫长的AppStore审核，再盼望用户快点升级，付出巨大的人力和时间成本，才能完成此次bug的修复。</p>
<p>JSPatch的出现解决了这样的问题，只需要在项目中引入极小的JSPatch引擎，就可以使用JavaScript语言调用Objective-C的原生接口，获得脚本语言的能力：动态更新iOS APP，替换项目原生代码、快速修复bug。      </p>
<h3 id="技术核心">技术核心</h3>
<p>JSPatch核心主要是JSBinding和Objective-C中的runtime技术。一方面，它采用Apple在iOS7中发布的JavaScriptCore.framework作为Javascript引擎解析JavaScript脚本，执行JavaSript代码并与Objective-C端的代码进行桥接。另一方面则是使用Objective-C runtime中的method swizzling的方式达到使用JavaScript脚本动态替换原有Objective-C方法的目的，并利用ForwardInvocation标准消息转发机制使得在JavaScript脚本中调用Objective-C的方法成为可能。</p>
<!-- more -->
<h2 id="二、JSPatch_VS_lua_Wax"><a name="jspatch-wax">二、JSPatch VS lua Wax</a></h2>
<p>wax是可以实现动态打补丁快速修补Crash的另外一种解决方案，初衷是为了使用lua来编写iOS原生应用而诞生的一个框架。它利用lua的C语言API(可以让C代码与lua进行交互的函数集，包括读写lua全局变量的函数，调用lua函数的函数，运行lua代码片段的函数，注册C函数然后可以在lua中被调用的函数，等等)和 Objective-C 强大的runtime使lua能调用原生Objective-C接口，可以使用lua创建，继承，扩展oc类，使用lua实现oc所能实现的所有功能。</p>
<p>lua wax由几个部分组成:</p>
<ol>
<li><p>wax stdLib，是一个lua脚本库，利用前面提到的C API和Objective-C runtime向lua脚本提供与Objective-C类交互的接口;</p>
</li>
<li><p>Wax Engine，提供使用Objective-C加载运行lua脚本和传递变量给lua脚本的接口;</p>
</li>
<li><p>lua Compiler，即lua解释器，wax Engine调用解释器加载并编译运行lua脚本。<br /><img src="http://ww1.sinaimg.cn/bmiddle/68e55315gw1eu0af1y3asj20dp0ec3z0.jpg" alt="Wax lua" /></p>
</li>
</ol>
<p>相比于wax，    JSPatch有以下的优势</p>
<ol>
<li><p>Javascript比lua在应用开发领域有更广泛的应用。 目前前端开发和终端开发有融合的趋势，作为扩展的脚本语言，JavaScript是不二之选。</p>
</li>
<li><p>更符合Apple的规则。iOS Developer Program License Agreement里3.3.2提到不可动态下发可执行代码，但通过苹果JavaScriptCore.framework或WebKit执行的代码除外，JS正是通过JavaScriptCore.framework执行的。</p>
</li>
<li><p>小巧。 使用系统内置的JavaScriptCore.framework，无需内嵌脚本引擎，体积小巧。而Wax需要导入c代码写的lua引擎。</p>
</li>
<li><p>不需要担心内存回收的问题。JavascriptCore.framework通过GC来对垃圾进行回收。而lua wax需要显式调用内存回收方法。</p>
</li>
<li><p>支持armv7 armv7s arm64框架。wax并不支持arm64框架。</p>
</li>
</ol>
<p>而JSPatch也有自身的缺点:</p>
<ol>
<li><p>不支持iOS6及以下，因为JSPatch依赖于iOS7及以后的JavascriptCore.framework (这点现在可以忽略，因为微信最低的版本要求已经是iOS7)</p>
</li>
<li><p>调用OC方法的性能慢于lua wax</p>
</li>
<li><p>启动JSPatch所占用的内存多于wax</p>
</li>
</ol>
<h2 id="三、JSPatch核心原理解析"><a name="jspatch-core">三、JSPatch核心原理解析</a></h2>
<h3 id="startEngine">startEngine</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">JPEngine</span> <span class="n">startEngine</span><span class="p">];</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">sourcePath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;demo&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;js&quot;</span><span class="p">];</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">script</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfFile:</span><span class="n">sourcePath</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">JPEngine</span> <span class="nl">evaluateScript:</span><span class="n">script</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>使用JSPatch框架首先要调用<code>JPEngine</code>中的类方法<code>startEngine</code>，这个方法的是为了初始化JSContext，JSContext是JS脚本的运行环境。JS脚本可以调用在JSContext中预先定义的方法，方法的参数/返回值都会被JavaScriptCore.framework自动转换，OC里的NSArray，NSDictionary，NSString，NSNumber，NSBlock，[NSNull null]会分别转为JS端的Array/Object/String/Number/function/null。</p>
<p>那其他无法通过JavascriptCore.framework进行bridge转换的数据类型，比如自定义的类的对象，Class类型，指针，要如何在JS和OC两端进行传递呢？</p>
<p>JSPatch中使用了一个叫做JPBoxing的类去封装id、指针、Class类型变量，封装完以后这个Boxing对象会被放在一个NSDictionary里(NSDictionary可转化为JS中的Object类型)，传递给JS代码。<a href="#jspatch-boxing">后面</a>会对JPBoxing进行详细的介绍.</p>
<p>回到startEngine方法:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;_OC_defineClass&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">classDeclaration</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">instanceMethods</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">classMethods</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">defineClass</span><span class="p">(</span><span class="n">classDeclaration</span><span class="p">,</span> <span class="n">instanceMethods</span><span class="p">,</span> <span class="n">classMethods</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;_OC_callI&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">obj</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isSuper</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">callSelector</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">selectorName</span><span class="p">,</span> <span class="n">arguments</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">isSuper</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;_OC_callC&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">callSelector</span><span class="p">(</span><span class="n">className</span><span class="p">,</span> <span class="n">selectorName</span><span class="p">,</span> <span class="n">arguments</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NO</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在这里定义的函数主要是负责处理转换从JS端传过来的参数，然后在OC端运用runtime里的方法实现生成新的类、替换旧的类、调用方法等等功能。</p>
<p>其中<code>_OC_defineClass</code>负责定义新的类或替换原有的类，<code>_OC_callI</code>负责调用实例方法，<code>_OC_callC</code>负责调用类方法。</p>
<p>除了这三个函数之外，startEngine中还封装了一些常用GCD方法、console.log、sizeof、Javascript异常捕获函数等等。</p>
<p>准备完JSContext之后，就可以加载从网络中下载的JS补丁，调用<code>[JPEngeine evaluateScript:script]</code>方法执行脚本。</p>
<h3 id="defineClass">defineClass</h3>
<p>接下来讲解JSPatch中如何定义一个类以及怎么覆盖原方法或新增一个方法。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">defineClass</span><span class="p">(</span><span class="s1">&#39;JPViewController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">handleBtn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sender</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">tableViewCtrl</span> <span class="o">=</span> <span class="nx">JPTableViewController</span><span class="p">.</span><span class="nx">alloc</span><span class="p">().</span><span class="nx">init</span><span class="p">()</span>
</span><span class="line">    <span class="nx">self</span><span class="p">.</span><span class="nx">navigationController</span><span class="p">().</span><span class="nx">pushViewController_animated</span><span class="p">(</span><span class="nx">tableViewCtrl</span><span class="p">,</span> <span class="nx">YES</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">},</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>defineClass</code>函数可接受三个参数：</p>
<ol>
<li>字符串:”需要替换或者新增的类名:继承的父类名 &lt;实现的协议1，实现的协议2&gt;”</li>
<li>{实例方法}</li>
<li>{类方法}</li>
</ol>
<p>将这三个参数通过bridging传入到OC后，执行以下步骤:</p>
<ol>
<li>使用NSScanner分离classDeclaration，分离成三部分<ul>
<li>类名 : className</li>
<li>父类名 : superClassName</li>
<li>实现的协议名 : protocalNames</li>
</ul>
</li>
<li>使用NSClassFromString(className)获得该Class对象。<ul>
<li>若该Class对象为nil，则说明JS端要添加一个新的类，使用<code>objc_allocateClassPair</code>与<code>objc_registerClassPair</code>注册一个新的类。</li>
<li>若该Class对象不为nil，则说明JS端要替换一个原本已存在的类</li>
</ul>
</li>
<li>根据从JS端传递来的实例方法与类方法参数，为这个类对象添加/替换实例方法与类方法<ul>
<li>添加实例方法时，直接使用上一步得到class对象; 添加类方法时需要调用<code>objc_getMetaClass</code>方法获得元类。</li>
<li>如果要替换的类已经定义了该方法，则直接对该方法替换和实现消息转发。</li>
<li>否则根据以下两种情况进行判断<ul>
<li>遍历protocalNames，通过<code>objc_getProtocol</code>方法获得协议对象，再使用<code>protocol_copyMethodDescriptionList</code>来获得协议中方法的type和name。匹配JS中传入的selectorName，获得typeDescription字符串，对该协议方法的实现消息转发。</li>
<li>若不是上述两种情况，则js端请求添加一个新的方法。构造一个typeDescription为”@@:\@****”(返回类型为id，参数值根据JS定义的参数个数来决定。新增方法的返回类型和参数类型只能为id类型，因为在JS端只能定义对象)的IMP。将这个IMP添加到类中。</li>
</ul>
</li>
</ul>
</li>
<li>为该类添加<code>setProp:forKey</code>和<code>getProp:</code>方法，使用<code>objc_getAssociatedObject</code>与<code>objc_setAssociatedObject</code>让JS脚本拥有设置property的能力</li>
<li>返回{className:cls}回JS脚本。</li>
</ol>
<h3 id="overrideMethod方法">overrideMethod方法</h3>
<p>不管是替换方法还是新增方法，都是使用<code>overrideMethod</code>方法。<br />它接受五个参数:</p>
<ul>
<li>类名</li>
<li>要替换的方法名</li>
<li>JS中定义的方法</li>
<li>是否类方法</li>
<li>方法的typeDescription</li>
</ul>
<p>原型如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">overrideMethod</span><span class="p">(</span><span class="n">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">function</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isClassMethod</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typeDescription</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>逻辑步骤如下</p>
<ol>
<li>初始化：更具selectorName获取对应的Selector；typeDescription获得NSMethodSignature方法签名。</li>
<li>保存原有方法的IMP，添加名为<code>@&quot;ORIG&quot; + selectorName</code>的方法，IMP为原方法的IMP。</li>
<li>将原方法的IMP设置为消息转发<ul>
<li>若该方法的返回值为特殊的struct类型，则需要将IMP设置为<code>(IMP)_objc_msgForward_stret</code></li>
<li>否则的话将IMP设置为<code>_objc_msgForward</code></li>
</ul>
</li>
<li>保存原有转发方法<code>forwardInvocation:</code>的IMP，添加selectorName为@”ORIGforwardInvocation:”，IMP为原转发方法IMP的方法。</li>
<li>将原转发方法替换为自己的转发方法<code>JPForwardInvocation</code></li>
<li>根据替换/添加方法的返回类型，选择不同的替换IMP(使用宏的形式定义)，替换原方法。</li>
</ol>
<h3 id="callSelector方法">callSelector方法</h3>
<p>在JS端调用OC方法时，都需要通过在OC端通过<code>callSelector</code>方法进行方法的查找以及参数类型、返回类型的转换和处理。</p>
<p>该方法接受五个参数</p>
<ul>
<li>调用对象的类名</li>
<li>被调用的selectorName</li>
<li>JS中传递过来的参数</li>
<li>JS端封装的实例对象</li>
<li>是否调用的是super类的方法</li>
</ul>
<p>方法的原型：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">static</span> <span class="kt">id</span> <span class="n">callSelector</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">className</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">selectorName</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">instance</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">isSuper</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>逻辑步骤如下</p>
<ol>
<li>初始化<ul>
<li>将JS封装的instance对象进行拆装，得到OC的对象；</li>
<li>根据类名与selectorName获得对应的类对象与selector；</li>
<li>通过类对象与selector构造对应的NSMethodSignature签名，再根据签名构造NSInvocation对象，并为invocation对象设置target与Selector</li>
</ul>
</li>
<li>根据方法签名，获悉方法每个参数的实际类型，将JS传递过来的参数进行对应的转换(比如说参数的实际类型为int类型，但是JS只能传递NSNumber对象，需要通过<code>[[jsObj toNumber] intValue]</code>进行转换)。转换后使用<code>setArgument方法</code>为NSInvocation对象设置参数。</li>
<li>执行invoke方法。</li>
<li>通过getReturnValue方法获取到返回值。</li>
<li>根据返回值类型，封装成JS中对应的对象(因为JS并不识别OC对象，所以返回值为OC对象的话需封装成{<strong>className:className, </strong>obj:obj})返回给JS端。</li>
</ol>
<h3 id="JPForwardInvocation方法">JPForwardInvocation方法</h3>
<p>JPForwardInvocation方法替换了原有<code>-forwardInvocation</code>方法的实现，使得消息转发都通过该方法，并将消息转发给JS脚本中定义的方法，通过JavascriptCore.frameWork中提供的<code>callWithArguments</code>方法调用JS方法达到替换原方法，添加新方法的目的。是实现替换和新增方法的核心。</p>
<p>它的原型与ForwardInvocation方法相同</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">JPForwardInvocation</span><span class="p">(</span><span class="kt">id</span> <span class="n">slf</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="n">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>它的内部逻辑并不复杂，主要是读取出传入的invocation对象中的所有参数，根据实际参数的类型将JSValue类型的参数转换成对应的OC类型，最后将参数添加到_TMPInvocationArguments数组以供JS调用。</p>
<p>那如果有一些类确实有用到这个方法进行消息转发（比如为了实现多继承），那原来的逻辑该怎么办？ </p>
<p>JSPatch在替换<code>-forwardInvocation:</code>方法前会新建一个方法<code>-ORIGforwardInvocation:</code>，保存原来的实现IMP，在新的<code>-forwardInvocation:</code>实现里做了个判断，如果转发的方法是JS脚本中想改写的，就走<code>-JPForwardInvocation:</code>逻辑，若不是，就调用<code>-ORIGforwardInvocation:</code>走原来的流程。</p>
<h3 id="对象的持有/转换"><a name="jspatch-convert"></a>对象的持有/转换</h3>
<p>原作者bang在<a href="http://blog.cnbang.net/tech/2808/" target="_blank" rel="external">他的博文中</a>，有较为详细的说明。下面引用了他文章中关于对象持有/转换的细节.</p>
<p>UIView.alloc() 通过上述消息传递后会到OC执行 [UIView alloc]，并返回一个UIView实例对象给JS，这个OC实例对象在JS是怎样表示的呢？怎样可以在JS拿到这个实例对象后可以直接调用它的实例方法 (UIView.alloc().init())？</p>
<p>对于一个自定义id对象，JavaScriptCore会把这个自定义对象的指针传给JS，这个对象在JS无法使用，但在回传给OC时OC可以找到这个对象。对于这个对象生命周期的管理，按我的理解如果JS有变量引用时，这个OC对象引用计数就加1 ，JS变量的引用释放了就减1，如果OC上没别的持有者，这个OC对象的生命周期就跟着JS走了，会在JS进行垃圾回收时释放。<br />传回给JS的变量是这个OC对象的指针，如果不经过任何处理，是无法通过这个变量去调用实例方法的。所以在返回对象时，JSPatch会对这个对象进行封装。</p>
<p>首先，告诉JS这是一个OC对象：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">static</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="nf">toJSObj</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">obj</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;__isObj&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">YES</span><span class="p">),</span> <span class="s">@&quot;cls&quot;</span><span class="o">:</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">obj</span> <span class="n">class</span><span class="p">]),</span> <span class="s">@&quot;obj&quot;</span><span class="o">:</span> <span class="n">obj</span><span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用__isObj表示这是一个OC对象，对象指针也一起返回。接着在JS端会把这个对象转为一个 JSClass 实例：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">_formatOCToJS</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">obj</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">==</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__obj</span><span class="p">)</span> <span class="k">return</span> <span class="nx">obj</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">__isNull</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span>  <span class="c1">//注:这里是为了让JS能够链式调用</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">      <span class="nx">obj</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">_formatOCToJS</span><span class="p">(</span><span class="nx">o</span><span class="p">))</span>
</span><span class="line">      <span class="p">})</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">ret</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="k">instanceof</span> <span class="nb">Function</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="err">，</span><span class="nx">_OC_formatJSToOC</span><span class="p">(</span><span class="nx">args</span><span class="p">))</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">ret</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_formatOCToJS</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">ret</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">obj</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接着看看对象是怎样回传给OC的。上述例子中，view.setBackgroundColor(require(‘UIColor’).grayColor())，这里生成了一个 UIColor 实例对象，并作为参数回传给OC。根据上面说的，这个 UIColor 实例在JS中的表示是一个 JSClass 实例，所以不能直接回传给OC，这里的参数实际上会在 <strong>c 函数进行处理，会把对象的 .</strong>obj 原指针回传给OC。</p>
<p>整个对象的持有/转换的流程图如下:</p>
<p><img src="http://blog.cnbang.net/wp-content/uploads/2015/06/JSPatch1.png" alt="convertpng" /></p>
<h2 id="四、JSPatch_Extension机制"><a name="jspatch-Extension">四、JSPatch Extension机制</a></h2>
<h3 id="如何在JSPatch中预定义C_API供JS调用">如何在JSPatch中预定义C API供JS调用</h3>
<p>上面已经介绍过JSPatch是运用Objective-C runtime和JSBinding技术来在JS中调用Objective-C的方法，但是C API是没法通过runtime技术来获取的。一开始的时候我想使用<code>dlsym</code>函数通过函数名来获取对应的函数指针，通过JS脚本传入C函数的函数名来进行函数调用。但实际上还需要预先定义一个相同类型的函数指针才能调用，做不到完全的动态调用。而且还有一个问题就是像CGRectMake这种，实质上是内联函数，并没有对应的函数地址。更关键的是，没有办法获取C函数的签名，而JS中调用函数是没有具体类型的，传递到OC是以JSValue对象的形式，必须通过转换才能调用对应的C函数。最后的解决方法便是预先在JSContext中提供JS方法和C函数的桥接方法。</p>
<p>这里以定义CGRectMake()来作为例子，如果想在JS中使用CGRectMake()函数，则需要在JPEngine启动的时候，将CGRectMake预定义在JSContext之中。</p>
<p>而且有一点要注意的，CGRectMake返回的并不是一个对象，而是一个struct类型的变量。struct类型是无法返回到JS环境的，所以要转换成NSDictionary的形式。</p>
<p>Extension中需要定义对应的方法来将struct转换成NSDictionary</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">dictOfStruct:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">structData</span> <span class="nf">typeString:</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="nv">type</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">type</span><span class="err">，</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGRect</span> <span class="o">*</span><span class="n">rect</span> <span class="o">=</span> <span class="n">structData</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;x&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">rect</span><span class="o">-&gt;</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="s">@&quot;y&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">rect</span><span class="o">-&gt;</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">),</span> <span class="s">@&quot;width&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">rect</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="err">，</span><span class="s">@&quot;height&quot;</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">rect</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">//下面接着定义其他类型的Struct</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样就可以在startEngine中定义CGRectMake方法了，具体如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;CGRectMake&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">x</span><span class="err">，</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">y</span><span class="err">，</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">width</span><span class="err">，</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">height</span><span class="p">){</span>
</span><span class="line">        <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">([</span><span class="n">x</span> <span class="n">toDouble</span><span class="p">],</span> <span class="p">[</span><span class="n">y</span> <span class="n">toDouble</span><span class="p">],</span> <span class="p">[</span><span class="n">width</span> <span class="n">toDouble</span><span class="p">],</span> <span class="p">[</span><span class="n">height</span> <span class="n">toDouble</span><span class="p">]);</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">JPEngine</span> <span class="nl">dictOfStruct:</span><span class="o">&amp;</span><span class="n">rect</span> <span class="nl">typeString:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)];</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在JS中就可以如此调用桥接函数</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="nx">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><a name="jspatch-boxing"></a>但是如果返回的值是一个<strong>指针或者参数值为指针</strong>要如何解决？</p>
<p>这时候就需要一个Boxing对象对指针和Class这些在JS中无法使用的变量类型进行装箱(box);在JS中调用OC或C方法后，传递回到Objective-C端的再进行拆箱(unbox)。</p>
<p>Boxing对象的定义如下:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">JPBoxing</span> : <span class="nc">NSObject</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">void</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">Class</span> <span class="n">cls</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">unbox</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nf">unboxPointer</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="nf">unboxClass</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">JPBoxing</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define JPBOXING_GEN(_name, _prop, _type) \</span>
</span><span class="line"><span class="cp">+ (instancetype)_name:(_type)obj  \</span>
</span><span class="line"><span class="cp">{   \</span>
</span><span class="line"><span class="cp">    JPBoxing *boxing = [[JPBoxing alloc] init]; \</span>
</span><span class="line"><span class="cp">    boxing._prop = obj;   \</span>
</span><span class="line"><span class="cp">    return boxing;  \</span>
</span><span class="line"><span class="cp">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JPBOXING_GEN</span><span class="p">(</span><span class="n">boxObj</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">id</span><span class="p">)</span>
</span><span class="line"><span class="n">JPBOXING_GEN</span><span class="p">(</span><span class="n">boxPointer</span><span class="p">,</span> <span class="n">pointer</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span>
</span><span class="line"><span class="n">JPBOXING_GEN</span><span class="p">(</span><span class="n">boxClass</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">Class</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">unbox</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">obj</span><span class="p">)</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">obj</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">unboxPointer</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">pointer</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="n">unboxClass</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">cls</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意到unbox里的一个<code>return self</code>的写法，这里是一个trick。因为前面介绍到的<code>formatJSToOC</code>函数的定义如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">id</span> <span class="n">formatJSToOC</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">jsval</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个函数需要负责处理JS到OC端的类型转换，但是如果变量类型是指针或者Class类型的话就和无法和id类型写在同一个处理函数里。所以如果是JPBoxing中的obj为nil，则说明是非id类型，直接返回这个JPBoxing。外部得到的这个JPBoxing对象，则再进行相应类型拆箱。</p>
<p>使用这个Boxing类，调用Extension中的C API时，对指针拆箱，再调用实际的C方法; 返回时，对JS中无法使用的类型进行装箱后再返回; 根据这个机制便可实现对大部分C API的封装。下面以<code>UIGraphicsGetCurrentContext()</code>为例:</p>
<p><img src="http://ww1.sinaimg.cn/mw1024/68e55315gw1eu0bbdxplrj20e5026mxg.jpg" alt="jpboxing1" /><br /><img src="http://ww4.sinaimg.cn/mw1024/68e55315gw1eu0bb95xx3j20ez0aa75n.jpg" alt="jpboxing2" /></p>
<p>效果如下：</p>
<p><img src="http://ww1.sinaimg.cn/mw1024/68e55315gw1eu0bb1sjvsj208w0geaa7.jpg" alt="jpboxing3" /></p>
<h3 id="使用JPExtesnion扩展机制对C_API和Struct进行扩展">使用JPExtesnion扩展机制对C API和Struct进行扩展</h3>
<p>在上一节，我对如何在JSPatch中调用C API进行了介绍。 但是面对大量的C API，需要一个满足以下需求的扩展机制：</p>
<ol>
<li>可模块化加载</li>
<li>js脚本可动态加载</li>
<li>可以在extension中添加struct类型</li>
</ol>
<p>以下是JPExtension协议的定义，所有的C API扩展都需要继承JPExtension协议</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@protocol</span> <span class="nc">JPExtensionProtocol</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">@optional</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">main:</span><span class="p">(</span><span class="n">JSContext</span> <span class="o">*</span><span class="p">)</span><span class="n">context</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="nf">sizeOfStructWithTypeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">dictOfStruct:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">structData</span> <span class="nf">typeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">structData:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">structData</span> <span class="nf">ofDict:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dict</span> <span class="nf">typeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>开发者可在<code>- (void)main:(JSContext * )context</code>中添加C API，C API会被添加到JS所在的执行环境中。而后面的三个方法从方法名可以知道，extension中如果要定义struct的话则需要实现这三个方法。因为JS中是无法定义和使用c struct的，所以需要提供相应的互相转换方法(struct与NSDictionary互相转换)，具体实现以<code>CGAffineTransform</code>为例：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="nf">sizeOfStructWithTypeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">typeName</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;CGAffineTransform&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CGAffineTransform</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">dictOfStruct:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">structData</span> <span class="nf">typeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">typeName</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;CGAffineTransform&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGAffineTransform</span> <span class="o">*</span><span class="n">trans</span> <span class="o">=</span> <span class="p">(</span><span class="n">CGAffineTransform</span> <span class="o">*</span><span class="p">)</span><span class="n">structData</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">JPCGTransform</span> <span class="nl">transDictOfStruct:</span><span class="n">trans</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">structData:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">structData</span> <span class="nf">ofDict:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dict</span> <span class="nf">typeName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">typeName</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">typeName</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;CGAffineTransform&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">JPCGTransform</span> <span class="nl">transStruct:</span><span class="n">structData</span> <span class="nl">ofDict:</span><span class="n">dict</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>实现了这三个方法后，JPEngine会将实现了这三个方法extesnion放入_structExtension内。当在JS中调用含有相关struct的方法时，JSEngine会遍历整个_structExtension，找到相应的转换方法。</p>
<p>根据JPExtension协议，模块化加载就变得非常简单：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">main:</span><span class="p">(</span><span class="n">JSContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">extensionArray</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">JPCGTransform</span> <span class="n">instance</span><span class="p">],</span> <span class="p">[</span><span class="n">JPCGContext</span> <span class="n">instance</span><span class="p">],</span>
</span><span class="line">                                            <span class="p">[</span><span class="n">JPCGGeometry</span> <span class="n">instance</span><span class="p">],</span> <span class="p">[</span><span class="n">JPCGBitmapContext</span> <span class="n">instance</span><span class="p">],</span>
</span><span class="line">                                            <span class="p">[</span><span class="n">JPCGColor</span> <span class="n">instance</span><span class="p">],</span> <span class="p">[</span><span class="n">JPCGImage</span> <span class="n">instance</span><span class="p">],</span> <span class="p">[</span><span class="n">JPCGPath</span> <span class="n">instance</span><span class="p">]];</span>
</span><span class="line">    <span class="p">[</span><span class="n">JPEngine</span> <span class="nl">addExtensions:</span><span class="n">extensionArray</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在JS脚本则可以这样调用：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">extensionArr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;JPCoreGraphics&#39;</span><span class="p">).</span><span class="nx">instance</span><span class="p">(),</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;JPUIKit&#39;</span><span class="p">).</span><span class="nx">instance</span><span class="p">()]</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;JPEngine&#39;</span><span class="p">).</span><span class="nx">addExtensions</span><span class="p">(</span><span class="nx">extensionArr</span><span class="p">)</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当然，为了提高项目的性能，你也可以只调用你需要的模块。</p>
<h3 id="C_API定义时需要注意的问题">C API定义时需要注意的问题</h3>
<p>C API中，有大量的参数或者是返回类型都是指针，包括像CGContextRef这种也是指针，而OC对象在JS环境中也是无法使用的。上面的章节已经提到了从OC端返回给JS端时必须用一个封装对象(JPBoxing)来将指针和对象封装起来。JPExtension提供了以下API来封装OC中的对象和指针成JPBoxing和将JPBoxing对象。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nf">formatPointerJSToOC:</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="p">)</span><span class="nv">val</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">formatPointerOCToJS:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">pointer</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">formatJSToOC:</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="p">)</span><span class="nv">val</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">formatOCToJS:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>C API封装实例:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;UIGraphicsGetCurrentContext&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGContextRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">formatPointerOCToJS:</span><span class="n">c</span><span class="p">];</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;UIGraphicsBeginImageContext&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">void</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">sizeDict</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGSize</span> <span class="n">size</span><span class="p">;</span>
</span><span class="line">        <span class="p">[</span><span class="n">JPCGGeometry</span> <span class="nl">sizeStruct:</span><span class="o">&amp;</span><span class="n">size</span> <span class="nl">ofDict:</span><span class="n">sizeDict</span><span class="p">];</span>
</span><span class="line">        <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意到<code>UIGraphicsGetCurrentContext()</code>中返回的是一个CGContextRef类型，所以添加这个扩展API的时候需要将返回类型改为id类型，并将CGContextRef指针封装在JPBoxing中。而<code>UIGraphicsBeginImageContext()</code>需要的是一个CGSize参数，这时候需要在JS端传入一个<code>{x:100, y:100}</code>的Javascript object，这个object会在OC中被转换为NSDictionary.</p>
<p>C API的返回值也需要判断返回值的类型来进行不同的封装，当返回的结果是JavascriptCore.Framework所不支持转换的类型(NSArray，NSDictionary，NSString，NSNumber，NSBlock)，则需要通过<code>formatOCToJS:</code>方法来封装返回。而且返回类型是NSArray，NSDictionary，NSString时，如果你直接返回，JavascriptCore会将返回值转换为JS中的Array，Object，String，你就无法再使用OC的方法。如果你想在JS中使用这三种类型的方法，也需要用<code>formatOCToJS:</code>方法进行封装。</p>
<h3 id="在JSPatch中的操作内存与&amp;取地址运算符">在JSPatch中的操作内存与&amp;取地址运算符</h3>
<p>与C语言不同，Javascript不能显式的声明一个指向某块内存的指针，也没有<code>&amp;</code>取地址运算符，Javascript是根据参数是引用类型还是基本类型决定传递引用还是传参。但是指针与取地址在C语言以及OC中都会时常被用到。比如如下的情况:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">......</span>
</span><span class="line"><span class="n">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;littleliang&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">[</span><span class="n">invocation</span> <span class="nl">setArgument:</span><span class="o">&amp;</span><span class="n">str</span> <span class="nl">atIndex:</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line"><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>JPMemory扩展解决了这个问题，其中封装了内存操作中常用的一些常用的c函数。包括<code>malloc</code>，<code>memset</code>，<code>free</code>，<code>memcpy</code>，<code>memncpy</code>，<code>memmove</code>。</p>
<p>而对<code>&amp;</code>取地址运算符，JPMemory扩展也进行了函数封装，在JS补丁中可以对调用<code>getpointer</code>方法获取对象的指针、指针的指针，针对上述的代码，现在便可以以以下的形式调用。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">......</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;NSString&#39;</span><span class="p">).</span><span class="nx">stringWithString</span><span class="p">(</span><span class="s1">&#39;littleliang&#39;</span><span class="p">)</span>
</span><span class="line"><span class="nx">invocation</span><span class="p">.</span><span class="nx">setArgument_atIndex</span><span class="p">(</span><span class="nx">getpointer</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span><span class="err">，</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>getpointer的底层源码如下:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nf">getPointerFromJS:</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="p">)</span><span class="nv">val</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([[</span><span class="n">val</span> <span class="n">toObject</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">([[</span><span class="n">val</span> <span class="n">toObject</span><span class="p">][</span><span class="s">@&quot;__obj&quot;</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">JPBoxing</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">void</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="p">[(</span><span class="n">JPBoxing</span> <span class="o">*</span><span class="p">)[</span><span class="n">val</span> <span class="n">toObject</span><span class="p">][</span><span class="s">@&quot;__obj&quot;</span><span class="p">]</span> <span class="n">unboxPointer</span><span class="p">];</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">pointer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">pointer</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="kt">id</span> <span class="n">jpobj</span> <span class="o">=</span> <span class="p">[(</span><span class="n">JPBoxing</span> <span class="o">*</span><span class="p">)[</span><span class="n">val</span> <span class="n">toObject</span><span class="p">][</span><span class="s">@&quot;__obj&quot;</span><span class="p">]</span> <span class="n">unbox</span><span class="p">];</span>
</span><span class="line">                <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">jpobj</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">val</span> <span class="n">toObject</span><span class="p">][</span><span class="s">@&quot;__obj&quot;</span><span class="p">];</span>
</span><span class="line">            <span class="o">*</span><span class="n">p</span>     <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSAssert</span><span class="p">(</span><span class="n">NO</span><span class="p">,</span> <span class="s">@&quot;getpointer only support pointer and id type!&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>而通过JPMemory中的pval或添加pvalWithXXX便可获得指针所指的对象或XXX类型的变量。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;pval&quot;</span><span class="p">]</span>    <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">jsVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">void</span> <span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">formatPointerJSToOC:</span><span class="n">jsVal</span><span class="p">];</span>
</span><span class="line">        <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="o">*</span><span class="p">)</span><span class="n">m</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">formatOCToJS:</span><span class="n">obj</span><span class="p">];</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;pvalWithBool&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">jsVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">void</span> <span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">formatPointerJSToOC:</span><span class="n">jsVal</span><span class="p">];</span>
</span><span class="line">        <span class="kt">BOOL</span> <span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="kt">BOOL</span> <span class="o">*</span><span class="p">)</span><span class="n">m</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">formatOCToJS:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">b</span><span class="p">]];</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h3 id="include函数">include函数</h3>
<p>在JSPatch最新的更新中，支持了在JS中调用include方法。可以在一个JS文件中加载其他JS文件，包括补丁脚本、第三方脚本。</p>
<p>使用方法如下:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">extensionArr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;JPInclude&#39;</span><span class="p">).</span><span class="nx">instance</span><span class="p">()]</span>
</span><span class="line">    <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;JPEngine&#39;</span><span class="p">).</span><span class="nx">addExtensions</span><span class="p">(</span><span class="nx">extensionArr</span><span class="p">)</span>
</span><span class="line">    <span class="nx">include</span><span class="p">(</span><span class="s1">&#39;another.js&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在我自己的分支中，include函数支持加载选项。默认加载选项是兼容方式加载（为满足支持OC，会通过正则表达式替换部分函数的调用方法），而第三方库是不需要被改变的。第二个参数是加载选项，默认是0或者不传入第二个参数，加载第三方库是1。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">include</span><span class="p">(</span><span class="s1">&#39;thridparty.js&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h2 id="五、JSPatch中的实现技巧"><a name="jspatch-Tech">五、JSPatch中的实现技巧</a></h2>
<h3 id="GCD的实现">GCD的实现</h3>
<p>JSPatch采用的是预先在JSContext中封装了对GCD的调用，才能在JS中使用GCD，其代码如下。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">__weak</span> <span class="n">JSContext</span> <span class="o">*</span><span class="n">weakCtx</span> <span class="o">=</span> <span class="n">context</span><span class="p">;</span>
</span><span class="line">  <span class="n">context</span><span class="p">[</span><span class="s">@&quot;dispatch_after&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">double</span> <span class="n">time</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">JSValue</span> <span class="o">*</span><span class="n">currSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">      <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="n">int64_t</span><span class="p">)(</span><span class="n">time</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">          <span class="n">JSValue</span> <span class="o">*</span><span class="n">prevSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">currSelf</span><span class="p">;</span>
</span><span class="line">          <span class="p">[</span><span class="n">func</span> <span class="nl">callWithArguments:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">prevSelf</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="n">context</span><span class="p">[</span><span class="s">@&quot;dispatch_async_main&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">JSValue</span> <span class="o">*</span><span class="n">currSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">          <span class="n">JSValue</span> <span class="o">*</span><span class="n">prevSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">currSelf</span><span class="p">;</span>
</span><span class="line">          <span class="p">[</span><span class="n">func</span> <span class="nl">callWithArguments:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">prevSelf</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="n">context</span><span class="p">[</span><span class="s">@&quot;dispatch_sync_main&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">([</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">].</span><span class="n">isMainThread</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="p">[</span><span class="n">func</span> <span class="nl">callWithArguments:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">          <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">              <span class="p">[</span><span class="n">func</span> <span class="nl">callWithArguments:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">          <span class="p">});</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="n">context</span><span class="p">[</span><span class="s">@&quot;dispatch_async_global_queue&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">JSValue</span> <span class="o">*</span><span class="n">currSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">      <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">          <span class="n">JSValue</span> <span class="o">*</span><span class="n">prevSelf</span> <span class="o">=</span> <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">currSelf</span><span class="p">;</span>
</span><span class="line">          <span class="p">[</span><span class="n">func</span> <span class="nl">callWithArguments:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">          <span class="n">weakCtx</span><span class="p">[</span><span class="s">@&quot;self&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">prevSelf</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中有三点需要注意：</p>
<ol>
<li><p>在block里是不能直接使用context的，因为会造成循环引用。所以在这里有两个处理方式，要么是使用__weak修饰符，要么就是使用JavascriptCore.framework提供的api<br /><code>[JSContext currentContext]</code>。</p>
</li>
<li><p>在调用JSContext的<code>callWithArguments:</code>实例方法时，需要先保存JSContext中的实例对象<code>self</code>，调用完之后再重新赋值回去。否则在调用完JS方法后，<code>self</code>会变成nil</p>
</li>
<li><p>还有一点就是在<code>dispatch_sync_main</code>这个方法里，作者对代码所在的运行线程进行了一个判断，如果已经在主线程中就直接执行这个block，防止了死锁的发生。</p>
</li>
</ol>
<h3 id="处理JS脚本的异常">处理JS脚本的异常</h3>
<p>如果JS脚本出现了异常的话，在OC这边是不会知道的，需要使用JavaScriptCore.framwork中的exceptionHandler才能捕获这个异常，具体代码如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">.</span><span class="n">exceptionHandler</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">JSContext</span> <span class="o">*</span><span class="n">con</span><span class="p">,</span> <span class="n">JSValue</span> <span class="o">*</span><span class="n">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSAssert</span><span class="p">(</span><span class="n">NO</span><span class="p">,</span> <span class="s">@&quot;js exception: %@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h3 id="使用#pragma来抑制warning">使用#pragma来抑制warning</h3>
<p>作者使用#pargama宏来对一些warning进行了抑制，详细的介绍可以看参考<a href="http://nshipster.cn/clang-diagnostics/" target="_ blank" rel="external">Matt Thomson写的一篇关于clang diagnostics的文章</a>，里面提供了一个<a href="http://fuckingclangwarnings.com/" target="_ blank" rel="external">网站</a>详细地记录了抑制各种warning的写法。</p>
<h3 id="使用宏来预定义IMP函数">使用宏来预定义IMP函数</h3>
<p>由于要替换原有的函数实现，所以要预先定义好各种返回类型的IMP函数。如果全部写出来的话，将会耗费大量篇幅来写差不多的函数实现，这里作者使用了宏来进行替换，具体代码如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#define JPMETHOD_IMPLEMENTATION(_type, _typeString, _typeSelector) \</span>
</span><span class="line"><span class="cp">    JPMETHOD_IMPLEMENTATION_RET(_type, _typeString, return [[ret toObject] _typeSelector]) \</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define JPMETHOD_IMPLEMENTATION_RET(_type, _typeString, _ret) \</span>
</span><span class="line"><span class="cp">static _type JPMETHOD_IMPLEMENTATION_NAME(_typeString) (id slf, SEL selector) {    \</span>
</span><span class="line"><span class="cp">    JSValue *fun = getJSFunctionInObjectHierachy(slf, selector);    \</span>
</span><span class="line"><span class="cp">    JSValue *ret = [fun callWithArguments:_TMPInvocationArguments];  \</span>
</span><span class="line"><span class="cp">    _ret;    \</span>
</span><span class="line"><span class="cp">}   \</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define JPMETHOD_IMPLEMENTATION_NAME(_typeString) JPMethodImplement_##_typeString</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma clang diagnostic push</span>
</span><span class="line"><span class="cp">#pragma clang diagnostic ignored &quot;-Wunused-variable&quot;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define JPMETHOD_RET_ID \</span>
</span><span class="line"><span class="cp">    id obj = formatJSToOC(ret); \</span>
</span><span class="line"><span class="cp">    if ([obj isKindOfClass:[NSNull class]]) return nil;  \</span>
</span><span class="line"><span class="cp">    return obj;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define JPMETHOD_RET_STRUCT(_methodName)    \</span>
</span><span class="line"><span class="cp">    id dict = formatJSToOC(ret);   \</span>
</span><span class="line"><span class="cp">    return _methodName(dict);</span>
</span><span class="line">
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="kt">void</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">id</span><span class="p">,</span> <span class="n">JPMETHOD_RET_ID</span><span class="p">)</span>
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="n">CGRect</span><span class="p">,</span> <span class="n">rect</span><span class="p">,</span> <span class="n">JPMETHOD_RET_STRUCT</span><span class="p">(</span><span class="n">dictToRect</span><span class="p">))</span>
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="n">CGSize</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">JPMETHOD_RET_STRUCT</span><span class="p">(</span><span class="n">dictToSize</span><span class="p">))</span>
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">JPMETHOD_RET_STRUCT</span><span class="p">(</span><span class="n">dictToPoint</span><span class="p">))</span>
</span><span class="line"><span class="n">JPMETHOD_IMPLEMENTATION_RET</span><span class="p">(</span><span class="n">NSRange</span><span class="p">,</span> <span class="n">range</span><span class="p">,</span> <span class="n">JPMETHOD_RET_STRUCT</span><span class="p">(</span><span class="n">dictToRange</span><span class="p">))</span>
</span><span class="line"><span class="p">......</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h2 id="六、遇到的问题与解决方法"><a name="jspatch-problem">六、遇到的问题与解决方法</a></h2>
<p>在了解JSPatch的过程中，也遇到过一些比较棘手的问题，这里总结一下。</p>
<h3 id="1-_在JSPatch中初始化UIWebView导致HTML无法渲染">1. 在JSPatch中初始化UIWebView导致HTML无法渲染</h3>
<p>这个问题最初是由一个JSPatch用户在<a href="https://github.com/bang590/JSPatch/issues/61" target="_blank" rel="external">issue</a>中提出。具体的表现是当在JSPatch中声明一个UIWebView，并对一个URL调用loadRequest方法后，无法渲染该HTML页面。<br /><img src="https://cloud.githubusercontent.com/assets/7334742/8666691/731b0354-2a27-11e5-95cc-90df45fac11f.png" alt="图片" /><br />后来经过查资料发现在JSContext中初始化UIWebView就会<a href="http://stackoverflow.com/questions/28638293/creating-a-uiwebview-from-a-jscontext-block-prevents-assets-from-loading-on-ios8" target="_blank" rel="external">出现这个问题</a>。</p>
<p>我猜测是<code>UIWebView</code>在初始化的过程中会初始化一个全局的<code>JSContext</code>对象，但是JSPatch也有用到<code>JSContext</code>，这其中造成了某种冲突。导致在<code>UIWebView</code>初始化JSContext失败。</p>
<p><strong>解决方法:</strong></p>
<p>1、在JSPatch之外启动调用一次<code>UIWebView</code>的<code>init</code>方法。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIWebView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIWebView</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>   <span class="c1">//Useless. Just to load the UIWebview framework.</span>
</span><span class="line">    <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectZero</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">JPEngine</span> <span class="n">startEngine</span><span class="p">];</span>
</span><span class="line">   <span class="c1">//.......</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2、在JSPatch中显式地创建UIWebView的JSContext</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">defineClass</span><span class="p">(</span><span class="s1">&#39;UIWebView&#39;</span><span class="p">,{</span>
</span><span class="line">	 <span class="nx">loadRequest</span> <span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">){</span>
</span><span class="line">	 	<span class="nx">self</span><span class="p">.</span><span class="nx">valueForKeyPath</span><span class="p">(</span><span class="s2">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span><span class="p">)</span>  		
</span><span class="line">	 	<span class="nx">self</span><span class="p">.</span><span class="nx">ORIGloadRequest</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
</span><span class="line"> <span class="p">}</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h3 id="2-_无法调用参数为id_*类型的方法">2. 无法调用参数为id * 类型的方法</h3>
<p>在上面的章节中我介绍了我是如何在JS中调用一个参数是指针的方法:</p>
<ol>
<li>通过<code>JPMemoery</code>Extension中的<code>malloc</code>声明一个指针或者调用<code>getpointer</code>去获得一个对象的地址。</li>
<li>调用方法后使用<code>pval</code>方法来获得指针所指的对象。</li>
</ol>
<p>这种方法调用像NSInvocation中的<code>- (void)getReturnValue:(void * )retLoc</code>、<code>- (void)setArgument:(void * )argumentLocation atIndex:(NSInteger)idx;</code>以及一些C API没有任何问题。</p>
<p>但是如果调用NSString中的<code>- (BOOL)writeToFile:(NSString * )path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError * * )error</code>则会发现传进去的指针参数所指向的NSError对象在回到JS环境的时候已经被释放了。</p>
<p>实际上NSError <em>* 参数在编译器中会被解释成NSError \</em>&#8211;__ autoreleasing*类型，该对象生成后将会被加入到autoreleasing- pool中，开发者无法控制他的释放时机。随后，我对各个关键点进行打断点对这个自动释放对象进行跟中，发现这个对象一回到JSContext的执行环境就会被释放。</p>
<p><strong>解决方法：</strong></p>
<p>解决这个问题的思路是在调用完参数为id * 类型的方法后(<code>callSelector</code>中调用完<code>[invocation inoke]</code>后)，对该自动释放对象进行强引用，使得这个对象在回到JS环境的时候依然存在。这里我使用了一个NSDictonry作为临时自动释放对象的内存池，当生成一个自动释放对象后，将其添加到内存池中(key为其内存地址)，使得这个自动释放对象被内存池强引用。保证了在JS环境中可以访问到该对象，不需要该对象时再手动释放该对象(remove掉内存池的对象)。具体逻辑如下:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">case</span> <span class="sc">&#39;^&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">([</span><span class="n">valObj</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">JPBoxing</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">                    <span class="kt">void</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[((</span><span class="n">JPBoxing</span> <span class="o">*</span><span class="p">)</span><span class="n">valObj</span><span class="p">)</span> <span class="n">unboxPointer</span><span class="p">];</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="n">argumentType</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;@&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                        <span class="n">memset</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="p">));</span>
</span><span class="line">                        <span class="p">[</span><span class="n">_markArray</span> <span class="nl">addObject:</span><span class="n">valObj</span><span class="p">];</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                    <span class="p">[</span><span class="n">invocation</span> <span class="nl">setArgument:</span><span class="o">&amp;</span><span class="n">value</span> <span class="nl">atIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">                    <span class="k">break</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当参数类型是指针的时候进行一个判断，如果指针所指的是id类型。则将JPBoxing加入到一个_markArray中。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//...</span>
</span><span class="line"><span class="p">[</span><span class="n">invocation</span> <span class="n">invoke</span><span class="p">];</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">_markArray</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">JPBoxing</span> <span class="o">*</span><span class="n">box</span> <span class="k">in</span> <span class="n">_markArray</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">void</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="p">[</span><span class="n">box</span> <span class="n">unboxPointer</span><span class="p">];</span>
</span><span class="line">            <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="o">*</span><span class="p">)</span><span class="n">pointer</span><span class="p">);</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">@synchronized</span><span class="p">(</span><span class="n">_TMPMemoryPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="p">[</span><span class="n">_TMPMemoryPool</span> <span class="nl">setObject:</span><span class="n">obj</span> <span class="nl">forKey:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInteger:</span><span class="p">[</span><span class="n">obj</span> <span class="n">hash</span><span class="p">]]];</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果_markArray大小不为零，则将数组中的JPBoxing中指针所指对象加入到内存池中（key为对象的hashCode），使得自动释放对象被强引用。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span><span class="p">[</span><span class="s">@&quot;releaseTmpObj&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="kt">void</span><span class="p">(</span><span class="n">JSValue</span> <span class="o">*</span><span class="n">jsVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">([[</span><span class="n">jsVal</span> <span class="n">toObject</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">            <span class="kt">void</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span>  <span class="p">[(</span><span class="n">JPBoxing</span> <span class="o">*</span><span class="p">)([</span><span class="n">jsVal</span> <span class="n">toObject</span><span class="p">][</span><span class="s">@&quot;__obj&quot;</span><span class="p">])</span> <span class="n">unboxPointer</span><span class="p">];</span>
</span><span class="line">            <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="o">*</span><span class="p">((</span><span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="o">*</span><span class="p">)</span><span class="n">pointer</span><span class="p">);</span>
</span><span class="line">            <span class="k">@synchronized</span><span class="p">(</span><span class="n">_TMPMemoryPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="p">[</span><span class="n">_TMPMemoryPool</span> <span class="nl">removeObjectForKey:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInteger:</span><span class="p">[</span><span class="n">obj</span> <span class="n">hash</span><span class="p">]]];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>JSPatch脚本中调用<code>releaseTmpObj</code>方法手动释放该临时对象。</p>
<h2 id="七、总结"><a name="conclusion">七、总结</a></h2>
<p>JSPatch中我的总结如下：</p>
<p>1、 为支持C API的扩展，增加了对指针和Class变量的封装以及拆解。因为JS中并不能使用以及声明一个指针，而在C API中，指针作为参数是非常常见的，所以需要将指针封装在一个JPBoxing中，并以{“__ className”:”JPBoxing”，”__ obj”:[JPBoxing boxPointer:pointer]}的形式回传回JS。下次调用的时候再将__obj中的指针拆解出来。</p>
<p>2、 支持对第三方库的调用。在include方法中增加了对第三方js库调用的支持。</p>
<p>3、 添加了sizeof方法。通过遍历加载到JS中的Extension中实现JPExtension协议的<code>- (size_t)sizeOfStructWithTypeName:(NSString * )typeName</code>方法，使得在JS端可以通过传入一个字符串的形式:<code>sizeof(&#39;CGRect&#39;)</code>来获取不同strut类型变量的大小，配合JPMemory扩展中的方法可以malloc出一块指定大小的内存，传入到某些C API中。</p>
<p>4、 添加JPMemory扩展，Javascript中是无法操作具体的内存也没有指针的概念，但是通过JPMemory扩展，可以让JSPatch拥有操作与访问内存的功能，以及获取对象的指针、指针的指针的功能。</p>
<p>5、 添加了保存的__autoreleasing对象机制，使自动释放对象在返回到JS运行环境的时候不会被自动释放，在JS脚本可以继续访问。使用一个NSDictonry作为临时自动释放对象的内存池，当生成一个自动释放对象后，将其添加到内存池中(key为其内存地址)，使得这个自动释放对象被内存池强引用。保证了在JS环境中可以访问到该对象，不需要的时候再手动释放该对象(remove掉内存池的对象)。</p>
<h4 id="维护："><strong>维护：</strong></h4>
<p>1、 修复了在JS中<a href="https://github.com/bang590/JSPatch/commit/3c9a10cd86fc13f7e0909bb3a2a93bba286aa1c9" target="_ blank" rel="external">传递nil参数时造成的崩溃</a>。JavaScript中并没有nil这个类型的参数，只有undefined以及null类型。桥接的时候JavascriptCore.framework会将js中的null类型转换为OC中的[NSNull null]类型，所以在调用方法时必须加以判断，将[NSNull null]转换为nil。为了防止真需要传递[NSNull null]参数，在JS中设置了一个名为nsnull的全局变量，开发者如要传递[NSNull null]则可以使用nsnull。</p>
<p>2、 修复了使用JSPatch判断struct时造成的<a href="https://github.com/bang590/JSPatch/commit/6df89bec6c8f4217500be316832fecbd898d1b46" target="_ blank" rel="external">误判</a>。原作者bang原本使用的@encode()方法产生的C字符串来遍历加载到JS中的所有extension的<code>- (size_t)sizeOfStructWithTypeEncode:(NSString * )typeName</code>方法，@encode产生结果是这样的形式:<code>{CGPoint=dd}</code>，并使用</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">typeEncode</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;CGPoint&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>进行匹配。但事实上这样的方法是会导致CGPoint被误判为CGRect，因为CGRect进行@encode的结果为<code>{CGRect={CGPoint=dd}{CGSize=dd}}</code>。而后bang提议改为</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">typeEncode</span> <span class="nl">rangeOfString:</span><span class="s">@&quot;CGPoint&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">==</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>但是这样会与sizeof功能有所冲突，而且在随后的测试中我发现@encode(NSRange)的结果为<code>{_NSRange=QQ}</code>，所以检测location==1也是不可以行的。最后我通过<a href="https://github.com/bang590/JSPatch/blob/6df89bec6c8f4217500be316832fecbd898d1b46/JSPatch/JPEngine.m#L1003" target="_ blank" rel="external">提取出typeEncode中第一个Struct的名字</a>解决了这一问题</p>
<p>3、 修复了JSPatch添加Extension时造成<a href="https://github.com/bang590/JSPatch/commit/c20e2910ee8e73e3ae22db071a43072c9e6ca149" target="_ blank" rel="external">无限循环加载</a>的问题。</p>
<p>代码提交情况: <a href="https://github.com/bang590/JSPatch/graphs/contributors" target="_ blank" rel="external">1916++ / 348—</a> 及 <a href="https://github.com/bang590/JSPatch/commits/master" target="_ blank" rel="external">commit log</a></p>
<h4 id="未来计划">未来计划</h4>
<p>JSPatch功能上已能满足hot fix动态修复的基本需求。接下来的工作重点主要添加脚本的传输和脚本加密的机制，防止未授权的第三方对脚本进行串改；集成进项目中测试实际性能和内存占用情况，改善性能；根据业务需求继续添加常用扩展API。</p>
<p>（持续更新中…）</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写高性能的Swift代码]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2015/12/16/bian-xie-gao-zhi-liang-de-swiftdai-ma/"/>
    <updated>2015-12-16T20:00:26+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2015/12/16/bian-xie-gao-zhi-liang-de-swiftdai-ma</id>
    <content type="html"><![CDATA[<p>
下面这篇文档收集了一系列编写高性能 Swift 代码的要诀和技巧。文档的目标读者是编译器和标准库开发人员。

文档中的一些技巧可以帮助提升您的 Swift 程序质量，使您的代码不容易出错且可读性更好。显式地标记最终类和类协议是两个显而易见的例子。 然而文档中还有一些技巧是不符合规矩的，扭曲的，仅仅解决一些比编译器或语言的特殊的临时性需求。文档中的很多建议来自于多方面的权衡，例如：运行时、字节大小、代码可读性等等。
</p>
<h2>启用优化</h2>
<p>第一个应该做的事情就是启用优化。Swift 提供了三种不同的优化级别：<br />
<ul>
<li>-Onone: 这意味着正常的开发。它执行最小优化和保存所有调试信息。</li>
<li>-O: 这意味着对于大多数生产代码。编译器执行积极地优化，可以大大改变提交代码的类型和数量。调试信息将被省略但还是会有损害的。</li>
<li>-Ounchecked: 这是一个特殊的优化模式，它意味着特定的库或应用程序，这是以安全性来交换的。编译器将删除所有溢出检查以及一些隐式类型检查。这不是在通常情况下使用的，因为它可能会导致内存安全问题和整数溢出。如果你仔细审查你的代码，那么对整数溢出和类型转换来说是安全的。</li>
<!-- more -->
</ul>
在 Xcode UI 中，可以修改的当前优化级别如下：
</p>
<h2>整个组件优化</h2>
<p>默认情况下Swift单独编译每个文件。这使得Xcode可以非常快速的并行编译多个文件。然而，分开编译每个文件可以预防某些编译器优化。Swift也可以是一个单一的编译单元一样优化这个程序。这个模式可以使用命令行flag-whole-module-optimization来激活。在这种模式下编译的程序将最有可能需要更长时间来编译，但可以运行更快。<br />
这个模式可以通过Xcode构建设置中的<code>Whole Module Optimization</code>来激活。
</p>
<h2>降低动态调度</h2>
<p>
Swift在默认下是一个类似Objective-C的非常动态的语言。与Objective-C不同的是，Swift给了程序员通过消除和减少这种特性来提供运行时性能的能力。本节提供几个可以这样操作的语言结构的示例。
</p>
<h2>动态调度</h2>
<p>
类使用动态调度的方法和默认的属性访问。因此在下面的代码中，a.aProperty、a.doSomething() 和 a.doSomethingElse() 都将通过动态调度来调用：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">class</span> <span class="n">A</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">aProperty:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line">  <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">  <span class="n">dynamic</span> <span class="n">doSomethingElse</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">B</span> <span class="o">:</span> <span class="n">A</span> <span class="p">{</span>
</span><span class="line">  <span class="n">override</span> <span class="n">var</span> <span class="n">aProperty</span> <span class="p">{</span>
</span><span class="line">    <span class="n">get</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">    <span class="n">set</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">override</span> <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">usingAnA</span><span class="p">(</span><span class="nl">a:</span> <span class="n">A</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">a</span><span class="p">.</span><span class="n">doSomething</span><span class="p">()</span>
</span><span class="line">  <span class="n">a</span><span class="p">.</span><span class="n">aProperty</span> <span class="o">=</span> <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
在Swift 中，动态调度默认通过一个vtable（虚函数表）间接调用。如果使用一个dynamic关键字声明，Swift将通过调用Objective-C通知来发送调用代替。这两种情况中，这种情况会比直接的函数调用较慢，因为它防止了对间接调用本身之外的程序开销的编译器优化。在关键性能的代码出，人常常会想限制这种动态行为。
</p>
<h4>建议：当你知道声明不需要被重写时使用<code>final</code></h4>
<p>
final是一个类、方法、或一个属性声明中的一个限制，使这样的声明不会被重写。
这意味着编译器可以调用直接的函数调用来代替间接调用。例如下面的 C.array1 和 D.array1 将会被直接访问。与之相反，D.array2 将通过一个虚函数表访问。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">final</span> <span class="n">class</span> <span class="n">C</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// No declarations in class &#39;C&#39; can be overridden.</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">array1:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line">  <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">D</span> <span class="p">{</span>
</span><span class="line">  <span class="n">final</span> <span class="n">var</span> <span class="n">array1</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="c1">// &#39;array1&#39; cannot be overridden by a computed property.</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">array2:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>      <span class="c1">// &#39;array2&#39; *can* be overridden by a computed property.</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">usingC</span><span class="p">(</span><span class="nl">c:</span> <span class="n">C</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="n">c</span><span class="p">.</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// Can directly access C.array without going through dynamic dispatch.</span>
</span><span class="line">   <span class="n">c</span><span class="p">.</span><span class="n">doSomething</span><span class="p">()</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// Can directly call C.doSomething without going through virtual dispatch.</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">usingD</span><span class="p">(</span><span class="nl">d:</span> <span class="n">D</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">   <span class="n">d</span><span class="p">.</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// Can directly access D.array1 without going through dynamic dispatch.</span>
</span><span class="line">   <span class="n">d</span><span class="p">.</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">...</span> <span class="c1">// Will access D.array2 through dynamic dispatch.</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h4>当声明的不用被文件外部被访问的时候，使用<code>private</code></h4>
<p>将<code>private</code>关键字用在声明上，会限制对其进行了声明的文件的可见性。这会让编辑器有能力甄别出所有其他潜在的覆盖声明。如此，由于没有了任何这样的声明，使得编译器可以自动的推断出<code>final</code>关键字，并对此去掉对方法的间接调用和属性的访问。例如在如下的e.doSomething() 和 f.myPrivateVar 中，就将可以被直接访问，假定在同一个文件中，E,F 并没有任何覆盖的声明：<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">private</span> <span class="n">class</span> <span class="n">E</span> <span class="p">{</span>
</span><span class="line">  <span class="n">func</span> <span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">F</span> <span class="p">{</span>
</span><span class="line">  <span class="n">private</span> <span class="n">var</span> <span class="n">myPrivateVar</span> <span class="o">:</span> <span class="n">Int</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">usingE</span><span class="p">(</span><span class="nl">e:</span> <span class="n">E</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">e</span><span class="p">.</span><span class="n">doSomething</span><span class="p">()</span> <span class="c1">// There is no sub class in the file that declares this class.</span>
</span><span class="line">                  <span class="c1">// The compiler can remove virtual calls to doSomething()</span>
</span><span class="line">                  <span class="c1">// and directly call A’s doSomething method.</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">usingF</span><span class="p">(</span><span class="nl">f:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="n">myPrivateVar</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h2>高效的使用容器类型</h2>
<p>通用的容器 Array 和 Dictionary 是有 Swift 标准库提供的一个重要的功能特性。本节将介绍如何用一种高性能的方式使用这些类型。
</p>
<h4>建议在数组中使用值类型</h4>
<p>
在Swift中，类型可以分成两种不同的类型:值类型（结构体，枚举，元组）和引用类型（类）。一个关键的区分是 NSArray 不能含有值类型。因此当使用值类型时，优化器就不需要去处理对 NSArray 的支持，从而可以在数组上省去大部分消耗。<br />
此外，相比引用类型，如果值类型递归地含有引用类型，那么值类型仅仅需要引用计数器。而如果使用没有引用类型的值类型，就可以避免额外的开销，从而释放数组内的流量。<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">// Don&#39;t use a class here.</span>
</span><span class="line"><span class="k">struct</span> <span class="n">PhonebookEntry</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">name</span> <span class="o">:</span> <span class="n">String</span>
</span><span class="line">  <span class="n">var</span> <span class="n">number</span> <span class="o">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">var</span> <span class="n">a</span> <span class="o">:</span> <span class="p">[</span><span class="n">PhonebookEntry</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
记住要在使用大值类型和使用引用类型之间做好权衡。在某些情况下，拷贝和移动大值类型数据的消耗要大于移除桥接和持有/释放的消耗。
</p>
<h4>建议当 <code>NSArray</code> 桥接不必要时，使用<code> ContiguousArray </code>存储引用类型。</h4>
<p>
如果你需要一个引用类型的数组，而且数组不需要桥接到 NSArray 时，使用 ContiguousArray 替代 Array：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">class</span> <span class="n">C</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="n">var</span> <span class="nl">a:</span> <span class="n">ContiguousArray</span><span class="o">&lt;</span><span class="n">C</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="n">C</span><span class="p">(...),</span> <span class="n">C</span><span class="p">(...),</span> <span class="p">...,</span> <span class="n">C</span><span class="p">(...)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>建议使用适当的改变而不是对象分配。</h4>
<p>
在 Swift 中所有的标准库容器都使用 COW(copy-on-write) 执行拷贝代替即时拷贝。在很多情况下，这可以让编译器通过持有容器而不是深度拷贝，从而省掉不必要的拷贝。如果容器的引用计数大于 1 并容器时被改变时，就会拷贝底层容器。例如：在下面这种情况：当 d 被分配给 c 时不拷贝，但是当 d 经历了结构性的改变追加 2，那么 d 将会被拷贝，然后 2 被追加到 d：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">var</span> <span class="nl">c:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">]</span>
</span><span class="line"><span class="n">var</span> <span class="n">d</span> <span class="o">=</span> <span class="n">c</span>        <span class="c1">// No copy will occur here.</span>
</span><span class="line"><span class="n">d</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>      <span class="c1">// A copy *does* occur here.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果用户不小心时，有时 COW 会引起额外的拷贝。例如，在函数中，试图通过对象分配执行修改。在 Swift 中，所有的参数传递时都会被拷贝一份，例如，参数在调用点之前持有一份，然后在调用的函数结束时释放。也就是说，像下面这样的函数：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">append_one</span><span class="p">(</span><span class="nl">a:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">  <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="n">a</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">append_one</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
尽管由于分配，a 的版本没有任何改变 ，在 append_one后也没有使用 ， 但 a 也许会被拷贝。这可以通过使用 inout 参数来避免这个问题：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="nf">append_one_in_place</span><span class="p">(</span><span class="n">inout</span> <span class="nl">a:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">  <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="n">append_one_in_place</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h2>未检查操作</h2>
<p>Swift 通过在执行普通计算时检查溢出的方法解决了整数溢出的 bug。这些检查在已确定没有内存安全问题会发生的高效的代码中，是不合适的。
</p>
<h4>建议当你确切的知道不会发生溢出时使用不检查整型计算</h4>
<p>
在对性能要求高的代码中，如果你知道你的代码是安全的，那么你可以忽略溢出检查。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">a</span> <span class="o">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line"><span class="n">b</span> <span class="o">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line"><span class="n">c</span> <span class="o">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Precondition: for all a[i], b[i]: a[i] + b[i] does not overflow!</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">...</span> <span class="n">n</span> <span class="p">{</span>
</span><span class="line">  <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>泛型</h4>
<p>
Swift 通过泛型类型的使用，提供了一个非常强大的抽象机制 。Swift 编译器发出一个可以对任何 T 执行 MySwiftFunc<t> 的具体的代码块。生成的代码需要一个函数指针表和一个包含 T 的盒子作为额外的参数。MySwiftFunc<int>和 MySwiftFunc<string> 之间的不同的行为通过传递不同的函数指针表和通过盒子提供的抽象大小来说明。一个泛型的例子:
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">class</span> <span class="n">MySwiftFunc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">MySwiftFunc</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="n">X</span>    <span class="c1">// Will emit code that works with Int...</span>
</span><span class="line"><span class="n">MySwiftFunc</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">Y</span> <span class="c1">// ... as well as String.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
当优化器启用时，Swift 编译器寻找这段代码的调用，并试着确认在调用中具体使用的类型（例如：非泛型类型）。如果泛型函数的定义对优化器来说是可见的，并知道具体类型，Swift 编译器将生成一个有特殊类型的特殊泛型函数。那么调用这个特殊函数的这个过程就可以避免关联泛型的消耗。一些泛型的例子：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">class</span> <span class="n">MyStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="n">func</span> <span class="n">push</span><span class="p">(</span><span class="nl">element:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">  <span class="n">func</span> <span class="n">pop</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">myAlgorithm</span><span class="p">(</span><span class="nl">a:</span> <span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="nl">length:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// The compiler can specialize code of MyStack[Int]</span>
</span><span class="line"><span class="n">var</span> <span class="nl">stackOfInts:</span> <span class="n">MyStack</span><span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line"><span class="c1">// Use stack of ints.</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">...</span> <span class="p">{</span>
</span><span class="line">  <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(...)</span>
</span><span class="line">  <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">(...)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">var</span> <span class="nl">arrayOfInts:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
</span><span class="line"><span class="c1">// The compiler can emit a specialized version of &#39;myAlgorithm&#39; targeted for</span>
</span><span class="line"><span class="c1">// [Int]&#39; types.</span>
</span><span class="line"><span class="n">myAlgorithm</span><span class="p">(</span><span class="n">arrayOfInts</span><span class="p">,</span> <span class="n">arrayOfInts</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>建议将泛型的声明放在使用它的文件中</h4>
<p>只有在泛型声明在当前模块可见的情况下优化器才能执行特殊化。这只有在使用泛型的代码和声明泛型的代码在同一个文件中才能发生。注意标准库是一个例外。在标准库中声明的泛型对所有模块可见并可以进行特殊化。
</p>
<h4>建议允许编译器进行特殊化</h4>
<p>只有当调用位置和被调函数位于同一个编译单元的时候编译器才能对泛型代码进行特殊化。我们可以使用一个技巧让编译器对被调函数进行优化，这个技巧就是在被调函数所在的编译单元中执行类型检查。执行类型检查的代码会重新分发这个调用到泛型函数&#8212;可是这一次它携带了类型信息。在下面的代码中，我们在函数 play_a_game 中插入了类型检查，使得代码的速度提高了几百倍。<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//Framework.swift:</span>
</span><span class="line">
</span><span class="line"><span class="n">protocol</span> <span class="n">Pingable</span> <span class="p">{</span> <span class="n">func</span> <span class="n">ping</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Self</span> <span class="p">}</span>
</span><span class="line"><span class="n">protocol</span> <span class="n">Playable</span> <span class="p">{</span> <span class="n">func</span> <span class="n">play</span><span class="p">()</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">extension</span> <span class="n">Int</span> <span class="o">:</span> <span class="n">Pingable</span> <span class="p">{</span>
</span><span class="line">  <span class="n">func</span> <span class="n">ping</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">self</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">Game</span><span class="o">&lt;</span><span class="n">T</span> <span class="o">:</span> <span class="n">Pingable</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Playable</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">t</span> <span class="o">:</span> <span class="n">T</span>
</span><span class="line">
</span><span class="line">  <span class="n">init</span> <span class="p">(</span><span class="n">_</span> <span class="n">v</span> <span class="o">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span><span class="n">t</span> <span class="o">=</span> <span class="n">v</span><span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">func</span> <span class="n">play</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="mf">.100</span><span class="n">_000_000</span> <span class="p">{</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">ping</span><span class="p">()</span> <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">play_a_game</span><span class="p">(</span><span class="n">game</span> <span class="o">:</span> <span class="n">Playable</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// This check allows the optimizer to specialize the</span>
</span><span class="line">  <span class="c1">// generic call &#39;play&#39;</span>
</span><span class="line">  <span class="k">if</span> <span class="n">let</span> <span class="n">z</span> <span class="o">=</span> <span class="n">game</span> <span class="n">as</span><span class="o">?</span> <span class="n">Game</span><span class="o">&lt;</span><span class="n">Int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">z</span><span class="p">.</span><span class="n">play</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">game</span><span class="p">.</span><span class="n">play</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">/// -------------- &gt;8</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Application.swift:</span>
</span><span class="line">
</span><span class="line"><span class="n">play_a_game</span><span class="p">(</span><span class="n">Game</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>数值大的值对象的开销</h4>
<p>
在Swift语言中，值类型保存它们数据独有的一份拷贝。使用值类型有很多优点，比如值类型具有独立的状态。当我们拷贝值类型时（相当于复制，初始化参数传递等操作），程序会创建值类型的一个拷贝。对于大的值类型，这种拷贝时很耗费时间的，可能会影响到程序的性能。

让我们看一下下面这段代码。这段代码使用值类型的节点定义了一个树，树的节点包含了协议类型的其他节点，计算机图形场景经常由可以使用值类型表示的实体以及形态变化，因此这个例子很有实践意义。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">protocol</span> <span class="n">P</span> <span class="p">{}</span>
</span><span class="line"><span class="k">struct</span> <span class="n">Node</span> <span class="o">:</span> <span class="n">P</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">:</span> <span class="n">P</span><span class="o">?</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">Tree</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">node</span> <span class="o">:</span> <span class="n">P</span><span class="o">?</span>
</span><span class="line">  <span class="n">init</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
当树进行拷贝时（参数传递，初始化或者赋值）整个树都需要被复制.这是一项花销很大的操作，需要很多的 malloc/free 调用以及以及大量的引用计数操作

然而，我们并不关系值是否被拷贝，只要在这些值还在内存中存在就可以。
</p>
<h4>对大的值类型使用 COW（copy-on-write，写时复制和数组有点类似）</h4>
<p>
减少复制大的值类型数据开销的办法时采用写时复制行为（当对象改变时才进行实际的复制工作）。最简单的实现写时复制的方案时使用已经存在的写时复制的数据结构，比如数组。Swift 的数据是值类型，但是当数组作为参数被传递时并不每次都进行复制，因为它具有写时复制的特性。

在我们的 Tree 的例子中我们通过将 tree 的内容包装成一个数组来减少复制的代价。这个简单的改变对我们 tree 数据结构的性能影响时巨大的，作为参数传递数组的代价从 O(n) 变为 O(1)。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">tree</span> <span class="o">:</span> <span class="n">P</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">node</span> <span class="o">:</span> <span class="p">[</span><span class="n">P</span><span class="o">?</span><span class="p">]</span>
</span><span class="line">  <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">node</span> <span class="o">=</span> <span class="p">[</span> <span class="n">thing</span> <span class="p">]</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但是使用数组实现 COW 机制有两个明显的不足，第一个问题是数组暴露的诸如 append 以及 count 之类的方法在值包装的上下文中没有任何作用，这些方法使得引用类型的封装变得棘手。也许我们可以通过创建一个封装的结构体并隐藏这些不用的 API 来解决这个问题，但是却无法解决第二个问题。第二个问题就是数组内部存在保证程序安全性的代码以及和 OC 交互的代码。Swift 要检查给出的下表是否搂在数组的边界内，当保存值的时候需要检查是否需要扩充存储空间。这些运行时检查会降低速度。

一个替代的方案是实现一个专门的使用 COW 机制的数据结构代替采用数组作为值的封装。构建这样一个数据结构的示例如下所示：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">final</span> <span class="n">class</span> <span class="n">Ref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="n">val</span> <span class="o">:</span> <span class="n">T</span>
</span><span class="line">  <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="n">v</span> <span class="o">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span><span class="n">val</span> <span class="o">=</span> <span class="n">v</span><span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">var</span> <span class="n">ref</span> <span class="o">:</span> <span class="n">Ref</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class="line">    <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="n">x</span> <span class="o">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">Ref</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">var</span> <span class="nl">value:</span> <span class="n">T</span> <span class="p">{</span>
</span><span class="line">        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">ref</span><span class="p">.</span><span class="n">val</span> <span class="p">}</span>
</span><span class="line">        <span class="n">set</span> <span class="p">{</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isUniquelyReferencedNonObjC</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="n">ref</span> <span class="o">=</span> <span class="n">Ref</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="n">ref</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
类型 Box 可以代替上个例子中的数组
</p>
<h4>不安全的代码</h4>
Swift语言的类都是采用引用计数进行内存管理的。Swift编译器会在每次对象被访问的时候插入增加引用计数的代码。例如，考虑一个遍历使用类实现的一个链表的例子。遍历链表是通过移动引用到链表的下一个节点来完成的：<code>elem = elem.next</code>，每次移动这个引用，Swift 都要增加 next 对象的引用计数并减少前一个对象的引用计数，这种引用计数代价昂贵但是只要使用 Swift 类就无法避免
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">final</span> <span class="n">class</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class="line"> <span class="n">var</span> <span class="nl">next:</span> <span class="n">Node</span><span class="o">?</span>
</span><span class="line"> <span class="n">var</span> <span class="nl">data:</span> <span class="n">Int</span>
</span><span class="line"> <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>使用未托管的引用避免引用计数的负荷</h4>
<p>
在效率至上的代码中你可以选择使用未托管的引用。Unmanaged<t>结构体允许开发者对特别的引用关闭引用计数
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">var</span> <span class="n">Ref</span> <span class="o">:</span> <span class="n">Unmanaged</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Unmanaged</span><span class="p">.</span><span class="n">passUnretained</span><span class="p">(</span><span class="n">Head</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="n">let</span> <span class="n">Next</span> <span class="o">=</span> <span class="n">Ref</span><span class="p">.</span><span class="n">takeUnretainedValue</span><span class="p">().</span><span class="n">next</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="n">Ref</span> <span class="o">=</span> <span class="n">Unmanaged</span><span class="p">.</span><span class="n">passUnretained</span><span class="p">(</span><span class="n">Next</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>协议</h2>
<h4>建议将只有类实现的协议标记为类协议</h4>
<p>Swift 可以指定协议只能由类实现。标记协议只能由类实现的一个好处是编译器可以基于这一点对程序进行优化。例如，ARC 内存管理系统能够容易的持有（增加该对象的引用计数）如果它知道它正在处理一个类对象。如果编译器不知道这一点，它就必须假设结构体也可以实现协议，那么它就必须准备好持有或者释放不同的数据结构，而这代价将会十分昂贵。<br />
如果限制只能由类实现某协议那么就标记该协议为类协议以获得更好的性能
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">protocol</span> <span class="n">Pingable</span> <span class="o">:</span> <span class="n">class</span> <span class="p">{</span> <span class="n">func</span> <span class="n">ping</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<ul>
<li>虚函数:虚拟方法表或者<code>vtable</code>是被一个实例引用的一种包含类型方法地址的类型约束表。进行动态分发时，首先从对象中查找这张表然后查找表中的方法</li>
<li>编译器对很多方法进行优化:这是因为编译器并不知道那个具体的方法要被调用</li>
<li>直接访问：例如，直接加载一个类的字段或者直接调用一个方法</li>
<li>拷贝:在特定情况下优化器能够通过内联和 ARC 优化技术移除 retain，release 因为没有引起复制</li>
</ul>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</t></p></string></int></t></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 的 ABI]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2015/12/11/swift-2-dot-2-yuan-ma-jie-du/"/>
    <updated>2015-12-11T10:10:22+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2015/12/11/swift-2-dot-2-yuan-ma-jie-du</id>
    <content type="html"><![CDATA[<p>
随着Swift的开源，苹果开发者迎来了新的开端。其实这个是我一直想要表达的，随着对Swift这个语言的深入了解，越发感觉到Swift的魅力。Swift是系统编程语言，现在C语言之所以能统治底层开发的最重要原因是C规范统一的ABI，使其能做到与汇编程序无缝衔接。而Swift的ABI兼容C（并不包括name mangling部分）。基于强大的llvm生成具体平台代码。不仅仅作为Objective-C的翻译。
</p>
<p>
通过开发Swift，了解到Swift文件的中间编译结果（介于Swift代码合llvm ir）是SIL。SIL我下一章着重介绍。这张暂时把焦点放在Swift的ABI。那么什么是ABI，你一定很陌生吧，那么对于API呢，你是不是明白了什么？
</p>
<p>
ABI的全称是Application Binary Interface。翻译过来就是应用二进制接口，描述了应用程序和操作系统或其他应用程序之间的低级接口。
</p>
<p>
ABI涵盖了各个细节：
<!-- more-->
<ul>
<li>数据类型的大小、设计和对齐;</li>
<li>调用约定（控制着函数的参数如何传送以及如何接受返回值），例如，是所有的参数都通过栈传递，还是部分参数通过寄存器传递；哪个寄存器用于哪个函数参数；通过栈传递的第一个函数参数是最先push到栈上还是最后</li>
<li>系统调用的编码和一个应用如何向操作系统进行系统调用</li>
<li>以及在一个完整的操作系统ABI中，目标文件的二进制格式、程序库等等。</li>
</ul>
一个完整的ABI，像Intel二进制兼容标准（iBCS），允许支持它的操作系统上的程序不经修改在其他支持此ABI的操作系统上运行。
</p>
<p>
ABI不同于应用程序接口（API），API定义了源代码和库之间的接口，因此同样的代码可以在支持这个API的任何系统中编译，然而ABI允许编译好的目标代码在使用兼容ABI的系统中无需改动就能运行。 在Unix风格的操作系统中，存在很多运行在同一硬件平台上互相相关但是不兼容的操作系统（尤其是Intel 80386兼容系统）。有一些努力尝试标准化ABI，以减少销售商将程序移植到其他系统时所需的工作。然而，直到现在还没有很成功的例子，虽然Linux标准化工作组正在为Linux做这方面的努力。
</p>
<p>
我在上面说了，ABI的各个细节。在这我需要强调一点：在Swift类，如果没有明确标识对象基类则一律继承SwiftObject Objective-C类。这个是Swift的硬性规定。
</p>
<h2>类型设计</h2>
<h4>脆弱的结构体和元组设计</h4>
<p>
结构和元组目前共享相同的设计算法，编译器实现“通用”设计算法。该算法如下：
<ul>
  <li>从0开始，以1对齐增长</li>
  <li>遍历字段,在元素的元组,或顺序结构var声明。每个字段:<ul>
      <li>通过舍入更新字节来对齐字段，字段增长的值至少大于或等于字节，整除的一致性</li>
      <li>&lt;字段的当前值的大小赋给偏移量/li&gt;
      <li>更新字节通过添加字段的字节大小</li>
      <li>更新对齐最大字节，和更新对齐的字段</li>
      
  </li>
  <li>最终的大小和对齐的大小和对齐集合。类型是最后的，步长大小来对齐。</li>
</ul>

注意这不同于C或LLVM是正常的设计规则,大小和步幅是不同的,而C设计要求,嵌入式结构的大小是填充其对齐,迅速设计允许外部结构布置内部结构的尾巴填充字段,允许对齐。与C不同,大小结构和元组也允许,没有存储在包含总量。快速编译器发出LLVM包装结构类型与手动填充必要的控制二进制设计。一些例子:
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">// LLVM &lt;{ i64, i8 }&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">S</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">x:</span> <span class="n">Int</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">y:</span> <span class="n">UInt8</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// LLVM &lt;{ i8, [7 x i8], &lt;{ i64, i8 }&gt;, i8 }&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">S2</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">x:</span> <span class="n">UInt8</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">s:</span> <span class="n">S</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">y:</span> <span class="n">UInt8</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// LLVM &lt;{}&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">Empty</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// LLVM &lt;{ i64, i64 }&gt;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">ContainsEmpty</span> <span class="p">{</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">x:</span> <span class="n">Int</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">y:</span> <span class="n">Empty</span>
</span><span class="line">  <span class="n">var</span> <span class="nl">z:</span> <span class="n">Int</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<h4>类设计</h4>
<p>
Swift依赖下面的关于Objective-C运行时的假设，是Objective-C ABI的一部分：
<ul>
<li>32位平台从未标记指针。ObjC指针类型是nil或一个对象指针。</li>
<li>在x86-64,一个标记指针设置指针的最低位或最高位的指针。因此,这两位都是0当且仅当该值不是一个标记指针。</li>
<li>ARM64,标记指针总是设置最高位的指针。</li>
<li>32位平台不会执行任何isa掩饰<code>object_getClass</code>总是相当于<code>*(Class*)object</code></li>
<li>64位平台上执行isa掩饰只有在运行时才导出的符号<code>uintptr_t objc_debug_isa_class_mask;</code>。如果导出这个符号，<code>object_getClass</code>在一个非标记指针总是相当于<code>(Class)(objc_debug_isa_class_mask &amp; *(uintptr_t*)object)</code></li>
<li>超类的类对象总是isa字段后立即存储。它的值是nil或一个指向父类的类对象;它从来没有其他设置。</li>
</ul>

下面是Swift ABI的一部分：
<ul>
<li>Swift指针不会是标记指针。</li>
</ul>
</p>

<h2>脆弱的Enum设计</h2>
<p>
在设计enum类型、ABI试图避免需要额外存储来存储枚举的标签。ABI选择的五个策略基于enum的设计:
</p>
<h4>空枚举</h4>
<p>enum在没有case的情况下,枚举是一个空的类型。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">Empty</span> <span class="p">{}</span> <span class="c1">// =&gt; empty type</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>单一类型枚举</h4>
<p>只有一个情况下的枚举，没有必要筛选,和枚举类型相同的设计的情况下的数据类型,可以是空的,如果没有数据类型。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">EmptyCase</span> <span class="p">{</span> <span class="k">case</span> <span class="n">X</span> <span class="p">}</span>             <span class="c1">// =&gt; empty type</span>
</span><span class="line"><span class="k">enum</span> <span class="n">DataCase</span> <span class="p">{</span> <span class="k">case</span> <span class="n">Y</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Double</span><span class="p">)</span> <span class="p">}</span> <span class="c1">// =&gt; LLVM &lt;{ i64, double }&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>类C枚举</h4>
<p>如果没有一个case有数据类型(一个典型的“c”enum),那么enum是最小整数标记包含的比特数的所有情况。遵循LLVM的数据设计规则整数类型在目标平台上。被分配的case标签的值依次排列声明顺序。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">EnumLike2</span> <span class="p">{</span> <span class="c1">// =&gt; LLVM i1</span>
</span><span class="line">  <span class="k">case</span> <span class="n">A</span>         <span class="c1">// =&gt; i1 0</span>
</span><span class="line">  <span class="k">case</span> <span class="n">B</span>         <span class="c1">// =&gt; i1 1</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">enum</span> <span class="n">EnumLike8</span> <span class="p">{</span> <span class="c1">// =&gt; LLVM i3</span>
</span><span class="line">  <span class="k">case</span> <span class="n">A</span>         <span class="c1">// =&gt; i3 0</span>
</span><span class="line">  <span class="k">case</span> <span class="n">B</span>         <span class="c1">// =&gt; i3 1</span>
</span><span class="line">  <span class="k">case</span> <span class="n">C</span>         <span class="c1">// =&gt; i3 2</span>
</span><span class="line">  <span class="k">case</span> <span class="n">D</span>         <span class="c1">// etc.</span>
</span><span class="line">  <span class="k">case</span> <span class="n">E</span>
</span><span class="line">  <span class="k">case</span> <span class="n">F</span>
</span><span class="line">  <span class="k">case</span> <span class="n">G</span>
</span><span class="line">  <span class="k">case</span> <span class="n">H</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
辨别值之后，一个用于最后的case成为额外例子的枚举类型。
</p>

<h4>单一的对应枚举</h4>
<p>
如果枚举数据类型和一个或多个单情况没有数据的情况下(一个“单一的对应枚举”),然后与数据类型使用的数据类型来表示的二进制表示,必要时添加了零位标记。如果数据类型的二进制表示额外的条件,也就是说,有些模式类型的大小和对齐,但没有形成有效的值的类型,它们是用来表示没有数据的情况下,case的提升数值匹配的顺序没有数据情况下按声明顺序。如果类型有空闲位(见多个对应枚举),它们被用来形成额外的条件。然后枚举值表示为一个整数的存储大小的数据类型。额外的条件使用的负载类型不是枚举类型成为额外的条件enum类型本身。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">CharOrSectionMarker</span> <span class="p">{</span> <span class="o">=&gt;</span> <span class="n">LLVM</span> <span class="n">i32</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Paragraph</span>            <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0020</span><span class="n">_0000</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Char</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span>  <span class="o">=&gt;</span> <span class="n">i32</span> <span class="p">(</span><span class="n">zext</span> <span class="n">i21</span> <span class="o">%</span><span class="n">Char</span> <span class="n">to</span> <span class="n">i32</span><span class="p">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Chapter</span>              <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0020</span><span class="n">_0001</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">CharOrSectionMarker</span><span class="p">.</span><span class="n">Char</span><span class="p">(</span><span class="sc">&#39;\x00&#39;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0000</span><span class="n">_0000</span>
</span><span class="line"><span class="n">CharOrSectionMarker</span><span class="p">.</span><span class="n">Char</span><span class="p">(</span><span class="err">&#39;\</span><span class="n">u10FFFF</span><span class="err">&#39;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0010</span><span class="n">_FFFF</span>
</span><span class="line">
</span><span class="line"><span class="k">enum</span> <span class="n">CharOrSectionMarkerOrFootnoteMarker</span> <span class="p">{</span> <span class="o">=&gt;</span> <span class="n">LLVM</span> <span class="n">i32</span>
</span><span class="line">  <span class="k">case</span> <span class="n">CharOrSectionMarker</span><span class="p">(</span><span class="n">CharOrSectionMarker</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">i32</span> <span class="o">%</span><span class="n">CharOrSectionMarker</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Asterisk</span>                                 <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0020</span><span class="n">_0002</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Dagger</span>                                   <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0020</span><span class="n">_0003</span>
</span><span class="line">  <span class="k">case</span> <span class="n">DoubleDagger</span>                             <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0020</span><span class="n">_0004</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
如果数据类型没有额外的条件,或者没有足够的额外的条件表示没有数据的情况下,然后添加一个标记位enum的表示。没有数据的标记位设置情况下,然后分配数据区域中的值的枚举声明的顺序。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">IntOrInfinity</span> <span class="p">{</span> <span class="o">=&gt;</span> <span class="n">LLVM</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">  <span class="k">case</span> <span class="n">NegInfinity</span>    <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span>    <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Int</span><span class="p">(</span><span class="n">Int</span><span class="p">)</span>       <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span> <span class="o">%</span><span class="n">Int</span><span class="p">,</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class="line">  <span class="k">case</span> <span class="n">PosInfinity</span>    <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span>    <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">IntOrInfinity</span><span class="p">.</span><span class="n">Int</span><span class="p">(</span>    <span class="mi">0</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span>     <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class="line"><span class="n">IntOrInfinity</span><span class="p">.</span><span class="n">Int</span><span class="p">(</span><span class="mi">20721</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i1</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span> <span class="mi">20721</span><span class="p">,</span> <span class="mi">0</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>多个对应枚举</h4>
<p>
如果一个枚举数据类型有多个情况,然后一个标签来区分数据类型是必要的。ABI首先会尝试找到共同闲置比特,即二进制数据类型的表示fixed-zero或忽略的有效值的所有数据类型。标签将被分散到这些闲置比特尽可能多。目前只备用的原始的整数类型,如高位被认为是<code>i21</code>类型。枚举数据表示为一个整数的存储大小的最大数据类型。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">TerminalChar</span> <span class="p">{</span>             <span class="o">=&gt;</span> <span class="n">LLVM</span> <span class="n">i32</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Plain</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span>     <span class="o">=&gt;</span> <span class="n">i32</span>     <span class="p">(</span><span class="n">zext</span> <span class="n">i21</span> <span class="o">%</span><span class="n">Plain</span>     <span class="n">to</span> <span class="n">i32</span><span class="p">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Bold</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span>      <span class="o">=&gt;</span> <span class="n">i32</span> <span class="p">(</span><span class="n">or</span> <span class="p">(</span><span class="n">zext</span> <span class="n">i21</span> <span class="o">%</span><span class="n">Bold</span>      <span class="n">to</span> <span class="n">i32</span><span class="p">),</span> <span class="mh">0x0020</span><span class="n">_0000</span><span class="p">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Underline</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">i32</span> <span class="p">(</span><span class="n">or</span> <span class="p">(</span><span class="n">zext</span> <span class="n">i21</span> <span class="o">%</span><span class="n">Underline</span> <span class="n">to</span> <span class="n">i32</span><span class="p">),</span> <span class="mh">0x0040</span><span class="n">_0000</span><span class="p">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Blink</span><span class="p">(</span><span class="n">UnicodeScalar</span><span class="p">)</span>     <span class="o">=&gt;</span> <span class="n">i32</span> <span class="p">(</span><span class="n">or</span> <span class="p">(</span><span class="n">zext</span> <span class="n">i21</span> <span class="o">%</span><span class="n">Blink</span>     <span class="n">to</span> <span class="n">i32</span><span class="p">),</span> <span class="mh">0x0060</span><span class="n">_0000</span><span class="p">)</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Empty</span>                    <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0080</span><span class="n">_0000</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Cursor</span>                   <span class="o">=&gt;</span> <span class="n">i32</span> <span class="mh">0x0080</span><span class="n">_0001</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
如果没有足够的空闲位包含标签,然后添加额外的比特表示包含标签。标签的值分配给数据情况下按声明顺序。如果有任何数据的情况下,他们被收集在一个共同的标签,并指定数据区域中的值的枚举声明的顺序。
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">class</span> <span class="n">Bignum</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="k">enum</span> <span class="n">IntDoubleOrBignum</span> <span class="p">{</span> <span class="o">=&gt;</span> <span class="n">LLVM</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i2</span> <span class="p">}</span><span class="o">&gt;</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Int</span><span class="p">(</span><span class="n">Int</span><span class="p">)</span>           <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i2</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span>           <span class="o">%</span><span class="n">Int</span><span class="p">,</span>            <span class="mi">0</span> <span class="p">}</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Double</span><span class="p">(</span><span class="n">Double</span><span class="p">)</span>     <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i2</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span> <span class="p">(</span><span class="n">bitcast</span>  <span class="o">%</span><span class="n">Double</span> <span class="n">to</span> <span class="n">i64</span><span class="p">),</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line">  <span class="k">case</span> <span class="n">Bignum</span><span class="p">(</span><span class="n">Bignum</span><span class="p">)</span>     <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="p">{</span> <span class="n">i64</span><span class="p">,</span> <span class="n">i2</span> <span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span> <span class="p">(</span><span class="n">ptrtoint</span> <span class="o">%</span><span class="n">Bignum</span> <span class="n">to</span> <span class="n">i64</span><span class="p">),</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h2>存在容器的设计</h2>
<p>值的协议类型,协议组成类型,或“any”类型(<code>protocol&lt;&gt;</code>)提出使用存在容器(所谓的因为这些类型是类型理论中的“生存类型”)。</p>
<h4>存在的不透明容器</h4>
<p>如果没有类限制协议或协议组成类型,存在的容器必须适应值为任意大小和对齐。它使用一个固定大小的缓冲区,这是三个指针大小和pointer-aligned。这个直接包含的值,如果它的大小和对齐都小于或等于固定大小的缓冲区,或包含一个指针指向一个分配属于存在的容器。所包含的值的类型是由其类型标识元数据记录,为所有需要的协议和映射表的一致性。设计好像声明在C结构体如下:
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">OpaqueExistentialContainer</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">void</span> <span class="o">*</span><span class="n">fixedSizeBuffer</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class="line">  <span class="n">Metadata</span> <span class="o">*</span><span class="n">type</span><span class="p">;</span>
</span><span class="line">  <span class="n">WitnessTable</span> <span class="o">*</span><span class="n">witnessTables</span><span class="p">[</span><span class="n">NUM_WITNESS_TABLES</span><span class="p">];</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>存在的类的容器</h4>
<p>
如果一个或多个协议的协议或协议组成类型有一个类约束,然后只能存储在已经存在的容器,并使用一个更有效的表示。类实例总是一个指针的大小,所以不需要分配一个固定大小的缓冲区,和类实例总是有自己的引用类型的元数据,因此不需要单独的元数据记录。声明中的设计就好像下面C结构体:
<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">ClassExistentialContainer</span> <span class="p">{</span>
</span><span class="line">  <span class="n">HeapObject</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class="line">  <span class="n">WitnessTable</span> <span class="o">*</span><span class="n">witnessTables</span><span class="p">[</span><span class="n">NUM_WITNESS_TABLES</span><span class="p">];</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<br />
注意,如果不需要映射表,如“任何类”类型的<code>protocol&lt;&gt;</code>或一个Objective-C协议类型,然后唯一元素设计堆对象的指针。这是ABI兼容的id,<code>Protocol</code>类型在Objective-C中。
</p>

<h2>元数据类型</h2>
<p>快速运行时保持元数据记录为每一类型在程序中使用,包括每一个实例化泛型类型的。可以使用这些元数据记录(TODO:映射)调试器工具发现的信息类型。对于非泛型名义类型,这些元数据是由编译器生成的静态记录。对泛型类型的实例,和内在类型如元组、功能、协议等等组成,元数据记录懒洋洋地根据需要运行时创建的。每个类型都有一个独特的元数据记录,两种元数据指针值相等,如果他们的类型相同。<br />
在下面的设计描述中,抵消了相对于元数据指针作为指针数组的索引。在32位平台上,抵消1意味着一个偏移量的4个字节,在64位平台上,这意味着8个字节的偏移量。<br />
</p>
<h4>通用元数据设计</h4>
<p>
所有元数据记录共享一个共同的数据头,下面字段:
<ul>
<li>映射价值表指针引用的vtable函数实现值的语义类型,提供了基本的操作,如分配,复制,销毁的类型。映射表也记录的值大小、对齐、步长等基本属性的类型。映射价值表指针偏移-1元数据的指针,即指针字节所在位置立即在指针的引用地址偏移。</li>
<li>类型字段是一个pointer-sized整数描述元数据描述。这个字段的偏移量为0的元数据的指针。</li>
</ul>
</p>
<h4>结构体元数据</h4>
<p>
除了常见的元数据字段设计、结构元数据记录包含以下字段:<br />
<ul>
<li>名义类型描述符引用偏移量1。</li>
<li>引用父元数据记录存储在偏移2。是一个封闭的名义类型的成员的结构,这是一个封闭类型的元数据的引用。对于高层结构体,这是null。（父指针总是空）</li>
<li>矢量偏移量从3开始。每个字段的结构体,在var声明顺序,字段的偏移字节从一开始的结构是存储为pointer-sized整数倍。</li>
<li>如果结构是通用的,那么通用参数向量始于抵消3 + n,其中n是结构中的字段的数量</li>
</ul>
</p>
<h4>枚举元数据</h4>
<p>除了常见的元数据字段设计,enum记录元数据包含以下字段:<br />
<ul>
<li>名义类型描述符引用偏移量1。</li>
<li>引用父元数据记录存储在偏移2。是一个封闭的名义类型的成员的结构,这是一个封闭类型的元数据的引用。对于高层结构体,这是null。（父指针总是空）</li>
<li>如果enum是通用的,那么通用参数向量始于偏移地址3。</li>
</ul>
</p>
<h4>元组元数据</h4>
<p>
除了常见的元数据字段设计、元组元数据记录包含以下字段:<br />
<ul>
<li>名义类型描述符引用偏移量1。</li>
<li>标签字符串指针连续以null结尾的标签名称的列表在元组偏移2。每个标签的名字是作为一个以null结尾,UTF-8编码的字符串序列。如果元组没有标签,这是一个空指针。(目前标签字符串指针总是空,独特的标签不考虑元组元数据)</li>
<li>向量的元素开始的偏移地址3,由一个向量type-offset对。第n个元素的元数据类型是指针的偏移地址3+2*n。字节的偏移量从一开始的第n个元素的元组开始的偏移量是3+2*n+1。</li>
</ul>
</p>
<h4>函数元数据</h4>
<p>除了常见的元数据字段设计,函数元数据记录包含以下字段:<br />
<ul>
<li>参数的数量函数存储在偏移量为1的地址。</li>
<li>结果的引用类型元数据记录存储在偏移量为2。如果函数有多个返回,这引用一个元组元数据记录</li>
<li>参数向量始于偏移地址3,由指针指向的函数的参数元数据记录。</li>
</ul>
<p>
如果函数需要任何in/out参数,每个参数的元数据记录指针将另外附加,一些被设置如果in/out最低位。由于指针对准,最低位持有这个标签总是空。
如果函数没有in/out参数,将只有一个指针在下列情形的向量:
</p>
<ul>
<li>0参数:一个元组元数据记录为空元组</li>
<li>1参数:第一个也是唯一一个参数的元数据记录</li>
<li>&gt; 1的参数:tuple包含参数的元数据记录</li>
</ul>
</p>
<h4>协议元数据</h4>
<p>
除了常见的元数据字段设计,协议元数据记录包含以下字段:</p>
<ul>
<li>设计标志词是储存在偏移为1。这个词的部分描述存在容器设计用于表示值的类型。这个词设计如下:<ul>
<li>映射表存储在最低位31位。协议类型的值包含这个数字映射表指针的设计。</li>
<li>类约束条件是储存在31位。这个位设置如果不类容器类型,这意味着结构、枚举、或类值中可以存储类型。如果没有设置,那么只能存储在类值类型,并使用一个更高效的设计类型。</li>
</ul>
注意字段pointer-sized,尽管只有最低的32位目前在所有平台上。这些值可以来自协议描述符记录,但预计算会更便利。
</li>
<li>协议的协议组成的数量是储存在偏移2。“任何”<code>protocol&lt;&gt; </code>。对于单一协议 <code>P</code>。协议构成类型<code>protocol&lt;P, Q, ...&gt;</code>,这是协议的数量</li>
<li>协议描述符向量始于偏移地址3。这是内联的协议描述符的指针数组中的每个协议组成,或单一协议为协议类型描述符。“任何”类型,没有协议描述符向量。</li>
</ul>

<h4>变型的元数据</h4>
<p>
除了常见的元数据字段设计、变型的元数据记录包含以下字段:
<ul>
<li>引用的实例类型的元数据记录变型代表是储存在偏移为1的地址。</li>
</ul>
</p>

<h4>类元数据</h4>
<p>
类元数据设计和Objective-C互操作;所有类元数据记录也有效的Objective-C类对象。类元数据指针的值被用作类变型,所以派生类的元数据记录也作为一个有效的为其父类的所有类变型价值。
<ul>
<li>析构函数指针存储在从元数据指针偏移2的地址，背后的价值关联表。此功能由Swift的析构器调用时的类实例被销毁<ul>
<li>isa指针指向Objective-C的兼容元类记录村春在偏移量是0的地址</li>
<li>父类指针指向元类数据记录的父类存储在偏移量1的地址，如果是根类，它为null</li>
<li>偏移2和偏移3保留用于Objective-C的运行时使用</li>
<li>该rodata指针存储在偏移4;它指向的类的Objective-C兼容rodata记录。该指针值包括标签。低位始终设置为1，Swift类和始终设置为0的Objective-C类。</li>
<li>类标志是一个32位字段偏移量5</li>
<li>实例地址指针是一个32位的字段后面的这个类的标志。此类指针实例的开始之后此字节数的实例指针。</li>
<li>实例大小是32位的字段后面的这个实例地址指针。这是存储本字节在这种类型的每一个对象的数</li>
<li>实例对准mask是一个16位的字段后面的这个实例的大小。这是一组低位，它们不能在一指针被设置为这个类的一个实例的。 </li>
<li>运行时保留字段是一个16位的字段后面的这个实例对齐mask。编译器初始化这个为零。 </li>
<li>类对象的大小是32位的字段，运行时保留字段之后。这是存储在类元数据对象的字节的总数。</li>
<li>对象的地址指针是一个32位的字段后面的这个类的对象的大小。这是存储在类元数据对象的字节数。 </li>
<li>名义类型描述为最派生类的类型被引用以立即偏移后的类对象的地址点。这是在64位的平台偏移8或在32位平台偏移11。 </li>
<li>对于每一个Swift类在类的继承层次结构，从根类订单开始一直到最派生类，以下领域都存在： </li>
<li>首先，参考到母体元数据记录被存储。对于类是一个封闭的名义类型的成员，这是一个引用封闭类型的元数据。对于顶级类，这是空。 </li>
<li>如果类是通用的，它的泛型参数向量的内联存储</li>
<li>V表被内嵌存储，并包含一个函数指针类的声明顺序的每一个方法的实现。 </li>
<li>如果一个类的实例的布局是依赖于它的通用参数，则字段偏置矢量存储直列，含有以字节偏移从实例指针类的每个字段中声明的顺序。 （对于类与固定布局，字段偏移都可以访问静态的全局变量，类似于Objective-C的ivar偏移。）</li>
</ul>

<p>请注意，这些字段都存在在继承层次的Objective-C基类。 </p>
<h4>通用参数向量</h4>
<p>元数据记录泛型类型的实例包含有关其泛型参数信息。对于类型的每个参数，引用为类型参数的元数据记录存储。在所有类型参数的元数据参考，对于每种类型的参数，如果有该类​​型参数的协议要求，引用的证人表中为每个协议，要求符合储存在声明顺序。 <br />
例如，给定一个泛型类型，在继承的参数&lt;T，U，V&gt;，它的泛型参数的记录将包括引用的元数据记录，T，U型和V，仿佛在C结构布局：<br />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">GenericParameterVector</span> <span class="p">{</span>
</span><span class="line">  <span class="n">TypeMetadata</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="o">*</span><span class="n">U</span><span class="p">,</span> <span class="o">*</span><span class="n">V</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果再加协议要求的参数，例如，<code> &lt;T: Runcible, U: protocol&lt;Fungible, Ansible&gt;, V&gt; </code>，那么该类型的泛型参数向量包含这些协议关联表，设计：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">GenericParameterVector</span> <span class="p">{</span>
</span><span class="line">  <span class="n">TypeMetadata</span> <span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="o">*</span><span class="n">U</span><span class="p">,</span> <span class="o">*</span><span class="n">V</span><span class="p">;</span>
</span><span class="line">  <span class="n">RuncibleWitnessTable</span> <span class="o">*</span><span class="n">T_Runcible</span><span class="p">;</span>
</span><span class="line">  <span class="n">FungibleWitnessTable</span> <span class="o">*</span><span class="n">U_Fungible</span><span class="p">;</span>
</span><span class="line">  <span class="n">AnsibleWitnessTable</span> <span class="o">*</span><span class="n">U_Ansible</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<h4>通用类型描述符</h4>
<p>元数据记录类，结构和枚举类型包含一个指向类型描述符，其中包含有关名义类型的基本信息，如名称，成员和元数据的布局。对于泛型类型，一是名义类型描述符是该类型的所有实例共享。布局如下：
<ul>
<li>偏移0的存储类型<ul>
<li>若为0则是类</li>
<li>结构体为1</li>
<li>枚举是2</li>
</ul></li>
<li>错位的名称被引用为空值终止的C字符串量。本名称不包括绑定泛型参数。 </li>
<li>以下四个字段依赖于一种通用类型。 <ul>
<li>对一个类或者结构体来说:<ul>
<li>字段的数量被存储在偏移2。这是在元数据记录中的字段偏置向量的长度，如果有的话。 </li>
<li>的偏移到字段偏移矢量被存储在偏移3.这是中的偏移在元数据记录中的类型字段偏置向量的指针大小词语。如果没有字段偏置矢量被存储在元数据记录，这是零。 </li>
<li>字段名称偏移量4名的顺序对应的字段的领域偏移向量的顺序被引用为C字符串的双空结尾的列表。</li>
<li>该字段类型的访问是一个函数指针偏移5.如果非空，该函数需要一个指针类型的元数据标称类型的实例，并返回一个指针类型的元数据引用的字段类型的数组该实例。的顺序相匹配的领域偏移向量和字段名列表。 </li></ul></li>
<li>对一个枚举来说：<ul>
<li>的有效载荷的情况下和有效载荷大小偏移数被存储在偏移2的至少显著24位是有效载荷的情况下的数量，和在类型元数据的有效载荷大小的最显著8位的偏移，如果有的话。</li>
<li>没有效载荷的情况下的数量被存储在偏移3。 </li>
<li>case名称偏移量4名进行排序，从而有效载荷的情况下是第一位的，其次是无负载情况下被引用为C字符串的双空结尾的列表。在列表中的每个一半，名称的顺序对应于枚举声明的情况下的顺序。 </li>
<li>case类型的访问是一个函数指针偏移5.如果非空，该函数需要一个指针类型的元数据枚举的一个实例，并返回一个指针类型的元数据的引用为案件的类型数组该实例。的顺序相匹配的情况下，名单中。这个功能类似于字段类型存取器为一个结构，除了还结果中的每个元件的至少显著位如果枚举的情况下是一种间接的情况下设置的。 </li></ul></li>
</ul></li>
<li>如果名义类型是通用的，一个指针，在用于形成该类型的实例的元图形存储在偏移6.指针是空的，如果类型是不通用的。 </li>
<li>泛型参数描述开始于偏移7。这说明在元数据记录中的泛型参数向量的布局： <ul>
<li>通用参数向量的偏移存储在偏移7.这是中的偏移元数据记录内的通用参数向量的指针大小词语。如果该类型不是通用的，这是零。 </li>
<li>类型参数的数量存储在偏移8.这个计数包括相关类型的类型参数与协议约束。 </li>
<li>类型参数的数目被储存在仅偏移9.本计数包括初级形式类型参数。 </li>
<li>对于每个类型的参数n，以下字段中存储： <ul>
<li>该类型参数的数目存储在偏移10 + N。这是存储用于在通用参数向量类型参数表指针的数目。 </li></ul></li></ul></li>
</ul>
请注意，没有名义类型说明符的协议或协议类型。请参阅下面的协议描述符描述。
</p>
<h4>Protocol描述符</h4>
协议元数据包含描述所需的类型的协议值以符合引用零个，一个或多个协议的描述符。本协议描述的布局要与Objective-C的协议对象是兼容的。设计如下：
<ul>
<li>一个isa占位符存放在偏移0填充这个字段的Objective-C运行。 </li>
<li>错位的名称被引用为空值终止的C字符串偏移量1。 </li>
<li>如果协议继承的一个或多个其他协议，一个指针到继承的协议列表存储在偏移2.名单开始的继承协议作为一个指针大小整数的数目，和后跟许多协议描述符指针。如果协议继承了没有其他协议，这个指针为空。 </li>
<li>对于ObjC兼容协议，它需要的实例方法存储在偏移3作为ObjC兼容的方法列表。这是原生Swift协议无效。 </li>
<li>对于ObjC兼容协议，它需要的类方法都存储在偏移4作为ObjC兼容的方法列表。这是原生Swift协议无效。 </li>
<li>对于ObjC兼容协议，其可选实例方法存储在偏移5作为ObjC兼容的方法列表。这是原生Swift协议无效。 </li>
<li>对于ObjC兼容协议，其可选类的方法存储在偏移6作为ObjC兼容的方法列表。这是原生Swift协议无效。 </li>
<li>对于ObjC兼容协议，它的实例属性存储在偏移7作为ObjC兼容属性列表。这是原生Swift协议无效。 </li>
<li>该协议描述符记录的大小存储为一个32位整数偏移量8。这是目前72在64位的平台和40在32位的平台。</li>
<li>标志被存储为尺寸后的32位整数。以下位目前使用的（从最低计数显著零位）： <ul>
<li>位0是Swift位。坐落在Swift定义和取消的Objective-C中定义的协议所有协议。 </li>
<li>第1位是类约束一下。如果该协议不是类的限制，这意味着任何结构，枚举，或类类型可能符合协议设置它。它没有设置，如果只有类能遵守协议。 （该倒的意思是使用Objective-C协议的记录，在该位从未设置的兼容性。Objective-C的协议只能由类效法。） </li>
<li>第2位是映射表位。它设置，如果派遣协议的方法是通过映射表，可以是传递一个额外的参数，以通用的功能或包含在协议类型的存在容器设计完成。这是未设置如果调度是通过objc_msgSend完成，不需要额外的信息，陪符合类型的值。 </li>
<li>第31位是由Objective-C运行时设置它已经完成了它的初始化协议纪录。它是未使用的Swift运行。 </li>
</ul></li>
</ul>

<h2>重整</h2>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">mangled</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">_T</span><span class="err">&#39;</span> <span class="n">global</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
所有Swift-重整的名称以此前缀开头。
</p>
<h4>全局</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="sc">&#39;t&#39;</span> <span class="n">type</span>                    <span class="c1">// standalone type (for DWARF)</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="sc">&#39;M&#39;</span> <span class="n">type</span>                    <span class="c1">// type metadata (address point)</span>
</span><span class="line">                                       <span class="c1">// -- type starts with [BCOSTV]</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Mf</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// &#39;full&#39; type metadata (start of object)</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">MP</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// type metadata pattern</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Ma</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// type metadata access function</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">ML</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// type metadata lazy cache variable</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Mm</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// class metaclass</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Mn</span><span class="err">&#39;</span> <span class="n">nominal</span><span class="o">-</span><span class="n">type</span>           <span class="c1">// nominal type descriptor</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Mp</span><span class="err">&#39;</span> <span class="n">protocol</span>               <span class="c1">// protocol descriptor</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">PA</span><span class="err">&#39;</span> <span class="p">.</span><span class="o">*</span>                     <span class="c1">// partial application forwarder</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">PAo</span><span class="err">&#39;</span> <span class="p">.</span><span class="o">*</span>                    <span class="c1">// ObjC partial application forwarder</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="sc">&#39;w&#39;</span> <span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="n">type</span> <span class="c1">// value witness</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">WV</span><span class="err">&#39;</span> <span class="n">type</span>                   <span class="c1">// value witness table</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Wo</span><span class="err">&#39;</span> <span class="n">entity</span>                 <span class="c1">// witness table offset</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Wv</span><span class="err">&#39;</span> <span class="n">directness</span> <span class="n">entity</span>      <span class="c1">// field offset</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">WP</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span>   <span class="c1">// protocol witness table</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Wa</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span>   <span class="c1">// protocol witness table accessor</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Wl</span><span class="err">&#39;</span> <span class="n">type</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span> <span class="c1">// lazy protocol witness table accessor</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">WL</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span>   <span class="c1">// lazy protocol witness table cache variable</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">WD</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span>   <span class="c1">// dependent proto witness table generator</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Wd</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span>   <span class="c1">// dependent proto witness table template</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="n">entity</span>                      <span class="c1">// some identifiable thing</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TO</span><span class="err">&#39;</span> <span class="n">global</span>                 <span class="c1">// ObjC-as-swift thunk</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">To</span><span class="err">&#39;</span> <span class="n">global</span>                 <span class="c1">// swift-as-ObjC thunk</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TD</span><span class="err">&#39;</span> <span class="n">global</span>                 <span class="c1">// dynamic dispatch thunk</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Td</span><span class="err">&#39;</span> <span class="n">global</span>                 <span class="c1">// direct method reference thunk</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TR</span><span class="err">&#39;</span> <span class="n">reabstract</span><span class="o">-</span><span class="n">signature</span>   <span class="c1">// reabstraction thunk helper function</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Tr</span><span class="err">&#39;</span> <span class="n">reabstract</span><span class="o">-</span><span class="n">signature</span>   <span class="c1">// reabstraction thunk</span>
</span><span class="line">
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TS</span><span class="err">&#39;</span> <span class="n">specializationinfo</span> <span class="sc">&#39;_&#39;</span> <span class="n">mangled</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">specializationinfo</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span> <span class="n">passid</span> <span class="p">(</span><span class="n">type</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span><span class="o">*</span> <span class="sc">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span>            <span class="c1">// Generic specialization info.</span>
</span><span class="line"><span class="n">specializationinfo</span> <span class="o">::=</span> <span class="sc">&#39;f&#39;</span> <span class="n">passid</span> <span class="p">(</span><span class="n">funcspecializationarginfo</span> <span class="sc">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span>             <span class="c1">// Function signature specialization kind</span>
</span><span class="line"><span class="n">passid</span> <span class="o">::=</span> <span class="n">integer</span>                                                             <span class="c1">// The id of the pass that generated this specialization.</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">cl</span><span class="err">&#39;</span> <span class="n">closurename</span> <span class="n">type</span><span class="o">*</span>                        <span class="c1">// Closure specialized with closed over types in argument order.</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="sc">&#39;n&#39;</span>                                           <span class="c1">// Unmodified argument</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">cp</span><span class="err">&#39;</span> <span class="n">funcsigspecializationconstantproppayload</span> <span class="c1">// Constant propagated argument</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span>                                           <span class="c1">// Dead argument</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span> <span class="sc">&#39;s&#39;</span><span class="o">?</span>                                      <span class="c1">// Owned =&gt; Guaranteed and Exploded if &#39;s&#39; present.</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="sc">&#39;s&#39;</span>                                           <span class="c1">// Exploded</span>
</span><span class="line"><span class="n">funcsigspecializationarginfo</span> <span class="o">::=</span> <span class="sc">&#39;k&#39;</span>                                           <span class="c1">// Exploded</span>
</span><span class="line"><span class="n">funcsigspecializationconstantpropinfo</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">fr</span><span class="err">&#39;</span> <span class="n">mangled</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">funcsigspecializationconstantpropinfo</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span> <span class="n">mangled</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">funcsigspecializationconstantpropinfo</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span><span class="o">-</span><span class="n">integer</span>
</span><span class="line"><span class="n">funcsigspecializationconstantpropinfo</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">fl</span><span class="err">&#39;</span> <span class="kt">float</span><span class="o">-</span><span class="n">as</span><span class="o">-</span><span class="mi">64</span><span class="o">-</span><span class="n">bit</span><span class="o">-</span><span class="n">integer</span>
</span><span class="line"><span class="n">funcsigspecializationconstantpropinfo</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">se</span><span class="err">&#39;</span> <span class="n">stringencoding</span> <span class="sc">&#39;v&#39;</span> <span class="n">md5hash</span>
</span><span class="line">
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TV</span><span class="err">&#39;</span> <span class="n">global</span>                 <span class="c1">// vtable override thunk</span>
</span><span class="line"><span class="n">global</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TW</span><span class="err">&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span> <span class="n">entity</span>
</span><span class="line">                                       <span class="c1">// protocol witness thunk</span>
</span><span class="line"><span class="n">entity</span> <span class="o">::=</span> <span class="n">nominal</span><span class="o">-</span><span class="n">type</span>                <span class="c1">// named type declaration</span>
</span><span class="line"><span class="n">entity</span> <span class="o">::=</span> <span class="k">static</span><span class="o">?</span> <span class="n">entity</span><span class="o">-</span><span class="n">kind</span> <span class="n">context</span> <span class="n">entity</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;F&#39;</span>                    <span class="c1">// function (ctor, accessor, etc.)</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;v&#39;</span>                    <span class="c1">// variable (let/var)</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span>                    <span class="c1">// subscript (&#39;i&#39;ndex) itself (not the individual accessors)</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;I&#39;</span>                    <span class="c1">// initializer</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>         <span class="c1">// named declaration</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;A&#39;</span> <span class="n">index</span>              <span class="c1">// default argument generator</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;a&#39;</span> <span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// mutable addressor</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;C&#39;</span> <span class="n">type</span>               <span class="c1">// allocating constructor</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;c&#39;</span> <span class="n">type</span>               <span class="c1">// non-allocating constructor</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;D&#39;</span>                    <span class="c1">// deallocating destructor; untyped</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span>                    <span class="c1">// non-deallocating destructor; untyped</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// getter</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span>                    <span class="c1">// non-local variable initializer</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;l&#39;</span> <span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// non-mutable addressor</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;m&#39;</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// materializeForSet</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;s&#39;</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// setter</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;U&#39;</span> <span class="n">index</span> <span class="n">type</span>         <span class="c1">// explicit anonymous closure expression</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;u&#39;</span> <span class="n">index</span> <span class="n">type</span>         <span class="c1">// implicit anonymous closure</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;w&#39;</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// willSet</span>
</span><span class="line"><span class="n">entity</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;W&#39;</span> <span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="n">type</span>     <span class="c1">// didSet</span>
</span><span class="line"><span class="k">static</span> <span class="o">::=</span> <span class="sc">&#39;Z&#39;</span>                         <span class="c1">// entity is a static member of a type</span>
</span><span class="line"><span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="n">identifier</span>
</span><span class="line"><span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="n">local</span><span class="o">-</span><span class="n">decl</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="n">private</span><span class="o">-</span><span class="n">decl</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">local</span><span class="o">-</span><span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;L&#39;</span> <span class="n">index</span> <span class="n">identifier</span>  <span class="c1">// locally-discriminated declaration</span>
</span><span class="line"><span class="n">private</span><span class="o">-</span><span class="n">decl</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="sc">&#39;P&#39;</span> <span class="n">identifier</span> <span class="n">identifier</span>  <span class="c1">// file-discriminated declaration</span>
</span><span class="line"><span class="n">reabstract</span><span class="o">-</span><span class="n">signature</span> <span class="o">::=</span> <span class="p">(</span><span class="sc">&#39;G&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">signature</span><span class="p">)</span><span class="o">?</span> <span class="n">type</span> <span class="n">type</span>
</span><span class="line"><span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;u&#39;</span>                 <span class="c1">// unsafe addressor (no owner)</span>
</span><span class="line"><span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;O&#39;</span>                 <span class="c1">// owning addressor (non-native owner)</span>
</span><span class="line"><span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;o&#39;</span>                 <span class="c1">// owning addressor (native owner)</span>
</span><span class="line"><span class="n">addressor</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;p&#39;</span>                 <span class="c1">// pinning addressor (native owner)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
实体开始于<code>entity</code> <code>nominal-type-kind ([COPV])</code>,去取代 <code>([Ss])</code> <code> entity-kind ([FIiv])</code>。
<code>entity-name</code>开头<code>[AaCcDggis]</code>或<code>decl-name</code>。一个<code>decl-name</code>开头<code>[LP]</code>或标识符<code>（[0-9oX]）</code>。
一个上下文开始于任一实体，一个扩展（其开头[EE]），或者一个模块，它可能是一个标识符（[0-9oX]）或模块的取代（[SS]）。
全局的修正开始于<code>[MTWw]</code>。
如果部分应用程序转发器是一个静态符号，它的名字将开始与序列_TPA_随后转发的目的地的错位符号名称。
一个普通的专业化的mangling由一个头，指定用于专门的泛型函数的类型和不合格，其次是原来的非专业化的通用符号的全面重整名称。
在一<private-decl-name>中的第一标识符是表示原始声明来自文件的字符串。应考虑的包围模块内是唯一的。第二标识符是实体的名称。
并非所有的声明标志着民营声明中，将使用<private-decl-name>压延;如果实体的上下文是足以唯一标识该实体中，简单的标识符形式是优选的。
在<reabstract-signature>的类型始终是非多态<实现了一套功能型>类型。

<h4>直接和间接的符号</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">directness</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span>                         <span class="c1">// direct</span>
</span><span class="line"><span class="n">directness</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span>                         <span class="c1">// indirect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
直接符号解析直接对象的地址。间接符号解析为一个指向对象的地址。他们是不同的manglings做某一类的错误显而易见。

讨论补偿时的术语稍微超载。直接抵消解析为一个变量持有真正的偏移。间接偏移解析为一个变量保持的偏移被应用到输入的元数据，以获得真实的地址偏移。 （偏移量是必需的变量时，被一个弹性的结构，当物体的布局可能依赖于通用的参数中访问谎言的对象，这些偏移量必须保持在元数据中，间接磁场偏移访问泛型类型的字段时，因此，需要地方元数据本身具有未知的布局。）
</p>
<h4>声明上下文</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">context</span> <span class="o">::=</span> <span class="n">module</span>
</span><span class="line"><span class="n">context</span> <span class="o">::=</span> <span class="n">extension</span>
</span><span class="line"><span class="n">context</span> <span class="o">::=</span> <span class="n">entity</span>
</span><span class="line"><span class="n">module</span> <span class="o">::=</span> <span class="n">substitution</span>                    <span class="c1">// other substitution</span>
</span><span class="line"><span class="n">module</span> <span class="o">::=</span> <span class="n">identifier</span>                      <span class="c1">// module name</span>
</span><span class="line"><span class="n">module</span> <span class="o">::=</span> <span class="n">known</span><span class="o">-</span><span class="n">module</span>                    <span class="c1">// abbreviation</span>
</span><span class="line"><span class="n">extension</span> <span class="o">::=</span> <span class="sc">&#39;E&#39;</span> <span class="n">module</span> <span class="n">entity</span>
</span><span class="line"><span class="n">extension</span> <span class="o">::=</span> <span class="sc">&#39;e&#39;</span> <span class="n">module</span> <span class="n">generic</span><span class="o">-</span><span class="n">signature</span> <span class="n">entity</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这些manglings确定封闭的上下文中，一个实体被声明，如它的封闭模块，功​​能，或名义类型。
一个扩展的mangling时则使用一个实体的声明上下文是一个扩展和被扩展的实体是在不同的模块。在这种情况下，扩展的模块第一错位，随后由实体被扩展。如果延伸和扩展的实体都在同一模块中，普通实体重整是首选。如果扩展受到限制，在延长的限制被损毁，其一般签名。
当重整本地实体的一个构造或析构，该非分配或非重新分配的方式用于内的上下文。
</p>
<h4>类型</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bb</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.BridgeObject</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">BB</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.UnsafeValueBuffer</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bf</span><span class="err">&#39;</span> <span class="n">natural</span> <span class="sc">&#39;_&#39;</span>                  <span class="c1">// Builtin.Float&lt;n&gt;</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bi</span><span class="err">&#39;</span> <span class="n">natural</span> <span class="sc">&#39;_&#39;</span>                  <span class="c1">// Builtin.Int&lt;n&gt;</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">BO</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.ObjCPointer</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bo</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.ObjectPointer</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bp</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.RawPointer</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bv</span><span class="err">&#39;</span> <span class="n">natural</span> <span class="n">type</span>                 <span class="c1">// Builtin.Vec&lt;n&gt;x&lt;type&gt;</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Bw</span><span class="err">&#39;</span>                              <span class="c1">// Builtin.Word</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="n">nominal</span><span class="o">-</span><span class="n">type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="n">associated</span><span class="o">-</span><span class="n">type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;a&#39;</span> <span class="n">context</span> <span class="n">identifier</span>            <span class="c1">// Type alias (DWARF only)</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;b&#39;</span> <span class="n">type</span> <span class="n">type</span>                     <span class="c1">// objc block function type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;c&#39;</span> <span class="n">type</span> <span class="n">type</span>                     <span class="c1">// C function pointer type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;F&#39;</span> <span class="n">throws</span><span class="o">-</span><span class="n">annotation</span><span class="o">?</span> <span class="n">type</span> <span class="n">type</span>  <span class="c1">// function type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;f&#39;</span> <span class="n">throws</span><span class="o">-</span><span class="n">annotation</span><span class="o">?</span> <span class="n">type</span> <span class="n">type</span>  <span class="c1">// uncurried function type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;G&#39;</span> <span class="n">type</span> <span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;+</span> <span class="sc">&#39;_&#39;</span>              <span class="c1">// generic type application</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;K&#39;</span> <span class="n">type</span> <span class="n">type</span>                     <span class="c1">// @auto_closure function type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;M&#39;</span> <span class="n">type</span>                          <span class="c1">// metatype without representation</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">XM</span><span class="err">&#39;</span> <span class="n">metatype</span><span class="o">-</span><span class="n">repr</span> <span class="n">type</span>           <span class="c1">// metatype with representation</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;P&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">list</span> <span class="sc">&#39;_&#39;</span>             <span class="c1">// protocol type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">PM</span><span class="err">&#39;</span> <span class="n">type</span>                         <span class="c1">// existential metatype without representation</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">XPM</span><span class="err">&#39;</span> <span class="n">metatype</span><span class="o">-</span><span class="n">repr</span> <span class="n">type</span>          <span class="c1">// existential metatype with representation</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="n">archetype</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;R&#39;</span> <span class="n">type</span>                          <span class="c1">// inout</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;T&#39;</span> <span class="n">tuple</span><span class="o">-</span><span class="n">element</span><span class="o">*</span> <span class="sc">&#39;_&#39;</span>            <span class="c1">// tuple</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;t&#39;</span> <span class="n">tuple</span><span class="o">-</span><span class="n">element</span><span class="o">*</span> <span class="sc">&#39;_&#39;</span>            <span class="c1">// variadic tuple</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Xo</span><span class="err">&#39;</span> <span class="n">type</span>                         <span class="c1">// @unowned type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Xu</span><span class="err">&#39;</span> <span class="n">type</span>                         <span class="c1">// @unowned(unsafe) type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Xw</span><span class="err">&#39;</span> <span class="n">type</span>                         <span class="c1">// @weak type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">XF</span><span class="err">&#39;</span> <span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">type</span>           <span class="c1">// function implementation type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Xf</span><span class="err">&#39;</span> <span class="n">type</span> <span class="n">type</span>                    <span class="c1">// @thin function type</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="n">substitution</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="n">nominal</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">kind</span> <span class="n">declaration</span><span class="o">-</span><span class="n">name</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;C&#39;</span>                  <span class="c1">// class</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;O&#39;</span>                  <span class="c1">// enum</span>
</span><span class="line"><span class="n">nominal</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="sc">&#39;V&#39;</span>                  <span class="c1">// struct</span>
</span><span class="line"><span class="n">archetype</span> <span class="o">::=</span> <span class="sc">&#39;Q&#39;</span> <span class="n">index</span>                    <span class="c1">// archetype with depth=0, idx=N</span>
</span><span class="line"><span class="n">archetype</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Qd</span><span class="err">&#39;</span> <span class="n">index</span> <span class="n">index</span>             <span class="c1">// archetype with depth=M+1, idx=N</span>
</span><span class="line"><span class="n">archetype</span> <span class="o">::=</span> <span class="n">associated</span><span class="o">-</span><span class="n">type</span>
</span><span class="line"><span class="n">archetype</span> <span class="o">::=</span> <span class="n">qualified</span><span class="o">-</span><span class="n">archetype</span>
</span><span class="line"><span class="n">associated</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="n">substitution</span>
</span><span class="line"><span class="n">associated</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;Q&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">context</span>     <span class="c1">// self type of protocol</span>
</span><span class="line"><span class="n">associated</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;Q&#39;</span> <span class="n">archetype</span> <span class="n">identifier</span> <span class="c1">// associated type</span>
</span><span class="line"><span class="n">qualified</span><span class="o">-</span><span class="n">archetype</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Qq</span><span class="err">&#39;</span> <span class="n">index</span> <span class="n">context</span>   <span class="c1">// archetype+context (DWARF only)</span>
</span><span class="line"><span class="n">protocol</span><span class="o">-</span><span class="n">context</span> <span class="o">::=</span> <span class="sc">&#39;P&#39;</span> <span class="n">protocol</span>
</span><span class="line"><span class="n">tuple</span><span class="o">-</span><span class="n">element</span> <span class="o">::=</span> <span class="n">identifier</span><span class="o">?</span> <span class="n">type</span>
</span><span class="line"><span class="n">metatype</span><span class="o">-</span><span class="n">repr</span> <span class="o">::=</span> <span class="sc">&#39;t&#39;</span>                      <span class="c1">// Thin metatype representation</span>
</span><span class="line"><span class="n">metatype</span><span class="o">-</span><span class="n">repr</span> <span class="o">::=</span> <span class="sc">&#39;T&#39;</span>                      <span class="c1">// Thick metatype representation</span>
</span><span class="line"><span class="n">metatype</span><span class="o">-</span><span class="n">repr</span> <span class="o">::=</span> <span class="sc">&#39;o&#39;</span>                      <span class="c1">// ObjC metatype representation</span>
</span><span class="line"><span class="n">throws</span><span class="o">-</span><span class="n">annotation</span> <span class="o">::=</span> <span class="sc">&#39;z&#39;</span>                  <span class="c1">// &#39;throws&#39; annotation on function types</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;u&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">signature</span> <span class="n">type</span>        <span class="c1">// generic type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;x&#39;</span>                               <span class="c1">// generic param, depth=0, idx=0</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;q&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span>           <span class="c1">// dependent generic parameter</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;q&#39;</span> <span class="n">type</span> <span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span>          <span class="c1">// associated type of non-generic param</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;w&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span> <span class="c1">// associated type</span>
</span><span class="line"><span class="n">type</span> <span class="o">::=</span> <span class="sc">&#39;W&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span><span class="o">+</span> <span class="sc">&#39;_&#39;</span> <span class="c1">// associated type at depth</span>
</span><span class="line">
</span><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="o">::=</span> <span class="sc">&#39;x&#39;</span>                <span class="c1">// depth = 0,   idx = 0</span>
</span><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="o">::=</span> <span class="n">index</span>              <span class="c1">// depth = 0,   idx = N+1</span>
</span><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span> <span class="n">index</span> <span class="n">index</span>    <span class="c1">// depth = M+1, idx = N</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<type>从未开始或以数字结束。 <type>从不以下划线开头。 <type>从来没有开始与D。 <type>从来没有开始以Z。

请注意，协议裂伤不同的类型和作为背景。一个协议方面总是由一个单一的协议名称等等轧液没有一个结尾下划线。协议类型可以有并列设置，结束于结尾下划线零个，一个或多个协议的范围。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="p">(</span><span class="sc">&#39;P&#39;</span> <span class="n">protocol</span><span class="o">-</span><span class="n">name</span><span class="p">)</span><span class="o">?</span> <span class="n">identifier</span>
</span><span class="line"><span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span> <span class="o">::=</span> <span class="n">substitution</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
相关类型因此使用缩写的mangling当基座通用参数或关联式是由一个单一的规约要求的限制。在这种情况下，相关联的类型可以明确引用的名字单独。如果基有多个符合性限制，那么协议名称是错位的消除歧义。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span>
</span><span class="line">  <span class="n">impl</span><span class="o">-</span><span class="n">callee</span><span class="o">-</span><span class="n">convention</span> <span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span><span class="o">*</span> <span class="n">generic</span><span class="o">-</span><span class="n">signature</span><span class="o">?</span> <span class="sc">&#39;_&#39;</span>
</span><span class="line">  <span class="n">impl</span><span class="o">-</span><span class="n">parameter</span><span class="o">*</span> <span class="sc">&#39;_&#39;</span> <span class="n">impl</span><span class="o">-</span><span class="n">result</span><span class="o">*</span> <span class="sc">&#39;_&#39;</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">callee</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;t&#39;</span>              <span class="c1">// thin</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">callee</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="n">impl</span><span class="o">-</span><span class="n">convention</span>  <span class="c1">// thick, callee transferred with given convention</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;a&#39;</span>                     <span class="c1">// direct, autoreleased</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span>                     <span class="c1">// direct, no ownership transfer</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;D&#39;</span>                     <span class="c1">// direct, no ownership transfer,</span>
</span><span class="line">                                            <span class="c1">// dependent on &#39;self&#39; parameter</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span>                     <span class="c1">// direct, guaranteed</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;e&#39;</span>                     <span class="c1">// direct, deallocating</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span>                     <span class="c1">// indirect, ownership transfer</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;l&#39;</span>                     <span class="c1">// indirect, inout</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;G&#39;</span>                     <span class="c1">// indirect, guaranteed</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;o&#39;</span>                     <span class="c1">// direct, ownership transfer</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="o">::=</span> <span class="sc">&#39;z&#39;</span> <span class="n">impl</span><span class="o">-</span><span class="n">convention</span>     <span class="c1">// error result</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cb</span><span class="err">&#39;</span>            <span class="c1">// compatible with C block invocation function</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cc</span><span class="err">&#39;</span>            <span class="c1">// compatible with C global function</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cm</span><span class="err">&#39;</span>            <span class="c1">// compatible with Swift method</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">CO</span><span class="err">&#39;</span>            <span class="c1">// compatible with ObjC method</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cw</span><span class="err">&#39;</span>            <span class="c1">// compatible with protocol witness</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="sc">&#39;N&#39;</span>             <span class="c1">// noreturn</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">attribute</span> <span class="o">::=</span> <span class="sc">&#39;G&#39;</span>             <span class="c1">// generic</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">parameter</span> <span class="o">::=</span> <span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="n">type</span>
</span><span class="line"><span class="n">impl</span><span class="o">-</span><span class="n">result</span> <span class="o">::=</span> <span class="n">impl</span><span class="o">-</span><span class="n">convention</span> <span class="n">type</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在大多数情况下，manglings遵循的正式语言类型的结构。然而，在某些情况下，它是更为有用的函数类型的准确实现细节进行编码。
任何<impl-function-attribute>产品必须出现在它们上面指定的顺序：例如：一个不返回的C函数的错位与CCN。
需要注意的是，公约和功能属性的制作并不需要从一个<type>的开始消除歧义。

<h4>泛型</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">protocol</span><span class="o">-</span><span class="n">conformance</span> <span class="o">::=</span> <span class="p">(</span><span class="sc">&#39;u&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">signature</span><span class="p">)</span><span class="o">?</span> <span class="n">type</span> <span class="n">protocol</span> <span class="n">module</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<protocol-conformance>是指一个类型的一致性协议。命名模块包含声明的一致性扩展或类型声明之一。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">signature</span> <span class="o">::=</span> <span class="p">(</span><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">count</span><span class="o">+</span><span class="p">)</span><span class="o">?</span> <span class="p">(</span><span class="sc">&#39;R&#39;</span> <span class="n">requirement</span><span class="o">*</span><span class="p">)</span><span class="o">?</span> <span class="sc">&#39;r&#39;</span>
</span><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">count</span> <span class="o">::=</span> <span class="sc">&#39;z&#39;</span>       <span class="c1">// zero parameters</span>
</span><span class="line"><span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">count</span> <span class="o">::=</span> <span class="n">index</span>     <span class="c1">// N+1 parameters</span>
</span><span class="line"><span class="n">requirement</span> <span class="o">::=</span> <span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="n">protocol</span><span class="o">-</span><span class="n">name</span> <span class="c1">// protocol requirement</span>
</span><span class="line"><span class="n">requirement</span> <span class="o">::=</span> <span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="n">type</span>          <span class="c1">// base class requirement</span>
</span><span class="line">                                         <span class="c1">// type starts with [CS]</span>
</span><span class="line"><span class="n">requirement</span> <span class="o">::=</span> <span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="sc">&#39;z&#39;</span> <span class="n">type</span>      <span class="c1">// &#39;z&#39;ame-type requirement</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Special type mangling for type params that saves the initial &#39;q&#39; on</span>
</span><span class="line"><span class="c1">// generic params</span>
</span><span class="line"><span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="o">::=</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span>       <span class="c1">// generic parameter</span>
</span><span class="line"><span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="o">::=</span> <span class="sc">&#39;w&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span> <span class="c1">// associated type</span>
</span><span class="line"><span class="n">type</span><span class="o">-</span><span class="n">param</span> <span class="o">::=</span> <span class="sc">&#39;W&#39;</span> <span class="n">generic</span><span class="o">-</span><span class="n">param</span><span class="o">-</span><span class="n">index</span> <span class="n">assoc</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="n">name</span><span class="o">+</span> <span class="sc">&#39;_&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
一个通用的签名首先描述在每个深度的签名，随后要求的通用参数的数量。作为一个特殊的情况下，没有generic-param-count表示在最外深度单个通用参数：
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">urFq_q_</span>                           <span class="c1">// &lt;T_0_0&gt; T_0_0 -&gt; T_0_0</span>
</span><span class="line"><span class="n">u_0_rFq_qd_0_</span>                     <span class="c1">// &lt;T_0_0&gt;&lt;T_1_0, T_1_1&gt; T_0_0 -&gt; T_1_1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4>映射值</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">al</span><span class="err">&#39;</span>           <span class="c1">// allocateBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">ca</span><span class="err">&#39;</span>           <span class="c1">// assignWithCopy</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">ta</span><span class="err">&#39;</span>           <span class="c1">// assignWithTake</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">de</span><span class="err">&#39;</span>           <span class="c1">// deallocateBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">xx</span><span class="err">&#39;</span>           <span class="c1">// destroy</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">XX</span><span class="err">&#39;</span>           <span class="c1">// destroyBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Xx</span><span class="err">&#39;</span>           <span class="c1">// destroyArray</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">CP</span><span class="err">&#39;</span>           <span class="c1">// initializeBufferWithCopyOfBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cp</span><span class="err">&#39;</span>           <span class="c1">// initializeBufferWithCopy</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">cp</span><span class="err">&#39;</span>           <span class="c1">// initializeWithCopy</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">TK</span><span class="err">&#39;</span>           <span class="c1">// initializeBufferWithTakeOfBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Tk</span><span class="err">&#39;</span>           <span class="c1">// initializeBufferWithTake</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">tk</span><span class="err">&#39;</span>           <span class="c1">// initializeWithTake</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">pr</span><span class="err">&#39;</span>           <span class="c1">// projectBuffer</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">xs</span><span class="err">&#39;</span>           <span class="c1">// storeExtraInhabitant</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">xg</span><span class="err">&#39;</span>           <span class="c1">// getExtraInhabitantIndex</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Cc</span><span class="err">&#39;</span>           <span class="c1">// initializeArrayWithCopy</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Tt</span><span class="err">&#39;</span>           <span class="c1">// initializeArrayWithTakeFrontToBack</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">tT</span><span class="err">&#39;</span>           <span class="c1">// initializeArrayWithTakeBackToFront</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">ug</span><span class="err">&#39;</span>           <span class="c1">// getEnumTag</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">up</span><span class="err">&#39;</span>           <span class="c1">// destructiveProjectEnumData</span>
</span><span class="line"><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">ui</span><span class="err">&#39;</span>           <span class="c1">// destructiveInjectEnumTag</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">value</span><span class="o">-</span><span class="n">witness</span><span class="o">-</span><span class="n">kind</span><span class="o">&gt;</span> <span class="n">differentiates</span> <span class="n">the</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">value</span> <span class="n">witness</span> <span class="n">functions</span> <span class="k">for</span> <span class="n">a</span> <span class="n">type</span><span class="p">.</span>
</span><span class="line">
</span><span class="line"><span class="n">Identifiers</span>
</span><span class="line">
</span><span class="line"><span class="n">identifier</span> <span class="o">::=</span> <span class="n">natural</span> <span class="n">identifier</span><span class="o">-</span><span class="n">start</span><span class="o">-</span><span class="kt">char</span> <span class="n">identifier</span><span class="o">-</span><span class="kt">char</span><span class="o">*</span>
</span><span class="line"><span class="n">identifier</span> <span class="o">::=</span> <span class="sc">&#39;o&#39;</span> <span class="n">operator</span><span class="o">-</span><span class="n">fixity</span> <span class="n">natural</span> <span class="n">operator</span><span class="o">-</span><span class="kt">char</span><span class="o">+</span>
</span><span class="line">
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="n">fixity</span> <span class="o">::=</span> <span class="sc">&#39;p&#39;</span>                    <span class="c1">// prefix operator</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="n">fixity</span> <span class="o">::=</span> <span class="sc">&#39;P&#39;</span>                    <span class="c1">// postfix operator</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="n">fixity</span> <span class="o">::=</span> <span class="sc">&#39;i&#39;</span>                    <span class="c1">// infix operator</span>
</span><span class="line">
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;a&#39;</span>                      <span class="c1">// &amp; &#39;and&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;c&#39;</span>                      <span class="c1">// @ &#39;commercial at&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;d&#39;</span>                      <span class="c1">// / &#39;divide&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;e&#39;</span>                      <span class="c1">// = &#39;equals&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;g&#39;</span>                      <span class="c1">// &gt; &#39;greater&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;l&#39;</span>                      <span class="c1">// &lt; &#39;less&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;m&#39;</span>                      <span class="c1">// * &#39;multiply&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;n&#39;</span>                      <span class="c1">// ! &#39;not&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;o&#39;</span>                      <span class="c1">// | &#39;or&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;p&#39;</span>                      <span class="c1">// + &#39;plus&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;q&#39;</span>                      <span class="c1">// ? &#39;question&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;r&#39;</span>                      <span class="c1">// % &#39;remainder&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;s&#39;</span>                      <span class="c1">// - &#39;subtract&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;t&#39;</span>                      <span class="c1">// ~ &#39;tilde&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;x&#39;</span>                      <span class="c1">// ^ &#39;xor&#39;</span>
</span><span class="line"><span class="n">operator</span><span class="o">-</span><span class="kt">char</span> <span class="o">::=</span> <span class="sc">&#39;z&#39;</span>                      <span class="c1">// . &#39;zperiod&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<identifier>是运行长度编码：自然表示的字符如何跟进。操作字符映射到字母字符给出。在两种情况下可以一个标识符以数字开头，所以有与运行长度没有歧义。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">identifier</span> <span class="o">::=</span> <span class="sc">&#39;X&#39;</span> <span class="n">natural</span> <span class="n">identifier</span><span class="o">-</span><span class="n">start</span><span class="o">-</span><span class="kt">char</span> <span class="n">identifier</span><span class="o">-</span><span class="kt">char</span><span class="o">*</span>
</span><span class="line"><span class="n">identifier</span> <span class="o">::=</span> <span class="sc">&#39;X&#39;</span> <span class="sc">&#39;o&#39;</span> <span class="n">operator</span><span class="o">-</span><span class="n">fixity</span> <span class="n">natural</span> <span class="n">identifier</span><span class="o">-</span><span class="kt">char</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
包含非ASCII字符都使用在RFC 3492中指定Punycode算法编码，与该_用作编码定界符的修改和大写字母A至J标识符被用来代替数字0至9中的编码字符集。是混淆然后由一个X后跟编码串的游程长度和所述编码的字符串本身。例如，标识符vergüenza被错位到X12vergenza_JFa。 （在标准的Punycode编码是vergenza-95A）

包含非ASCII字符，运营商首先映射ASCII运营字符的字母作为纯ASCII运营商名称错位，然后Punycode码编码取代字符串。是混淆然后由XO后跟的固定性，该编码串的运行长度，以及编码的字符串本身。例如，管道符“+”的错位，以Xoi7p_qcaDc（p_qcaDc是的替代字符串“P»编码）。

<h4>代替</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">substitution</span> <span class="o">::=</span> <span class="sc">&#39;S&#39;</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<substitution>是一个向后引用到先前错位实体。该重整算法维护实体的映射来替代指标，因为它运行。时，可以通过取代（的模块，名义类型或协议）来表示一个实体是错位，一个取代是第一所期望的是取代的地图，并且如果存在，该实体使用相关替代索引错位。否则，该实体通常错位，且随后添加到替代地图，并与下一个可利用的取代索引相关联。
例如，在重整函数类型（zim.zang.zung，zim.zang.zung，zim.zippity） - &gt; zim.zang.zoo（与模块ZIM和类zim.zang），重复上下文ZIM，以星。臧和zim.zang.zung将使用替代被错位的第一次后，被截断。第一个参数类型将在长形裂伤，CC3zim4zang4zung，并在这样做，ZIM将获得替代S_，zim.zang将获得替代S0_，并zim.zang.zung将收购S1_。第二个参数是一样的第一和裂伤将利用其替换，CS1_。第三个参数类型将裂伤使用替代ZIM，CS_7zippity。 （它也获得替代S2_这将被使用，如果再次错位。）结果类型将裂伤使用替代zim.zang，CS0_zoo（并获得替代S3_）。全功能型因而轧液作为fTCC3zim4zang4zungCS1_CS_7zippity_CS0_zoo。
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">substitution</span> <span class="o">::=</span> <span class="sc">&#39;s&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在特殊的替换s被用于Swift标准库模块。

<h4>预定义替换</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">module</span> <span class="o">::=</span> <span class="sc">&#39;s&#39;</span>                       <span class="c1">// Swift</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">module</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">SC</span><span class="err">&#39;</span>                      <span class="c1">// C</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">module</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">So</span><span class="err">&#39;</span>                      <span class="c1">// Objective-C</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sa</span><span class="err">&#39;</span>                <span class="c1">// Swift.Array</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sb</span><span class="err">&#39;</span>                <span class="c1">// Swift.Bool</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sc</span><span class="err">&#39;</span>                <span class="c1">// Swift.UnicodeScalar</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sd</span><span class="err">&#39;</span>                <span class="c1">// Swift.Float64</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sf</span><span class="err">&#39;</span>                <span class="c1">// Swift.Float32</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Si</span><span class="err">&#39;</span>                <span class="c1">// Swift.Int</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">SP</span><span class="err">&#39;</span>                <span class="c1">// Swift.UnsafePointer</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sp</span><span class="err">&#39;</span>                <span class="c1">// Swift.UnsafeMutablePointer</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">SQ</span><span class="err">&#39;</span>                <span class="c1">// Swift.ImplicitlyUnwrappedOptional</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sq</span><span class="err">&#39;</span>                <span class="c1">// Swift.Optional</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">SR</span><span class="err">&#39;</span>                <span class="c1">// Swift.UnsafeBufferPointer</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Sr</span><span class="err">&#39;</span>                <span class="c1">// Swift.UnsafeMutableBufferPointer</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">SS</span><span class="err">&#39;</span>                <span class="c1">// Swift.String</span>
</span><span class="line"><span class="n">known</span><span class="o">-</span><span class="n">nominal</span><span class="o">-</span><span class="n">type</span> <span class="o">::=</span> <span class="err">&#39;</span><span class="n">Su</span><span class="err">&#39;</span>                <span class="c1">// Swift.UInt</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<known-module> 以及 <known-nominal-type>是内置的替换对于某些常见的实体。像任何其他的替代，他们都以&#8217;S&#8217;。
Objective-C的模块作为上下文重整Objective-C类为的<type>。

<h4>索引</h4>
<p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">index</span> <span class="o">::=</span> <span class="sc">&#39;_&#39;</span>                              <span class="c1">// 0</span>
</span><span class="line"><span class="n">index</span> <span class="o">::=</span> <span class="n">natural</span> <span class="sc">&#39;_&#39;</span>                      <span class="c1">// N+1</span>
</span><span class="line"><span class="n">natural</span> <span class="o">::=</span> <span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<index>是一个生产环境中不能在一个数字结尾的数字编码;它的编码数量较少的优化。


<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</index></p></type></known-nominal-type></known-module></p></substitution></p></identifier></p></protocol-conformance></p></type></impl-function-attribute></type></type></type></type></p></实现了一套功能型></reabstract-signature></private-decl-name></private-decl-name></p></li></ul></p></li></ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些年我的不足]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2015/01/14/zhe-xie-nian-wo-de-bu-zu/"/>
    <updated>2015-01-14T17:54:14+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2015/01/14/zhe-xie-nian-wo-de-bu-zu</id>
    <content type="html"><![CDATA[<p>如果把人生比作跑步的话，我们都在用自己的节奏和姿势在完成比赛。这些跑步的技巧可能是小时候从老师，朋友，家人那得来的。随着时间的流逝，我们习惯了这种跑步的技能，看见那些跑得快的，会羡慕；跑得慢的，会不屑；跑得别扭的，会当作笑料。但是自己跑得怎么样，却很少关心。为什么要跑这条道？为什么这么慢？为什么这么累？</p>
<p>我们很难做到客观，尤其是面对自己的时候，那些缺点、曾经犯的错会自动进入盲区，躲避意识的雷达。尽管如此，我还是找到了数量可观的不足，才发现，原来这么些年，我一直在以这么别扭、丑陋的姿势在跑步。</p>
<h3>不够专注</h3>
<!-- more-->
<p>乔希·维茨金在《学习的艺术》里曾这么描述他当时的专注程度：『我太过于专注，以至于她觉得如果把手放在我眼前的话都会燃烧起来。』</p>
<p>如果足够专注的话，就会进入一种『流状态』，忘了时间，忘了身边的世界，只有自己当前所做的事。遗憾的是，我进入这种状态的机会不多，也没有有意识地去培养。</p>
<h3>不善于推迟满足感</h3>
<p>假设有两个任务，一个比较简单、有趣，另一个比较困难，但如果完成的话对自己的提升会比前一个任务高。这时你会选择先做哪一个？如果那个困难的任务并不强迫你必须完成，还会去做吗？</p>
<p>推迟满足感可以让我们享受解决问题带来的乐趣，更重要的是锻炼了自律能力。</p>
<h3>不善于制定计划</h3>
<p>做事往往是凭着一股热情，热度过了，事情也基本到尾声了，而事实上，没有人的热情可以持续很长一段时间。</p>
<p>把一个大目标，切分成多个合适的小目标，这是我不擅长的。如果是从A到D，那D就是我的目标，而不会加入B,C这两个里程碑，结果就是把自己弄的很累，作品也不够精致。</p>
<h3>缺少大局观</h3>
<p>我很少去考虑这个事情，很多时候都是跟着感觉去走，那些我看着或用着不舒服的，一概删掉。在上海的时候，我对旅行有点兴趣，但当时那些旅行方面的网站让我没有一点参与欲望，于是我组织几个人去旅游，并没有很好的统筹这个事情，反而大家花了冤枉钱也玩得不是很尽兴，当时真没想好该怎么去规划这个事情，人员通知完了，接下来该怎么办，就束手无策了。如果能够克制一下自己的偏执，能够细致地去了解这个事情，这些时间还能花在更有意义的事情上。</p>
<h3>缺少洞悉事物本质的能力</h3>
<p>这个能力不是天生就有的，需要后期不断地磨练。大前研一之前是核能博士，最后却在麦肯锡搞出了一番名堂。他总是能在很短的时间内就帮企业找到问题的原因，这得归功于他从小锻炼的逻辑思维能力和平日对每一个细小的事物都当作案例去对待的心态。</p>
<p>不找出真正的原因，就别期望能够解决问题。所以最重要的是思考“在各种现象之间，如何找出真正的原因”，绝不能在列举了各种现象之后就停止了思考。</p>
<h3>缺乏想象力</h3>
<p>爱因斯坦说过『想象力比知识重要』。由于从小反应就比较迟钝，加上缺少敏锐的观察力，当然还有老师们的辛勤扼杀，想象力已经生锈。</p>
<p>想象力是各种创造的源泉，想象力的缺失必然也导致创造力的低下，而如果不能去创造一些又酷又有创意的东西，那生活就太乏味了。</p>
<h3>好奇心不够</h3>
<p>大前研一在《思考的技术》里说：『一定要保持好奇心，因为好奇心可以转化为思考的养分』。好奇心可以促使我们思考，让我们始终保持学习的动力和乐趣，让我们更深刻地去理解周围的事物。</p>
<p>好奇心不够的人，更容易被『专家』蛊惑，他们喜欢『海绵式学习』而不是『淘金式学习』。The world is trying to keep you stupid，擦亮眼睛，在接纳一个观点前，先质疑。</p>
<h3>可用的模型不多</h3>
<p>每一个行业都有它的特殊性，同时又具有普遍性。从自己从事的行业中提取出可用于其他行业的模型是一个不小的考验。比如缓存，可以让用户能更快地获取数据，用在京东这样的B2C商城上，缓存可以是在多个地区设立货仓(其实更像cdn)，这样不同地区的顾客可以从离他们最近的货仓出货，加快货物到达时间。</p>
<p>把具体问题抽象化，找到问题的本质，然后套用掌握的一个或多个模型来解决问题。模型越多，了解得越透彻，解决问题的能力也就越强。</p>
<h3>阅读量不够</h3>
<p>查理·芒格在《穷查理宝典》里说：『我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的——没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我，觉得我是一本长了两条腿的书』。</p>
<p>阅读能够拓宽我们的视野，吸收他人的精华，指导我们的生活，愉悦我们的心灵。也曾经列了一些必读书目，由于重视程度不够，加上这些书比较厚，读起来颇费力，且没有一定要读的理由，就一拖再拖，结果就不了了之。</p>
<h3>没能把一件事情做到极致</h3>
<p>我喜欢做一些有意思或者自认为有价值的项目，如前面所说，很多都是憋足一股劲，凭着热情，直到做到自己还算满意，然后，就没有然后了。</p>
<p>这世界平庸的项目有很多，不要再去凑热闹了，把精力集中在少数几个最有兴趣和意义的项目上，让它们发挥出最大的价值。</p>
<h3>不够开放的心态</h3>
<p>想到一个解决方案时，不要急着实现，跟过来人探讨一下，看看这个实现有没有问题，有没有更好的方案。我总是怕打扰别人，有了想法就去实现，经常会走了不少弯路。</p>
<p>多去看看外面的世界，接触各行各业的人，分享各自的经历。北京open party曾经去过一次，给我的感觉很好，大家分享自己在某一领域的经验，或旅行心得，能学到不少东西。</p>
<p>所谓开放的心态，就是愿意去听听别人的看法，即使自己已经有了想法。自己看到的，想到的很可能不够全面，别人尤其是过来人的想法往往能够弥补这些思维漏洞。</p>
<h3>信念不够坚定</h3>
<p>坚定的信念是战胜困难的强有力武器。我在遇到一些感觉超出了自己能力范围的问题时，会有退缩心理。搞不定这个问题时，就会犹豫：我一定要从事这个行业吗？我在其他行业会不会更有天赋？这种心态越严重，越不利于问题的解决，到最后搞得自己心神不宁。</p>
<p>结婚前要睁大双眼看清楚，结婚后要睁一只眼闭一只眼。在选择行业时也一样，一定要谨慎，同时结合自己的兴趣和能力。一旦决定了，就不要再给自己留退路。</p>

<p>PS:大前研一，是日本著名管理学家。并非是研究生一年级，请勿望文生义。</p>
<hr />

<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift的强大之处]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/09/18/swiftde-qiang-da-zhi-chu/"/>
    <updated>2014-09-18T13:38:34+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/09/18/swiftde-qiang-da-zhi-chu</id>
    <content type="html"><![CDATA[<p>在写任何东西之前我需要承认我是带有偏见的：我爱 Swift。我认为这是从我开始接触 Cocoa 生态系统以来这个平台上发生的最好的事情。我想通过分享我在 Swift，Objective-C 和 Haskell 上的经验让大家知道我为何这样认为。写这篇文章并不是为了介绍一些最好的实践 (写这些的时候 Swift 还太年轻，还没最好实践被总结出来)，而是举几个关于 Swift 强大之处的例子。</p>

<p>给大家一些我的个人背景：在成为全职 iOS/Mac 工程师之前我花了几年的时间做 Haskell (包括一些其他函数式编程语言) 开发。我仍然认为 Haskell 是我所有使用过的语言中最棒的之一。然而我转战到了 Objective-C，是因为我相信 iOS 是最令人激动的平台。刚开始接触 Objective-C 的时候我有些许沮丧，但我慢慢地学会了欣赏它。</p>

<p>当苹果在 WWDC 发布 Swift 的时候我非常的激动。我已经很久没有对新技术的发布感的如此兴奋了。在看过文档之后我意识到 Swift 使我们能够将现有的函数式编程知识和 Cocoa API 无缝地整合到一起。我觉得这两者的组合非常独特：没有任何其他的语言将它们融合地如此完美。就拿 Haskell 来说，想要用它来使用 Objective-C API 相当的困难。同样，想用 Objective-C 去做函数式编程也是十分困难的。</p>

<p>在 Utrecht 大学期间我学会了函数式编程。因为是在很学术的环境下学习所以并没有觉得很多复杂的术语 (moands，applicative functors 以及很多其他的东西) 有多么难懂。我觉得对很多想学习函数式编程的人来说这些名称是一个很大的阻碍。</p>

<p>不仅仅名称很不同，风格也不一样。作为 Objective-C 程序员，我们很习惯于面向对象编程。而且因为大多数语言不是面对对象编程就是与之类似，我们可以看懂很多不同语言的代码。阅读函数式编程语言的时候则大不相同 &#8211; 如果你没有习惯的话看起来简直莫名其妙。</p>

<p>那么，为什么你要使用函数式编程呢？它很奇怪，很多人都不习惯而且学习它要花费大量的时间。并且对于大多数问题面向对象编程都能解决，所以没有必要去学习任何新的东西对吧？</p>

<p>对于我来说，函数式编程只是工具箱中的一件工具。它是一个改变了我对编程的理解的强大工具。在解决问题的时候它非常强大。对于大多数问题面向对象编程都很棒，但是对于其他一些问题应用函数式编程会给你带来巨大的时间/精力的节省。</p>

<p>开始学习函数式编程或许有些痛苦。第一，你必须放手一些老的模式。而因为我们很多人常年用面对对象的方式去思考，做到这一点是很困难的。在函数式编程当中你想的是不变的数据结构以及那些转换它们的函数。在面对对象编程当中你考虑的是互相发送信息的对象。如果你没有马上理解函数式编程，这是一个好的信号。你的大脑很可能已经完全适应了用面对对象的方法来解决问题。</p>

<h2>例子</h2>
<!-- more-->
<p>我最喜欢的 Swift 功能之一是对 optionals 的使用。Optionals 让我们能够应对有可能存在也有可能不存在的值。在 Objective-C 里我们必须在文档中清晰地说明 nil 是否是允许的。Optionals 让我们将这份责任交给了类型系统。如果你有一个可选值，你就知道它可以是 nil。如果它不是可选值，你知道它不可能是 nil。</p>

<p>举个例子，看看下面一小段 Objective-C 代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">NSAttributedString</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributedString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">input</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">input</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看上去没有什么问题，但是如果 <code>input</code> 是 nil, 它就会崩溃。这种问题你只能在运行的时候才能发现。取决于你如何使用它，你可能很快能发现问题，但是你也有可能在发布应用之后才发现，导致用户正在使用的应用崩溃。</p>

<p>用相同的 Swift 的 API 来做对比。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">extension</span> <span class="n">NSAttributedString</span> <span class="p">{</span>
</span><span class="line">    <span class="n">init</span><span class="p">(</span><span class="n">string</span> <span class="nl">str:</span> <span class="n">String</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看起来像对Objective-C的直接翻译，但是 Swift 不允许 <code>nil</code> 被传入。如果要达到这个目的，API 需要变成这个样子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">extension</span> <span class="n">NSAttributedString</span> <span class="p">{</span>
</span><span class="line">    <span class="n">init</span><span class="p">(</span><span class="n">string</span> <span class="nl">str:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意新加上的问号。这意味着你可以使用一个值或者是 nil。类非常的精确：只需要看一眼我们就知道什么值是允许的。使用 optionals 一段时间之后你会发现你只需要阅读类型而不用再去看文档了。如果犯了一个错误，你会得到一个编译时警告而不是一个运行时错误。</p>

<h2>建议</h2>

<p>如果可能的话避免使用 optionals。Optionals 对于使用你 API 的人们来说是一个多余的负担。话虽如此，还是有很多地方可以很好使用它们。如果你有一个函数会因为一个明显的原因失败你可以返回一个 optional。举例来说，比如将一个  #00ff00 字符串转换成颜色。如果你的参数不符合正确的格式，你应该返回一个 <code>nil</code> 。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">parseColorFromHexString</span><span class="p">(</span><span class="nl">input:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIColor</span><span class="o">?</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你需要阐明错误信息，你可以使用 <code>Either</code> 或者 <code>Result</code> 类型 (不在标准库里面)。当失败的原因很重要的时候，这种做法会非常有用。<a href="http://nomothetis.svbtle.com/error-handling-in-swift">“Error Handling in Swift”</a> 一文中有个很好的例子。</p>

<h2 id="enums">Enums</h2>

<p>Enums 是一个随 Swift 推出的新东西，它和我们在 Objective-C 中见过的东西都大不相同。在 Objective-C 里面我们有一个东西叫做 enums, 但是它们差不多就是升级版的整数。</p>

<p>我们来看看布尔类型。一个布尔值是两种可能性 &#8211; true 或者 false &#8211; 中的一个。很重要的一点是没有办法再添加另外一个值 &#8211; 布尔类型是<strong>封闭的</strong>。布尔类型的封闭性的好处是每当使用布尔值的时候我们只需要考虑 true 或者 false 这两种情况。</p>

<p>在这一点上面 optionals 是一样的。总共只有两种情况：<code>nil</code> 或者有值。在 Swift 里面布尔和 optional 都可以被定义为 enums。但有一个不同点：在 optional enum 中有一种可能性有一个相关值。我们来看看它们不同的定义：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">False</span>
</span><span class="line">    <span class="k">case</span> <span class="n">True</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">enum</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Nil</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Some</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它们非常的相似。如果你把它们的名称改成一样的话，那么唯一的区别就是括号里的相关值。如果你给 optional 中的 <code>Nil</code>  情况也加上一个值，你就会得到一个 <code>Either</code> 类型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">Either</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Left</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Right</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在函数式编程当中，在你想表示两件事情之间的选择时候你会经常用到 <code>Either</code> 类型。举个例子：如果你有一个函数返回一个整数或者一个错误，你就可以用 <code>Either&lt;Int, NSError&gt;</code>。如果你想在一个字典中储存布尔值或者字符串，你就可以使用 <code>Either&lt;Bool,String&gt;</code> 作为键。</p>

<blockquote>
  <p>理论旁白：有些时候 enums 被称为 <strong>sum 类型</strong>，因为它们是几个不同类型的总和。在 <code>Either</code> 类型的例子中，它们表达的是 <code>A</code> 类型和 <code>B</code> 类型的和。Structs 和 tuples 被称为 <strong>product 类型</strong>，因为它们代表几个不同类型的乘积。参见<a href="http://en.wikipedia.org/wiki/Algebraic_data_type">“algebraic data types.”</a></p>
</blockquote>

<p>理解什么时候使用 enums 什么时候使用其他的数据类型 (比如 <a href="http://objccn.io/issue-16-2">class 或者 structs</a>)会有一些难度。当你有一个固定数量的值的集合的时候，enum 是最有用的。比如说，如果我们设计一个 Github API 的 wrapper，我们可以用 enum 来表示端点。比如有一个不需要任何参数的 <code>/zen</code> 的 API 端点。再比如为了获取用户的资料我们需要提供用户名。最后我们显示用户的仓库时，我们需要提供用户名以及一个值去说明是否从小到大地排列结果。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">Github</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Zen</span>
</span><span class="line">    <span class="k">case</span> <span class="n">UserProfile</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Repositories</span><span class="p">(</span><span class="nl">username:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">sortAscending:</span> <span class="n">Bool</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>定义 API 端点是很好的使用 enum 的场景。API 的端点是有限的，所以我们可以为每一个端点定义一个情况。如果我们在对这些端点使用 switch 的时候没有包含所有情况的话，我们会被给予警告。所以说当我们需要添加一个情况的时候我们需要更新每一个用到这个 enum 的函数。</p>

<p>除非能够拿到源代码，其他使用我们 enum 的人不能添加新的情况，这是一个非常有用的限制。想想要是你能够加一种新情况到 <code>Bool</code> 或者 <code>Optional</code> 里会怎么样吧 &#8211; 所有用到 它的函数都需要重写。</p>

<p>比如说我们正在开发一个货币转换器。我们可以将货币给定义成 enum：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">enum</span> <span class="n">Currency</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Eur</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Usd</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们现在可以做一个获取任何货币符号的函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">symbol</span><span class="p">(</span><span class="nl">input:</span> <span class="n">Currency</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="n">input</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="p">.</span><span class="nl">Eur:</span> <span class="k">return</span> <span class="s">&quot;€&quot;</span>
</span><span class="line">        <span class="k">case</span> <span class="p">.</span><span class="nl">Usd:</span> <span class="k">return</span> <span class="s">&quot;$&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，我们可以用我们的 <code>symbol</code> 函数，来依据系统本地设置得到一个很好地格式化过的字符串：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">format</span><span class="p">(</span><span class="nl">amount:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">currency:</span> <span class="n">Currency</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="n">let</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">NSNumberFormatter</span><span class="p">()</span>
</span><span class="line">    <span class="n">formatter</span><span class="p">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="p">.</span><span class="n">CurrencyStyle</span>
</span><span class="line">    <span class="n">formatter</span><span class="p">.</span><span class="n">currencySymbol</span> <span class="o">=</span> <span class="n">symbol</span><span class="p">(</span><span class="n">currency</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">formatter</span><span class="p">.</span><span class="n">stringFromNumber</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样一来有一个很大的限制。我们可能会想让我们 API 的使用者在将来可以修改一些情况。在 Objective-C 当中向一个接口里添加更多类型的常见解决方法是子类化。在 Objective-C 里面理论上你可以子类化任何一个类，然后通过这种办法来扩展它。在 Swift 里面你仍然可以使用子类化，但是只能对 <code>class</code> 使用，对于 <code>enum</code> 则不行。然而，我们可以用另一种技术来达到目的 (这种办法在 Objetive-C 和 Swift 的 protocol 中都可行）。</p>

<p>假设我们定义一个货币符号的协议：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">protocol</span> <span class="n">CurrencySymbol</span> <span class="p">{</span>
</span><span class="line">    <span class="n">func</span> <span class="n">symbol</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们让 <code>Currency</code> 类型遵守这个协议。注意我们可以将 <code>input</code> 参数去掉，因为这里它被作为 self 隐式地进行传递：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">extension</span> <span class="n">Currency</span> <span class="o">:</span> <span class="n">CurrencySymbol</span> <span class="p">{</span>
</span><span class="line">   <span class="n">func</span> <span class="n">symbol</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">        <span class="k">switch</span> <span class="n">self</span> <span class="p">{</span>
</span><span class="line">            <span class="k">case</span> <span class="p">.</span><span class="nl">Eur:</span> <span class="k">return</span> <span class="s">&quot;€&quot;</span>
</span><span class="line">            <span class="k">case</span> <span class="p">.</span><span class="nl">Usd:</span> <span class="k">return</span> <span class="s">&quot;$&quot;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们可以重写 <code>format</code> 方法来格式化任何遵守我们协议的类型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">format</span><span class="p">(</span><span class="nl">amount:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">currency:</span> <span class="n">CurrencySymbol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="n">let</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">NSNumberFormatter</span><span class="p">()</span>
</span><span class="line">    <span class="n">formatter</span><span class="p">.</span><span class="n">numberStyle</span> <span class="o">=</span> <span class="p">.</span><span class="n">CurrencyStyle</span>
</span><span class="line">    <span class="n">formatter</span><span class="p">.</span><span class="n">currencySymbol</span> <span class="o">=</span> <span class="n">currency</span><span class="p">.</span><span class="n">symbol</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">formatter</span><span class="p">.</span><span class="n">stringFromNumber</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样一来我们将我们代码的可延展性大大提升类 &#8211; 任何遵守 <code>CurrencySymbol</code> 协议的类型都可以被格式化。比如说，我们建立一个新的类型来储存比特币，我们可以立刻让它拥有格式化功能：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">Bitcoin</span> <span class="o">:</span> <span class="n">CurrencySymbol</span> <span class="p">{</span>
</span><span class="line">    <span class="n">func</span> <span class="n">symbol</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;B⃦&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是一种写出具有延展性函数的很好的方法。通过使用一个需要遵守协议，而不是一个实实在在的类型，你的 API 的用户能够加入更多的类型。你仍然可以利用 enum 的灵活性，但是通过让它们遵守协议，你可以更好地表达自己的意思。根据你的具体情况，你现在可以轻松地选择是否开放你的 API。</p>

<h2>类型安全</h2>

<p>我认为类型的安全性是 Swift 一个很大的优势。就像我们在讨论 optionals 时看见的一样，我们可以用一些聪明的手段将某些检测从运行时转移到编译时。Swift 中数组的工作方式就是一个例子：一个数组是泛型的，它只能容纳一个类型的对象。将一个整数附加在一个字符组数组后面是做不到的。这样以来就消灭了一个类的潜在 bug。(值得注意的是如果你需要同时将字符串或者整数放到一个数组里的话，你可以使用上面谈到过的 <code>Either</code> 类型。)</p>

<p>再比如说，我们要将我们到货币转换器延展为一个通用的单位换算器。如果我们使用 <code>Double</code> 去表示数量，会有一点点误导性。比如说，100.0 可以表示 100 美元，100 千克或者任何能用 100 表示的东西。我们可以借助类型系统来制作不同的类型来表示不同的物理上的数量。比如说我们可以定义一个类型来表示钱：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">Money</span> <span class="p">{</span>
</span><span class="line">    <span class="n">let</span> <span class="n">amount</span> <span class="o">:</span> <span class="n">Double</span>
</span><span class="line">    <span class="n">let</span> <span class="nl">currency:</span> <span class="n">Currency</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们可以定义另外一个结构来表示质量：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">Mass</span> <span class="p">{</span>
</span><span class="line">    <span class="n">let</span> <span class="nl">kilograms:</span> <span class="n">Double</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们就消除了不小心将 <code>Money</code>  和 <code>Mass</code> 相加的可能性。基于你应用的特质有时候将一些简单的类型包装成这样是很有效的。不仅如此，阅读代码也会变得更加简单。假设我们遇到一个 <code>pounds</code> 函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">pounds</span><span class="p">(</span><span class="nl">input:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Double</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>光看类型定义很难看出来这个函数的功能。它将欧元装换成英镑？还是将千克转换成磅？ (英文中英镑和磅均为 pound) 我们可以用不同的名字，或者可以建立文档 (都是很好的办法)，但是我们有第三种选择。我们可以将这个类型变得更明确：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">pounds</span><span class="p">(</span><span class="nl">input:</span> <span class="n">Mass</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Double</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们不仅让这个函数的用户能够立刻理解这个函数的功能，我们也防止了不小心传入其他单位的参数。如果你试图将 <code>Money</code> 作为参数来使用这个函数，编译器是不会接受的。另外一个可能的提升是使用一个更精确的返回值。现在它只是一个 <code>Double</code>。</p>

<h2>不可变性</h2>

<p>Swift 另外一个很棒的功能是内置的不可变性。在 Cocoa 当中很多的 API 都已经体现出了不可变性的价值。想了解这一点为什么如此重要，<a href="http://nomothetis.svbtle.com/error-handling-in-swift">“Error Handling in Swift”</a> 是一个很好的参考。比如，作为一个 Cocoa 开发者，我们使用很多成对的类 (<code>NSString</code> vs. <code>NSMutableString</code>，<code>NSArray</code> vs. <code>NSMutableArray</code>)。当你得到一个字符串值，你可以假设它不会被改变。但是如果你要完全确信，你依然要复制它。然后你才知道你有一份不可变的版本。</p>

<p>在 Swifit 里面，不可变性被直接加入这门语言。比如说如果你想建立一个可变的字符串，你可以如下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">var</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然而，如果你想要一个不可变的字符串，你可以做如下的事情：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不可变的数据在创建可能会被未知用户使用的 API 时会给你很大的帮助。比如说，你有一个需要字符串作为参数的函数，在你迭代它的时候，确定它不会被改变是很重要的。在 Swift 当中这是默认的行为。正是因为这个原因，在写多线程代码的时候使用不可变资料会使难度大大降低。</p>

<p>还有另外一个巨大的优势。如果你的函数只使用不可变的数据，你的类型签名就会成为很好的文档。在 Objective-C 当中则不然。比如说，假设你准备在 OS X 上使用 <code>CIFilter</code>。在实例化之后你需要使用 <code>setDefaults</code> 方法。这一点在文档中有提到。有很多这样类都是这个样子。在实例化之后，在你使用它之前你必须要使用另外一个方法。问题在于，如果不阅读文档的话，经常会不清楚哪些函数需要被使用，最后你有可能遇到很奇怪的状况。</p>

<p>当使用不可变资料的时候，类型签名让事情变得很清晰。比如说，<code>map</code> 的类签名。我们知道有一个可选的 <code>T</code> 值，而且有一个将 <code>T</code> 转换成 <code>U</code> 的函数。结果是一个可选的 <code>U</code> 值。原始值是不可能改变的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">x:</span> <span class="n">T</span><span class="o">?</span><span class="p">,</span> <span class="nl">f:</span> <span class="n">T</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于数组的 <code>map</code> 来说是一样的。它被定义成一个数组的延伸，所以参数本身是 <code>self</code>。我们可以看到它用一个函数将 <code>T</code> 转化成 <code>U</code>，并且生成一个 <code>U</code> 的数组。因为它是一个不可变的函数，我们知道原数组是不会变化的，而且我们知道结果也是不会改变的。将这些限制内置在l类型系统中，并有编译器来监督执行，让我们不再需要去查看文档并记住什么会变化。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class="line">    <span class="n">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">transform:</span> <span class="n">T</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">U</span><span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>总结</h2>

<p>Swift 带来了很多有趣的可能性。我尤其喜欢的一点是过去我们需要手动检测或者阅读文档的事情现在编译器可以帮我们来完成。我们可以选择在合适的时机去使用这些可能性。我们依然会用我们现有的，成熟的办法去写代码，但是我们可以在合适的时候在我们代码的某些地方应用这些新的可能性。</p>

<p>我预测：Swift 会很大程度上改变我们写代码的方式，而且是向好的方向改变。脱离 Objective-C 会需要几年的时间，但是我相信我们中的大多数人会做出这个改变并且不会后悔。有些人会很快的适应，对另外一些人可能会花上很长的时间。但是我相信总有一天绝大多数人会看到 Swift 带给我们的种种好处。</p>

<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift的函数式API]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/09/18/swiftde-han-shu-shi-api/"/>
    <updated>2014-09-18T10:19:05+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/09/18/swiftde-han-shu-shi-api</id>
    <content type="html"><![CDATA[<p>在过去的时间里，人们对于设计 API 总结了很多通用的模式和最佳实践方案。一般情况下，我们总是可以从苹果的 Foundation、Cocoa、Cocoa Touch 和很多其他框架中总结出一些开发中的范例。毫无疑问，对于“特定情境下的 API 应该如何设计”这个问题，不同的人总是有着不同的意见，对于这个问题有很大的讨论空间。不过对于很多 Objective-C 的开发者来说，对于那些常用的模式早已习以为常。</p>

<p>随着 Swift 的出现，设计 API 引起了更多的问题。绝大多数情况下，我们只能继续做着手头的工作，然后把现有的方法翻译成 Swift 版本。不过，这对于 Swift 来说并不公平，因为和 Objective-C 相比，Swift 添加了很多新的特性。引用 Swift 创始人 <a href="https://twitter.com/clattner_llvm">Chris Lattner</a> 的一段话：</p>

<blockquote>
  <p>Swift 引入了泛型和函数式编程的思想，极大地扩展了设计的空间。</p>
</blockquote>

<p>在这篇文章里，我们将会围绕 <code>Core Image</code> 进行 API 封装，以此为例，探索如何在 API 设计中使用这些新的工具。 <code>Core Image</code> 是一个功能强大的图像处理框架，但是它的 API 有时有点笨重。 <code>Core Image</code> 的 API 是弱类型的 - 它通过键值对 (key-value) 设置图像滤镜。这样在设置参数的类型和名字时很容易失误，会导致运行时错误。新的 API 将会十分的安全和模块化，通过使用类型而不是键值对来规避这样的运行时错误。</p>

<h2>目标</h2>

<p>我们的目标是构建一个 API ，让我们可以简单安全的组装自定义滤镜。举个例子，在文章的结尾，我们可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="n">blur</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">)</span> <span class="o">&gt;|&gt;</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="n">overlayColor</span><span class="p">)</span>
</span><span class="line"><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">myFilter</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面构建了一个自定义的滤镜，先模糊图像，然后再添加一个颜色蒙版。为了达到这个目标，我们将充分利用 Swift 函数是一等公民这一特性。项目源码可以在 Github 上的这个<a href="https://github.com/objcio/issue-16-functional-apis">示例项目</a>中下载。</p>

<h2 id="filter">Filter 类型</h2>

<p><code>CIFilter</code> 是 <code>Core Image</code> 中的一个核心类，用来创建图像滤镜。当实例化一个 <code>CIFilter</code> 对象之后，你 (几乎) 总是通过 <code>kCIInputImageKey</code> 来输入图像，然后通过 <code>kCIOutputImageKey</code> 获取返回的图像，返回的结果可以作为下一个滤镜的参数输入。</p>

<p>在我们即将开发的 API 里，我们会把这些键值对 (key-value) 对应的真实内容抽离出来，为用户提供一个安全的强类型 API。我们定义了自己的滤镜类型 <code>Filter</code>，它是一个可以传入图片作为参数的函数，并且返回一个新的图片。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">typealias</span> <span class="n">Filter</span> <span class="o">=</span> <span class="n">CIImage</span> <span class="o">-&gt;</span> <span class="n">CIImage</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more-->
<p>这里我们用 <code>typealias</code> 关键字，为 <code>CIImage -&gt; CIImage</code>类型定义了我们自己的名字，这个类型是一个函数，它的参数是一个 <code>CIImage</code> ，返回值也是 <code>CIImage</code> 。这是我们后面开发需要的基础类型。</p>

<p>如果你不太熟悉函数式编程，你可能对于把一个函数类型命名为 <code>Filter</code> 感觉有点奇怪，通常来说，我们会用这样的命名来定义一个类。如果我们很想以某种方式来表现这个类型的函数式的特性，我们可以把它命名成 <code>FilterFunction</code> 或者一些其他的类似的名字。但是，我们有意识的选择了 <code>Filter</code> 这个名字，因为在函数式编程的核心哲学里，函数就是值，函数和结构体、整数、多元组、或者类，并没有任何区别。一开始我也不是很适应，不过一段时间之后发现，这样做确实很有意义。</p>

<h2>构建滤镜</h2>

<p>现在我们已经定义了 <code>Filter</code> 类型，接下来可以定义函数来构建特定的滤镜了。这些函数需要参数来设置特定的滤镜，并且返回一个类型为 <code>Filter</code> 的值。这些函数大概是这个样子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">myFilter</span><span class="p">(</span><span class="cm">/* parameters */</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意返回的值 <code>Filter</code> 本身就是一个函数，在后面有利于我们将多个滤镜组合起来，以达到理想的处理效果。</p>

<p>为了让后面的开发更轻松一点，我们扩展了 <code>CIFilter</code> 类，添加了一个 convenience 的初始化方法，以及一个用来获取输出图像的计算属性：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">typealias</span> <span class="n">Parameters</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">AnyObject</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">extension</span> <span class="n">CIFilter</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="nl">name:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">Parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name:</span> <span class="n">name</span><span class="p">)</span>
</span><span class="line">        <span class="n">setDefaults</span><span class="p">()</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="k">in</span> <span class="n">parameters</span> <span class="p">{</span>
</span><span class="line">            <span class="n">setValue</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nl">forKey:</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">var</span> <span class="nl">outputImage:</span> <span class="n">CIImage</span> <span class="p">{</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">valueForKey</span><span class="p">(</span><span class="n">kCIOutputImageKey</span><span class="p">)</span> <span class="n">as</span> <span class="n">CIImage</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个 convenience 初始化方法有两个参数，第一个参数是滤镜的名字，第二个参数是一个字典。字典中的键值对将会被设置成新滤镜的参数。我们 convenience 初始化方法先调用了指定的初始化方法，这符合 Swift 的开发规范。</p>

<p>计算属性 <code>outputImage</code> 可以方便地从滤镜对象中获取到输出的图像。它查找 <code>kCIOutputImageKey</code> 对应的值并且将其转换成一个 <code>CIImage</code> 对象。通过提供这个属性， API 的用户不再需要对返回的结果手动进行类型转换了。</p>

<h2>模糊</h2>

<p>有了这些东西，现在我们就可以定义属于自己的简单滤镜了。高斯模糊滤镜只需要一个模糊半径作为参数，我们可以非常容易的完成一个模糊滤镜：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">blur</span><span class="p">(</span><span class="nl">radius:</span> <span class="n">Double</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">image</span> <span class="k">in</span>
</span><span class="line">        <span class="n">let</span> <span class="n">parameters</span> <span class="o">:</span> <span class="n">Parameters</span> <span class="o">=</span> <span class="p">[</span><span class="nl">kCIInputRadiusKey:</span> <span class="n">radius</span><span class="p">,</span> <span class="nl">kCIInputImageKey:</span> <span class="n">image</span><span class="p">]</span>
</span><span class="line">        <span class="n">let</span> <span class="n">filter</span> <span class="o">=</span> <span class="n">CIFilter</span><span class="p">(</span><span class="nl">name:</span><span class="s">&quot;CIGaussianBlur&quot;</span><span class="p">,</span> <span class="nl">parameters:</span><span class="n">parameters</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">filter</span><span class="p">.</span><span class="n">outputImage</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就是这么简单，这个模糊函数返回了一个函数，新的函数的参数是一个类型为 <code>CIImage</code> 的图片，返回值 (<code>filter.outputImage</code>) 是一个新的图片 。这个模糊函数的格式是 <code>CIImage -&gt; CIImage</code> ，满足我们前面定义的 <code>Filter</code> 类型的格式。</p>

<p>这个例子只是对 <code>Core Image</code> 中已有滤镜的一个简单的封装，我们可以多次重复同样的模式，创建属于我们自己的滤镜函数。</p>

<h2>颜色蒙版</h2>

<p>现在让我们定义一个颜色滤镜，可以在现有的图片上面加上一层颜色蒙版。 <code>Core Image</code> 默认没有提供这个滤镜，不过我们可以通过已有的滤镜组装一个。</p>

<p>我们使用两个模块来完成这个工作，一个是颜色生成滤镜 (<code>CIConstantColorGenerator</code>)，另一个是资源合成滤镜 (<code>CISourceOverCompositing</code>)。让我们先定义一个生成一个常量颜色面板的滤镜：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">colorGenerator</span><span class="p">(</span><span class="nl">color:</span> <span class="n">UIColor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
</span><span class="line">        <span class="n">let</span> <span class="n">filter</span> <span class="o">=</span> <span class="n">CIFilter</span><span class="p">(</span><span class="nl">name:</span><span class="s">&quot;CIConstantColorGenerator&quot;</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="p">[</span><span class="nl">kCIInputColorKey:</span> <span class="n">color</span><span class="p">])</span>
</span><span class="line">        <span class="k">return</span> <span class="n">filter</span><span class="p">.</span><span class="n">outputImage</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码看起来和前面的模糊滤镜差不多，不过有一个较为明显的差异：颜色生成滤镜不会检测输入的图片。所以在函数里我们不需要给传入的图片参数命名，我们使用了一个匿名参数 <code>_</code> 来强调这个 filter 的图片参数是被忽略的。</p>

<p>接下来，我们来定义合成滤镜：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">compositeSourceOver</span><span class="p">(</span><span class="nl">overlay:</span> <span class="n">CIImage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">image</span> <span class="k">in</span>
</span><span class="line">        <span class="n">let</span> <span class="n">parameters</span> <span class="o">:</span> <span class="n">Parameters</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">            <span class="nl">kCIInputBackgroundImageKey:</span> <span class="n">image</span><span class="p">,</span>
</span><span class="line">            <span class="nl">kCIInputImageKey:</span> <span class="n">overlay</span>
</span><span class="line">        <span class="p">]</span>
</span><span class="line">        <span class="n">let</span> <span class="n">filter</span> <span class="o">=</span> <span class="n">CIFilter</span><span class="p">(</span><span class="nl">name:</span><span class="s">&quot;CISourceOverCompositing&quot;</span><span class="p">,</span> <span class="nl">parameters:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">filter</span><span class="p">.</span><span class="n">outputImage</span><span class="p">.</span><span class="n">imageByCroppingToRect</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">extent</span><span class="p">())</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这里我们将输出图像裁剪到和输入大小一样。这并不是严格需要的，要取决于我们想让滤镜如何工作。不过，在后面我们的例子中我们可以看出来这是一个明智之举。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="nl">color:</span> <span class="n">UIColor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">image</span> <span class="k">in</span>
</span><span class="line">        <span class="n">let</span> <span class="n">overlay</span> <span class="o">=</span> <span class="n">colorGenerator</span><span class="p">(</span><span class="n">color</span><span class="p">)(</span><span class="n">image</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">compositeSourceOver</span><span class="p">(</span><span class="n">overlay</span><span class="p">)(</span><span class="n">image</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们再一次返回了一个参数为图片的函数，<code>colorOverlay</code> 在一开始先调用了 <code>colorGenerator</code> 滤镜。<code>colorGenerator</code> 滤镜需要一个颜色作为参数，并且返回一个滤镜。因此 <code>colorGenerator(color)</code> 是 <code>Filter</code> 类型的。但是 <code>Filter</code> 类型本身是一个 <code>CIImage</code> 向 <code>CIImage</code> 转换的函数，我们可以在 <code>colorGenerator(color)</code> 后面加上一个类型为 <code>CIImage</code> 的参数，这样可以得到一个类型为 <code>CIImage</code> 的蒙版图片。这就是在定义 <code>overlay</code> 的时候发生的事情：我们用 <code>colorGenerator</code> 函数创建了一个滤镜，然后把图片作为一个参数传给了这个滤镜，从而得到了一张新的图片。返回值 <code>compositeSourceOver(overlay)(image)</code> 和这个基本相似，它由一个滤镜 <code>compositeSourceOver(overlay)</code> 和一个图片参数 <code>image</code> 组成。</p>

<h2>组合滤镜</h2>

<p>现在我们已经定义了一个模糊滤镜和一个颜色滤镜，我们在使用的时候可以把它们组合在一起：我们先将图片做模糊处理，然后再在上面放一个红色的蒙层。让我们先加载一张图片：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">NSURL</span><span class="p">(</span><span class="nl">string:</span> <span class="s">&quot;http://tinyurl.com/m74sldb&quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">let</span> <span class="n">image</span> <span class="o">=</span> <span class="n">CIImage</span><span class="p">(</span><span class="nl">contentsOfURL:</span> <span class="n">url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们可以把滤镜组合起来，同时应用到一张图片上：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">blurRadius</span> <span class="o">=</span> <span class="mf">5.0</span>
</span><span class="line"><span class="n">let</span> <span class="n">overlayColor</span> <span class="o">=</span> <span class="n">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">().</span><span class="n">colorWithAlphaComponent</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>
</span><span class="line"><span class="n">let</span> <span class="n">blurredImage</span> <span class="o">=</span> <span class="n">blur</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">)(</span><span class="n">image</span><span class="p">)</span>
</span><span class="line"><span class="n">let</span> <span class="n">overlaidImage</span> <span class="o">=</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="n">overlayColor</span><span class="p">)(</span><span class="n">blurredImage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们又一次的通过滤镜组装了图片。比如在倒数第二行，我们先得到了模糊滤镜 <code>blur(blurRadius)</code> ，然后再把这个滤镜应用到图片上。</p>

<h2>函数组装</h2>

<p>不过，我们可以做的比上面的更好。我们可以简单的把两行滤镜的调用组合在一起变成一行，这是我脑海中想到的第一个能改进的地方：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="n">overlayColor</span><span class="p">)(</span><span class="n">blur</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">)(</span><span class="n">image</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不过，这些圆括号让这行代码完全不具有可读性，更好的方式是定义一个函数来完成这项任务：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="n">composeFilters</span><span class="p">(</span><span class="nl">filter1:</span> <span class="n">Filter</span><span class="p">,</span> <span class="nl">filter2:</span> <span class="n">Filter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">img</span> <span class="k">in</span> <span class="n">filter2</span><span class="p">(</span><span class="n">filter1</span><span class="p">(</span><span class="n">img</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>composeFilters</code> 函数的两个参数都是 Filter ，并且返回了一个新的 Filter 滤镜。组装后的滤镜需要一个 <code>CIImage</code> 类型的参数，并且会把这个参数分别传给 <code>filter1</code> 和 <code>filter2</code> 。现在我们可以用 <code>composeFilters</code> 来定义我们自己的组合滤镜：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="n">composeFilters</span><span class="p">(</span><span class="n">blur</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">),</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="n">overlayColor</span><span class="p">))</span>
</span><span class="line"><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">myFilter</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们还可以更进一步的定义一个滤镜运算符，让代码更具有可读性，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">infix</span> <span class="n">operator</span> <span class="o">&gt;|&gt;</span> <span class="p">{</span> <span class="n">associativity</span> <span class="n">left</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="o">&gt;|&gt;</span> <span class="p">(</span><span class="nl">filter1:</span> <span class="n">Filter</span><span class="p">,</span> <span class="nl">filter2:</span> <span class="n">Filter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">img</span> <span class="k">in</span> <span class="n">filter2</span><span class="p">(</span><span class="n">filter1</span><span class="p">(</span><span class="n">img</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运算符通过 <code>infix</code> 关键字定义，表明运算符具有 <code>左</code> 和 <code>右</code> 两个参数。<code>associativity left</code> 表明这个运算满足左结合律，即：f1 &gt;|&gt; f2 &gt;|&gt; f3 等价于 (f1 &gt;|&gt; f2) &gt;|&gt; f3。通过使这个运算满足左结合律，再加上运算内先应用了左侧的滤镜，所以在使用的时候滤镜顺序是从左往右的，就像 Unix 管道一样。</p>

<p>剩余的部分是一个函数，内容和 <code>composeFilters</code> 基本相同，只不过函数名变成了 <code>&gt;|&gt;</code>。</p>

<p>接下来我们把这个组合滤镜运算器应用到前面的例子中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">let</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="n">blur</span><span class="p">(</span><span class="n">blurRadius</span><span class="p">)</span> <span class="o">&gt;|&gt;</span> <span class="n">colorOverlay</span><span class="p">(</span><span class="n">overlayColor</span><span class="p">)</span>
</span><span class="line"><span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">myFilter</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运算符让代码变得更易于阅读和理解滤镜使用的顺序，调用滤镜的时候也更加的方便。就好比是 <code>1 + 2 + 3 + 4</code> 要比 <code>add(add(add(1, 2), 3), 4)</code> 更加清晰，更加容易理解。</p>

<h2>自定义运算符</h2>

<p>很多 Objective-C 的开发者对于自定义运算符持有怀疑态度。在 Swift 刚发布的时候，这是一个并没有很受欢迎的特性。很多人在 C++ 中遭遇过自定义运算符过度使用 (甚至滥用) 的情况，有些是个人经历过的，有些是听到别人谈起的。</p>

<p>你可能对于前面定义的运算符 <code>&gt;|&gt;</code> 持有同样的怀疑态度，毕竟如果每个人都定义自己的运算符，那代码岂不是很难理解了？值得庆幸的是在函数式编程里有很多的操作，为这些操作定义一个运算符并不是一件很罕见的事情。</p>

<p>我们定义的滤镜组合运算符是一个<a href="http://en.wikipedia.org/wiki/Function_composition_%28computer_science%29">函数组合</a>的例子，这是一个在函数式编程中广泛使用的概念。在数学里，两个函数 <code>f</code> 和 <code>g</code> 的组合有时候写做 <code>f ∘ g</code>，这样定义了一种全新的函数，将输入的 <code>x</code> 映射到 <code>f(g(x))</code> 上。这恰好就是我们的 <code>&gt;|&gt;</code> 所做的工作 (除了函数的逆向调用)。 </p>

<h2>泛型</h2>

<p>仔细想想，其实我们并没有必要去定义一个用来专门组装滤镜的运算符，我们可以用一个泛型的运算符来组装函数。目前我们的 <code>&gt;|&gt;</code> 是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="o">&gt;|&gt;</span> <span class="p">(</span><span class="nl">filter1:</span> <span class="n">Filter</span><span class="p">,</span> <span class="nl">filter2:</span> <span class="n">Filter</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Filter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样定义之后，我们传入的参数只能是 <code>Filter</code> 类型的滤镜。</p>

<p>但是，我们可以利用 Swift 的通用特性来定义一个泛型的函数组合运算符：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="o">&gt;|&gt;</span> <span class="o">&lt;</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">lhs:</span> <span class="n">A</span> <span class="o">-&gt;</span> <span class="n">B</span><span class="p">,</span> <span class="nl">rhs:</span> <span class="n">B</span> <span class="o">-&gt;</span> <span class="n">C</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">A</span> <span class="o">-&gt;</span> <span class="n">C</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span> <span class="n">x</span> <span class="k">in</span> <span class="n">rhs</span><span class="p">(</span><span class="n">lhs</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个一开始可能很难理解 &#8211; 至少对我来说是这样。但是分开的看了各个部分之后，一切都变得清晰起来。</p>

<p>首先，我们来看一下函数名后面的尖括号。尖括号定义了这个函数适用的泛型类型。在这个例子里我们定义了三个类型：A、B 和 C。因为我们并没有指定这些类型，所以它们可以代表任何东西。</p>

<p>接下来让我们来看看函数的参数：第一个参数：lhs (left-hand side 的缩写)，是一个类型为 A -&gt; B 的函数。这代表一个函数的参数为 A，返回值的类型为 B。第二个参数：rhs (right-hand side 的缩写)，是一个类型为 B -&gt; C 的函数。参数命名为 lhs 和 rhs，因为它们分别对应操作符左边和右边的值。</p>

<p>重写了没有 <code>Filter</code> 的滤镜组合运算符之后，我们很快就发现其实前面实现的组合运算符只是泛型函数中的一个特殊情况：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">func</span> <span class="o">&gt;|&gt;</span> <span class="p">(</span><span class="nl">filter1:</span> <span class="n">CIImage</span> <span class="o">-&gt;</span> <span class="n">CIImage</span><span class="p">,</span> <span class="nl">filter2:</span> <span class="n">CIImage</span> <span class="o">-&gt;</span> <span class="n">CIImage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CIImage</span> <span class="o">-&gt;</span> <span class="n">CIImage</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>把我们脑海中的泛型类型 A、B、C 都换成 <code>CIImage</code>，这样可以清晰的理解用通用运算符的来替换滤镜组合运算符是多么的有用。</p>

<h2>结论</h2>

<p>至此，我们成功的用函数式 API 封装了 <code>Core Image</code>。希望这个例子能够很好的说明，对于 Objective-C 的开发者来说，在我们所熟知的 API 的设计模式之外有一片完全不同的世界。有了 Swift，我们现在可以动手探索那些全新的领域，并且将它们充分地利用起来。</p>

<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS绘图详细解析]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/08/04/ioshui-tu-xiang-xi-jie-xi/"/>
    <updated>2014-08-04T15:05:26+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/08/04/ioshui-tu-xiang-xi-jie-xi</id>
    <content type="html"><![CDATA[<div id="cnblogs_post_body"><p><span style="font-family: 'comic sans ms', sans-serif;">　　本文是《<a href="http://www.amazon.com/Programming-iOS-Fundamentals-iPhone-Development/dp/1449319343/ref=sr_1_3?ie=UTF8&amp;qid=1357784362&amp;sr=8-3&amp;keywords=ios" target="_blank">Programming iOS5</a>》中Drawing一章的翻译，考虑到主题完整性，翻译版本中加入了一些书中未涉及到的内容。希望本文能够对你有所帮助。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp; Core Graphics Framework是一套基于C的API框架，使用了Quartz作为绘图引擎。它提供了低级别、轻量级、高保真度的2D渲染。该框架可以用于基于路径的绘图、变换、颜色管理、脱屏渲染，模板、渐变、遮蔽、图像数据管理、图像的创建、遮罩以及PDF文档的创建、显示和分析。为了从感官上对这些概念做一个入门的认识，你可以运行一下官方的<a href="http://developer.apple.com/library/ios/samplecode/QuartzDemo/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007531">example code</a>。<span><br />
</span></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp;iOS支持两套图形API族：Core Graphics/QuartZ 2D 和OpenGL ES。OpenGL ES是跨平台的图形API，属于OpenGL的一个简化版本。QuartZ 2D是苹果公司开发的一套API，它是Core Graphics Framework的一部分。需要注意的是：OpenGL ES是应用程序编程接口，该接口描述了方法、结构、函数应具有的行为以及应该如何被使用的语义。也就是说它只定义了一套规范，具体的实现由设备制造商根据规范去做。而往往很多人对接口和实现存在误解。举一个不恰当的比喻：上发条的时钟和装电池的时钟都有相同的可视行为，但两者的内部<strong>实现</strong>截然不同。因为制造商可以自由的实现Open GL ES，所以不同系统实现的OpenGL ES也存在着巨大的性能差异。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp; &nbsp;Core Graphics API所有的操作都在上下文中进行。所以在绘图之前需要获取该上下文并传入执行渲染的函数内。如果你正在渲染一副在内存中的图片，此时就需要传入图片所属的上下文。获得一个图形上下文是我们完成绘图任务的第一步，你可以将图形上下文理解为一块画布。如果你没有得到这块画布，那么你就无法完成任何绘图操作。有许多方式获得一个图形上下文，这里我介绍两种最为常用的获取方法。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　第一种方法就是创建一个图片类型的上下文。调用<strong>UIGraphicsBeginImageContextWithOptions</strong>函数就可获得用来处理图片的图形上下文。利用该上下文，你就可以在其上进行绘图，并生成图片。调用<strong>UIGraphicsGetImageFromCurrentImageContext</strong>函数可从当前上下文中获取一个UIImage对象。记住在你所有的绘图操作后别忘了调用<strong>UIGraphicsEndImageContext</strong>函数关闭图形上下文。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　第二种方法是利用cocoa为你生成的图形上下文。当你子类化了一个UIView并实现了自己的<strong>drawRect：</strong>方法后，一旦<strong>drawRect</strong>：方法被调用，Cocoa就会为你创建一个图形上下文，此时你对图形上下文的所有绘图操作都会显示在UIView上。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　判断一个上下文是否为当前图形上下文需要注意的几点：</span></p>
<ul>
     <li><span style="font-family: 'comic sans ms', sans-serif;"><strong>UIGraphicsBeginImageContextWithOptions</strong>函数不仅仅是创建了一个适用于图形操作的上下文，并且该上下文也属于当前上下文。</span></li>
     <li><span style="font-family: 'comic sans ms', sans-serif;">当<strong>drawRect</strong>方法被调用时，UIView的绘图上下文属于当前图形上下文。</span></li>
     <li><span style="font-family: 'comic sans ms', sans-serif;">回调方法所持有的context：参数并不会让任何上下文成为当前图形上下文。此参数仅仅是对一个图形上下文的引用罢了。</span></li>
</ul>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　作为初学者，很容易被UIKit和Core Graphics两个支持绘图的框架迷惑。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　UIKit</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　像UIImage、NSString（绘制文本）、UIBezierPath（绘制形状）、UIColor都知道如何绘制自己。这些类提供了功能有限但使用方便的方法来让我们完成绘图任务。一般情况下，UIKit就是我们所需要的。</span></p>
<p>使用UiKit，<span style="color: #ff0000;">你只能在当前上下文中绘图</span>，所以如果你当前处于</p>
<p><strong>UIGraphicsBeginImageContextWithOptions</strong>函数或<strong>drawRect</strong>：方法中，你就可以直接使用UIKit提供的方法进行绘图。如果你持有一个context：参数，那么使用UIKit提供的方法之前，必须将该上下文参数转化为当前上下文。幸运的是，调用<strong>UIGraphicsPushContext</strong> 函数可以方便的将context：参数转化为当前上下文，记住最后别忘了调用<strong>UIGraphicsPopContext函数</strong>恢复上下文环境。</p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　Core Graphics</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　这是一个绘图专用的API族，它经常被称为QuartZ或QuartZ 2D。Core Graphics是iOS上所有绘图功能的基石，包括UIKit。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　使用Core Graphics之前需要指定一个用于绘图的图形上下文（CGContextRef），这个图形上下文会在每个绘图函数中都会被用到。如果你持有一个图形上下文context：参数，那么你等同于有了一个图形上下文，这个上下文也许就是你需要用来绘图的那个。如果你当前处于<strong>UIGraphicsBeginImageContextWithOptions函数</strong>或<strong>drawRect：</strong>方法中，并没有引用一个上下文。为了使用Core Graphics，你可以调用<strong>UIGraphicsGetCurrentContext</strong>函数获得当前的图形上下文。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　至此，我们有了两大绘图框架的支持以及三种获得图形上下文的方法（<strong>drawRect:</strong><strong>、drawRect: inContext:、</strong><strong>UIGraphicsBeginImageContextWithOptions</strong><strong>）</strong>。那么我们就有6种绘图的形式。如果你有些困惑了，不用怕，我接下来将说明这6种情况。无需担心还没有具体的绘图命令，你只需关注上下文如何被创建以及我们是在使用UIKit还是Core Graphics。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　第一种绘图形式：在UIView的子类方法drawRect：中绘制一个蓝色圆，使用<strong>UIKit</strong>在Cocoa为我们提供的当前上下文中完成绘图任务。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">drawRect:</span> <span class="p">(</span><span class="n">CGRect</span><span class="p">)</span> <span class="n">rect</span> <span class="p">{</span>
</span><span class="line">	<span class="n">UIBezierPath</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="nl">UIBezierPathbezierPathWithOvalInRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)];</span>
</span><span class="line">	<span class="p">[[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class="line">	<span class="p">[</span><span class="n">p</span> <span class="n">fill</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more-->
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;　 &nbsp;第二种绘图形式：使用Core Graphics实现绘制蓝色圆。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">drawRect:</span> <span class="p">(</span><span class="n">CGRect</span><span class="p">)</span> <span class="n">rect</span> <span class="p">{</span>
</span><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextAddEllipseInRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp; &nbsp;第三种绘图形式：我将在UIView子类的<strong>drawLayer:inContext</strong><strong>：</strong>方法中实现绘图任务。<strong>drawLayer:inContext</strong><strong>：</strong>方法是一个绘制图层内容的代理方法。为了能够调用<strong>drawLayer:inContext</strong><strong>：</strong>方法，我们需要设定图层的代理对象。但要注意，不应该将UIView对象设置为显示层的委托对象，这是因为UIView对象已经是隐式层的代理对象，再将它设置为另一个层的委托对象就会出问题。轻量级的做法是：编写负责绘图形的代理类。在MyView.h文件中声明如下代码：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">MyLayerDelegate</span> : <span class="nc">NSObject</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp; &nbsp; 然后MyView.m文件中实现接口代码：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">MyLayerDelegate</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawLayer:</span><span class="p">(</span><span class="n">CALayer</span><span class="o">*</span><span class="p">)</span><span class="nv">layer</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">ctx</span> <span class="p">{</span>
</span><span class="line">  <span class="n">UIGraphicsPushContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class="line">  <span class="n">UIBezierPath</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)];</span>
</span><span class="line">  <span class="p">[[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class="line">  <span class="p">[</span><span class="n">p</span> <span class="n">fill</span><span class="p">];</span>
</span><span class="line">  <span class="n">UIGraphicsPopContext</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">直接将代理类的实现代码放在MyView.m文件的#import代码的下面，这样感觉好像在使用私有类完成绘图任务（虽然这不是私有类）。需要注意的是，我们所引用的上下文并不是当前上下文，所以为了能够使用UIKit，我们需要将引用的上下文转变成当前上下文。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">因为图层的代理是assign内存管理策略，那么这里就不能以局部变量的形式创建MyLayerDelegate实例对象赋值给图层代理。这里选择在MyView.m中增加一个实例变量，因为实例变量默认是strong:</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">MyView</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line"><span class="n">MyLayerDelegate</span><span class="o">*</span> <span class="n">_layerDeleagete</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;"><span style="line-height: 18px;">&nbsp; &nbsp; 使用该图层代理：</span></span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">MyView</span> <span class="o">*</span><span class="n">myView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">480</span><span class="p">)];</span>
</span><span class="line"><span class="n">CALayer</span> <span class="o">*</span><span class="n">myLayer</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class="line"><span class="n">_layerDelegate</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyLayerDelegate</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="n">myLayer</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">_layerDelegate</span><span class="p">;</span>
</span><span class="line"><span class="p">[</span><span class="n">myView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">myLayer</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">myView</span> <span class="n">setNeedsDisplay</span><span class="p">];</span> <span class="c1">// 调用此方法，drawLayer: inContext:方法才会被调用。</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　第四种绘图形式： 使用Core Graphics在<strong>drawLayer:inContext</strong><strong>：</strong>方法中实现同样操作，代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawLayer:</span><span class="p">(</span><span class="n">CALayer</span><span class="o">*</span><span class="p">)</span><span class="nv">lay</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span><span class="nv">con</span> <span class="p">{</span>
</span><span class="line">	<span class="n">CGContextAddEllipseInRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">));</span>
</span><span class="line">	<span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　最后，演示<strong>UIGraphicsBeginImageContextWithOptions</strong>的用法，并从上下文中生成一个UIImage对象。生成UIImage对象的代码可以在任何地方被使用，它没有上述绘图方法那样的限制。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　第五种绘图形式： 使用UIKit实现：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">UIBezierPath</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithOvalInRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)];</span>
</span><span class="line"><span class="p">[[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]</span> <span class="n">setFill</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="n">fill</span><span class="p">];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　解释一下<strong>UIGraphicsBeginImageContextWithOptions</strong>函数参数的含义：第一个参数表示所要创建的图片的尺寸；第二个参数用来指定所生成图片的背景是否为不透明，如上我们使用YES而不是NO，则我们得到的图片背景将会是黑色，显然这不是我想要的；第三个参数指定生成图片的缩放因子，这个缩放因子与UIImage的scale属性所指的含义是一致的。传入0则表示让图片的缩放因子根据屏幕的分辨率而变化，所以我们得到的图片不管是在单分辨率还是视网膜屏上看起来都会很好。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　 第六种绘图形式： 使用Core Graphics实现：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextAddEllipseInRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　UIKit和Core Graphics可以在相同的图形上下文中混合使用。在iOS 4.0之前，使用UIKit和UIGraphicsGetCurrentContext被认为是线程不安全的。而在iOS4.0以后苹果让绘图操作在第二个线程中执行解决了此问题。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　UIImage</strong><strong>常用的绘图操作</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　一个UIImage对象提供了向当前上下文绘制自身的方法。我们现在已经知道如何获取一个图片类型的上下文并将它转变成当前上下文。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif; line-height: 1.5;">　　<strong>平移操作</strong>：下面的代码展示了如何将UIImage绘制在当前的上下文中。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">[</span><span class="n">mars</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">mars</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIImageView</span><span class="o">*</span> <span class="n">iv</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">im</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span> <span class="n">iv</span><span class="p">];</span>
</span><span class="line"><span class="n">iv</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201212/23211637-5f8e8f19af4b47d49e43fe82084ff701.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图1 UIImage平移处理</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　<strong>缩放操作：</strong>下面代码展示了如何对UIImage进行缩放操作：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="mi">2</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">[</span><span class="n">mars</span> <span class="nl">drawInRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="mi">2</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">mars</span> <span class="nl">drawInRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="nl">blendMode:</span><span class="n">kCGBlendModeMultiply</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201212/23211917-efbb4cc54ca745a0b21539875527e763.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图2 UIImage缩放处理</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　UIImage没有提供截取图片指定区域的功能。但通过创建一个较小的图形上下文并移动图片到一个适当的图形上下文坐标系内，指定区域内的图片就会被获取。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　<strong>裁剪操作：</strong>下面代码展示了如何获取图片的右半边：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">[</span><span class="n">mars</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="o">-</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　以上的代码首先创建一个一半图片宽度的图形上下文，然后将图片左上角原点移动到与图形上下文负X坐标对齐，从而让图片只有右半部分与图形上下文相交。</span></p>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201212/24135912-e57ea08be2db4656b406d5657f1c7357.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图3 UIImage裁剪原理</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGImage常用的绘图操作</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　UIImage的Core Graphics版本是CGImage（具体类型是CGImageRef）。两者可以直接相互转化: 使用UIImage的CGImage属性可以访问Quartz图片数据；将CGImage作为UIImage方法<strong>imageWithCGImage:</strong>或<strong>initWithCGImage:</strong>的参数创建UIImage对象。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　一个CGImage对象可以让你获取原始图片中指定区域的图片（也可以获取指定区域外的图片，UIImage却办不到）。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　下面的代码展示了将图片拆分成两半，并分别绘制在上下文的左右两边：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="c1">// 抽取图片的左右半边</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsLeft</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">([</span><span class="n">mars</span> <span class="n">CGImage</span><span class="p">],</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsRight</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">([</span><span class="n">mars</span> <span class="n">CGImage</span><span class="p">],</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="c1">// 将每一个CGImage绘制到图形上下文中</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">marsLeft</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">marsRight</span><span class="p">);</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line"><span class="c1">// 记得释放内存，ARC在这里无效</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsLeft</span><span class="p">);</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsRight</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　你也许发现绘出的图是上下颠倒的！图片的颠倒并不是因为被旋转了。当你创建了一个CGImage并使用<strong>CGContextDrawImage</strong>方法绘图就会引起这种问题。这主要是因为原始的本地坐标系统（坐标原点在左上角）与目标上下文（坐标原点在左下角）不匹配。有很多方法可以修复这个问题，其中一种方法就是使用<strong>CGContextDrawImage</strong>方法先将CGImage绘制到UIImage上，然后获取UIImage对应的CGImage，此时就得到了一个倒转的CGImage。当再调用<strong>CGContextDrawImage</strong>方法，我们就将倒转的图片还原回来了。实现代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGImageRef</span> <span class="nf">flip</span> <span class="p">(</span><span class="n">CGImageRef</span> <span class="n">im</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">im</span><span class="p">),</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">im</span><span class="p">));</span>
</span><span class="line">	<span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">sz</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">UIGraphicsGetCurrentContext</span><span class="p">(),</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">im</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGImageRef</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class="line">	<span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line">	<span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　现在将之前的代码修改如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">flip</span><span class="p">(</span><span class="n">marsLeft</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">flip</span><span class="p">(</span><span class="n">marsRight</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　然而，这里又出现了另外一个问题：在双分辨率的设备上，如果我们的图片文件是高分辨率（@2x）版本，上面的绘图就是错误的。原因在于对于UIImage来说，在加载原始图片时使用<strong>imageNamed:</strong>方法，它会自动根据所在设备的分辨率类型选择图片，并且UIImage通过设置用来适配的<strong>scale</strong>属性补偿图片的两倍尺寸。但是一个CGImage对象并没有<strong>scale</strong>属性，它不知道图片文件的尺寸是否为两倍！所以当调用UIImage的<strong>CGImage</strong>方法，你不能假定所获得的CGImage尺寸与原始UIImage是一样的。在单分辨率和双分辨率下，一个UIImage对象的<strong>size</strong>属性值都是一样的，但是双分辨率UIImage对应的CGImage是单分辨率UIImage对应的CGImage的两倍大。所以我们需要修改上面的代码，让其在单双分辨率下都可以工作。代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="c1">// 转换CGImage并使用对应的CGImage尺寸截取图片的左右部分</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsCG</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">szCG</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">marsCG</span><span class="p">),</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">marsCG</span><span class="p">));</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsLeft</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">marsCG</span><span class="p">,</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsRight</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">marsCG</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="c1">//剩下的和之前的代码一样，修复倒置问题</span>
</span><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span><span class="n">flip</span><span class="p">(</span><span class="n">marsLeft</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span><span class="n">flip</span><span class="p">(</span><span class="n">marsRight</span><span class="p">));</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsLeft</span><span class="p">);</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsRight</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　上面的代码初看上去很繁杂，不过不用担心，这里还有另一种修复倒置问题的方案。相对于使用<strong>flip</strong>函数，你可以在绘图之前将CGImage包装进UIImage中，这样做有两大优点：</span></p>
<ul>
     <li><span style="font-family: 'comic sans ms', sans-serif;">当UIImage绘图时它会自动修复倒置问题</span></li>
     <li><span style="font-family: 'comic sans ms', sans-serif;">当你从CGImage转化为Uimage时，可调用imageWithCGImage:scale:orientation:方法生成CGImage作为对缩放性的补偿。</span></li>
</ul>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　所以这是一个解决倒置和缩放问题的自包含方法。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">mars</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">png</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">size</span><span class="p">];</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsCG</span> <span class="o">=</span> <span class="p">[</span><span class="n">mars</span> <span class="n">CGImage</span><span class="p">];</span>
</span><span class="line"><span class="n">CGSize</span> <span class="n">szCG</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">marsCG</span><span class="p">),</span> <span class="n">CGImageGetHeight</span><span class="p">(</span><span class="n">marsCG</span><span class="p">));</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsLeft</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">marsCG</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">marsRight</span> <span class="o">=</span> <span class="n">CGImageCreateWithImageInRect</span><span class="p">(</span><span class="n">marsCG</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span><span class="n">szCG</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"><span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">*</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">[[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">marsLeft</span> <span class="nl">scale:</span><span class="p">[</span><span class="n">mars</span> <span class="n">scale</span><span class="p">]</span> <span class="nl">orientation:</span><span class="n">UIImageOrientationUp</span><span class="p">]</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="p">[[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">marsRight</span> <span class="nl">scale:</span><span class="p">[</span><span class="n">mars</span> <span class="n">scale</span><span class="p">]</span> <span class="nl">orientation:</span><span class="n">UIImageOrientationUp</span><span class="p">]</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsLeft</span><span class="p">);</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">marsRight</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　还有另一种解决倒置问题的方案是在绘制CGImage之前，对上下文应用变换操作，有效地倒置上下文的内部坐标系统。这里先不做讨论。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　<strong>为什么会发生倒置问题</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　究其原因是因为Core Graphics源于Mac OS X系统，在Mac OS X中，坐标原点在左下方并且正y坐标是朝上的，而在iOS中，原点坐标是在左上方并且正y坐标是朝下的。在大多数情况下，这不会出现任何问题，因为图形上下文的坐标系统是会自动调节补偿的。但是创建和绘制一个CGImage对象时就会暴露出倒置问题。&nbsp;</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CIFilter</strong><strong>与</strong><strong>CIImage</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　CIFilter与CIImage是iOS 5新引入的，虽然它们已在MAX OS X系统中存在多年。前缀&#8220;CI&#8221;表示Core Image，这是一种使用数学滤镜变换图片的技术。但是你不要去幻想iOS提供了像Photoshop软件那样强大的滤镜功能。使用Core Image之前你需要将<em>CoreImage.framework</em>框架导入到你的target之中。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　所谓滤镜指的是CIFilter类，滤镜可被分为以下几类：</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　模板与渐变类</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　这两类滤镜创建的CIImage可以和其他的CIImage进行合并，比如一种单色，一个棋盘，条纹，亦或是渐变。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　合成类&nbsp;</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　此类滤镜可以将一张图片与另外的图片合并，合成滤镜模式常见于图形处理软件Photoshop中。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　色彩类</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　此滤镜调整、修改图片的色彩。因此你可以改变一张图片的饱和度、色度、亮度、对比度、伽马、白点、曝光度、阴影、高亮等属性。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　几何变换类</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　此类滤镜可对图片执行基本的几何变换，比如缩放、旋转、裁剪。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;　&nbsp;CIFilter使用起来非常的简单。CIFilter看上去就像一个由键值组成的字典。它生成一个CIImage对象作为其输出。一般地，一个滤镜有一个或多个输入，而对于部分滤镜，生成的图片是基于其他类型的参数值。CIFilter对象是一个集合，可使用键值对进行检索。通过提供滤镜的字符串名称创建一个滤镜，如果想知道有哪些滤镜，可以查询苹果的<a href="https://developer.apple.com/library/mac/#documentation/graphicsimaging/reference/CoreImageFilterReference/Reference/reference.html"><em>Core Image Filter Reference</em></a>文档，或是调用CIFilter的类方法<strong>filterNamesInCategories</strong><strong>：</strong>，参数值为nil。每一个滤镜拥有一小部分用来确定其行为的键值。如果你想修改某一个键（比如亮度键）对应的值，你可以调用<strong>setValue</strong><strong>：</strong><strong>forKey</strong><strong>：</strong>方法或当你指定一个滤镜名时提供所有键值对。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp; &nbsp;需要处理的图片必须是CIImage类型，调用<strong>initWithCGImage</strong><strong>：</strong>方法可获得CIImage。因为CGImage又是作为滤镜的输出，因此滤镜之间可被连接在一起（将滤镜的输出作为<strong>initWithCGImage</strong><strong>：</strong>方法的输入参数）</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp; 当你构建一个滤镜链时，并没有做复杂的运算。只有当整个滤镜链需要输出一个CGImage时，密集型计算才会发生。调用<strong>contextWithOptions</strong><strong>：</strong>和<strong>createCGImage: fromRect:</strong>方法创建CIContext。与以往不同的地方是CIImage没有frame与bounds属性；只有extent属性。你将非常频繁的使用这个属性作为<strong>createCGImage: fromRect:</strong>方法的第二个参数。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp; &nbsp;接下来我将演示Core Image的使用。首先创建一个径向渐变的滤镜，该滤镜是从白到黑的渐变方式，白色区域的半径默认是100。接着将其与一张使用CIDarkenBlendMode滤镜的图片合成。CIDarkenBlendMode的作用是背景图片样本将被源图片的黑色部分替换掉。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">moi</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@”</span><span class="n">Mars</span><span class="p">.</span><span class="n">jpeg</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CIImage</span><span class="o">*</span> <span class="n">moi2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCGImage:</span><span class="n">moi</span><span class="p">.</span><span class="n">CGImage</span><span class="p">];</span>
</span><span class="line"><span class="n">CIFilter</span><span class="o">*</span> <span class="n">grad</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIFilter</span> <span class="nl">filterWithName:</span><span class="err">@”</span><span class="n">CIRadialGradient</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="n">CIVector</span><span class="o">*</span> <span class="n">center</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIVector</span> <span class="nl">vectorWithX:</span><span class="n">moi</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0</span> <span class="nl">Y:</span><span class="n">moi</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">];</span>
</span><span class="line"><span class="c1">// 使用setValue：forKey：方法设置滤镜属性</span>
</span><span class="line"><span class="p">[</span><span class="n">grad</span> <span class="nl">setValue:</span><span class="n">center</span> <span class="nl">forKey:</span><span class="err">@”</span><span class="n">inputCenter</span><span class="err">”</span><span class="p">];</span>
</span><span class="line"><span class="c1">// 在指定滤镜名时提供所有滤镜键值对</span>
</span><span class="line"><span class="n">CIFilter</span><span class="o">*</span> <span class="n">dark</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIFilter</span> <span class="nl">filterWithName:</span><span class="err">@”</span><span class="n">CIDarkenBlendMode</span><span class="err">”</span> <span class="nl">keysAndValues:</span><span class="err">@”</span><span class="n">inputImage</span><span class="err">”</span><span class="p">,</span> <span class="n">grad</span><span class="p">.</span><span class="n">outputImage</span><span class="p">,</span> <span class="err">@”</span><span class="n">inputBackgroundImage</span><span class="err">”</span><span class="p">,</span> <span class="n">moi2</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="n">CIContext</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIContext</span> <span class="nl">contextWithOptions:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="n">CGImageRef</span> <span class="n">moi3</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span> <span class="nl">createCGImage:</span><span class="n">dark</span><span class="p">.</span><span class="n">outputImage</span> <span class="nl">fromRect:</span><span class="n">moi2</span><span class="p">.</span><span class="n">extent</span><span class="p">];</span>
</span><span class="line"><span class="n">UIImage</span><span class="o">*</span> <span class="n">moi4</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">moi3</span> <span class="nl">scale:</span><span class="n">moi</span><span class="p">.</span><span class="n">scale</span> <span class="nl">orientation:</span><span class="n">moi</span><span class="p">.</span><span class="n">imageOrientation</span><span class="p">];</span>
</span><span class="line"><span class="n">CGImageRelease</span><span class="p">(</span><span class="n">moi3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black; display: block; margin-left: auto; margin-right: auto;" src="http://images.cnitblog.com/blog/429321/201212/27103647-2fcd19d1ca1e4a0d9f42e2c79687e881.png" alt="" width="693" height="199" /></span></p>
<p style="text-align: center;">&nbsp;<span style="font-family: 'comic sans ms', sans-serif; text-align: left; line-height: 1.5;">&nbsp;图4 图片合成快照　</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　这个例子可能没有什么吸引人的地方，因为所有一切都可以使用Core Graphics完成。除了Core Image是使用GPU处理，可能有点吸引人。Core Graphics也可以做到径向渐变并使用混合模式合成图片。但Core Image要简单得多，特别是当你有多个图片输入想重用一个滤镜链时。并且Core Image的颜色调整功能比Core Graphics更加强大。对了，Core Image还能实现自动人脸识别哦！</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　绘制一个</strong><strong>UIView</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　绘制一个UIVIew最灵活的方式就是由它自己完成绘制。实际上你不是绘制一个UIView，你只是子类化了UIView并赋予子类绘制自己的能力。当一个UIVIew需要执行绘图操作的时， <strong>drawRect</strong>:方法就会被调用。覆盖此方法让你获得绘图操作的机会。当<strong>drawRect</strong><strong>：</strong>方法被调用，当前图形上下文也被设置为属于视图的图形上下文。你可以使用Core Graphics或UIKit提供的方法将图形画到该上下文中。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　你不应该手动调用<strong>drawRect</strong><strong>：</strong>方法！如果你想调用<strong>drawRect：</strong>方法更新视图，只需发送<strong>setNeedsDisplay</strong>方法。这将使得<strong>drawRect：</strong>方法会在下一个适当的时间调用。当然，不要覆盖<strong>drawRect</strong><strong>：</strong>方法除非你知道这样做绝对合法。比方说，在UIImageView子类中覆盖<strong>drawRect</strong><strong>：</strong>方法是不合法的，你将得不到你绘制的图形。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在UIView子类的<strong>drawRect</strong><strong>：</strong>方法中无需调用super，因为本身UIView的<strong>drawRect</strong><strong>：</strong>方法是空的。为了提高一些绘图性能，你可以调用<strong>setNeedsDisplayInRect</strong>方法重新绘制视图的子区域，而视图的其他部分依然保持不变。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般情况下，你不应该过早的进行优化。绘图代码可能看上去非常的繁琐，但它们是非常快的。并且iOS绘图系统自身也是非常高效，它不会频繁调用<strong>drawRect</strong><strong>：</strong>方法，除非迫不得已（或调用了<strong>setNeedsDisplay</strong>方法）。一旦一个视图已由自己绘制完成，那么绘制的结果会被缓存下来留待重用，而不是每次重头再来。(苹果公司将缓存绘图称为视图的位图存储回填（<em>bitmap backing store</em>）)。你可能会发现<strong>drawRect</strong><strong>：</strong>方法中的代码在整个应用程序生命周期内只被调用了一次！事实上，将代码移到<strong>drawRect</strong><strong>：</strong>方法中是提高性能的普遍做法。这是因为绘图引擎直接对屏幕进行渲染相对于先是脱屏渲染然后再将像素拷贝到屏幕要来的高效。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当视图的<strong>backgroundColor</strong>为nil并且<strong>opaque</strong>属性为YES，视图的背景颜色就会变成黑色。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　Core Graphics</strong><strong>上下文属性设置</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　当你在图形上下文中绘图时，当前图形上下文的相关属性设置将决定绘图的行为与外观。因此，绘图的一般过程是先设定好图形上下文参数，然后绘图。比方说，要画一根红线，接着画一根蓝线。那么首先需要将上下文的线条颜色属性设定为为红色，然后画红线；接着设置上下文的线条颜色属性为蓝色，再画出蓝线。表面上看,红线和蓝线是分开的，但事实上，在你画每一条线时，线条颜色却是整个上下文的属性。无论你用的是UIKit方法还是Core Graphics函数。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　因为图形上下文在每一时刻都有一个确定的状态，该状态概括了图形上下文所有属性的设置。为了便于操作这些状态，图形上下文提供了一个用来持有状态的栈。调用<strong>CGContextSaveGState</strong>函数，上下文会将完整的当前状态压入栈顶；调用<strong>CGContextRestoreGState</strong>函数，上下文查找处在栈顶的状态，并设置当前上下文状态为栈顶状态。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　因此一般绘图模式是：在绘图之前调用<strong>CGContextSaveGState</strong>函数保存当前状态，接着根据需要设置某些上下文状态，然后绘图，最后调用<strong>CGContextRestoreGState</strong>函数将当前状态恢复到绘图之前的状态。要注意的是，<strong>CGContextSaveGState</strong>函数和<strong>CGContextRestoreGState</strong>函数必须成对出现，否则绘图很可能出现意想不到的错误，这里有一个简单的做法避免这种情况。代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class="line">	<span class="n">CGContextRef</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line">	<span class="n">CGContextSaveGState</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="c1">// 绘图代码</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	
</span><span class="line">	<span class="n">CGContextRestoreGState</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="err">　</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　但你不需要在每次修改上下文状态之前都这样做，因为你对某一上下文属性的设置并不一定会和之前的属性设置或其他的属性设置产生冲突。你完全可以在不调用保存和恢复函数的情况下先设置线条颜色为红色，然后再设置为蓝色。但在一定情况下，你希望你对状态的设置是可撤销的，我将在接下来讨论这样的情况。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　许多的属性组成了一个图形上下文状态，这些属性设置决定了在你绘图时图形的外观和行为。下面我列出了一些属性和对应修改属性的函数；虽然这些函数是关于Core Graphics的，但记住，实际上UIKit同样是调用这些函数操纵上下文状态。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　线条的宽度和线条的虚线样式</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetLineWidth</strong>、<strong>CGContextSetLineDash</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　线帽和线条联接点样式</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetLineCap</strong><strong>、</strong><strong>CGContextSetLineJoin</strong><strong>、</strong><strong>CGContextSetMiterLimit</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　线条颜色和线条模式</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>CGContextSetStrokeColorWithColor</strong><strong>、</strong><strong>CGContextSetStrokePattern</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetRGBStrokeColor</strong><strong>、</strong><strong>CGContextSetGrayStrokeColor</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　填充颜色和模式</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong style="line-height: 1.5;">　　CGContextSetRGBFillColor,CGContextSetGrayFillColor</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong style="line-height: 1.5;">　　CGContextSetFillColorWithColor, CGContextSetFillPattern</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　阴影</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetShadow</strong><strong>、</strong><strong>CGContextSetShadowWithColor</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　混合模式</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetBlendMode</strong>（决定你当前绘制的图形与已经存在的图形如何被合成）</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　整体透明度</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetAlpha</strong>（个别颜色也具有alpha成分）</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　文本属性</span></p>
<p><strong>　　CGContextSelectFont</strong><strong>、</strong><strong>CGContextSetFont</strong><strong>、

<p><strong>CGContextSetFontSize</strong><strong>、</strong><strong>CGContextSetTextDrawingMode</strong><strong>、</strong><strong>CGContextSetCharacterSpacing</strong>
</p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　是否开启反锯齿和字体平滑</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　CGContextSetShouldAntialias</strong><strong>、</strong><strong>CGContextSetShouldSmoothFonts</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　另外一些属性设置：</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　裁剪区域:在裁剪区域外绘图不会被实际的画出来。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　变换（或称为&#8220;CTM&#8220;，意为当前变换矩阵):&nbsp;改变你随后指定的绘图命令中的点如何被映射到画布的物理空间。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　许多这些属性设置接下来我都会举例说明。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　路径与绘图</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　通过编写移动虚拟画笔的代码描画一段路径，这样的路径并不构成一个图形。绘制路径意味着对路径描边或填充该路径，也或者两者都做。同样，你应该从某些绘图程序中得到过相似的体会。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　一段路径是由点到点的描画构成。想象一下绘图系统是你手里的一只画笔，你首先必须要设置画笔当前所处的位置，然后给出一系列命令告诉画笔如何描画随后的每段路径。每一段新增的路径开始于当前点，当完成一条路径的描画，路径的终点就变成了当前点。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 下面列出了一些路径描画的命令：</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 定位当前点</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextMoveToPoint</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 描画一条线</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextAddLineToPoint</strong><strong>、</strong><strong>CGContextAddLines</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 描画一个矩形</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextAddRect</strong><strong>、</strong><strong>CGContextAddRects</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 描画一个椭圆或圆形</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextAddEllipseInRect</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 描画一段圆弧</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextAddArcToPoint</strong><strong>、</strong><strong>CGContextAddArc</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 通过一到两个控制点描画一段贝赛尔曲线</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>&nbsp;&nbsp;&nbsp; CGContextAddQuadCurveToPoint</strong><strong>、</strong><strong>CGContextAddCurveToPoint</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 关闭当前路径</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextClosePath</strong> 这将从路径的终点到起点追加一条线。如果你打算填充一段路径，那么就不需要使用该命令，因为该命令会被自动调用。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 描边或填充当前路径</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextStrokePath</strong><strong>、</strong><strong>CGContextFillPath</strong><strong>、</strong><strong>CGContextEOFillPath</strong><strong>、</strong><strong>CGContextDrawPath</strong>。<span style="color: #ff0000;">对当前路径描边或填充会清除掉路径。</span>如果你只想使用一条命令完成描边和填充任务，可以使用<strong>CGContextDrawPath</strong>命令，因为如果你只是使用<strong>CGContextStrokePath</strong>对路径描边，路径就会被清除掉，你就不能再对它进行填充了。</span></p>
<p>创建路径并描边路径或填充路径只需一条命令就可完成的函数：<strong>CGContextStrokeLineSegments</strong><strong>、</strong><strong>CGContextStrokeRect</strong><strong>、</strong><strong>CGContextStrokeRectWithWidth</strong><strong>、
<p><strong>CGContextFillRect</strong><strong>、</strong><strong>CGContextFillRects</strong><strong>、</strong><strong>CGContextStrokeEllipseInRect</strong><strong>、</strong><strong>CGContextFillEllipseInRect</strong></p>

<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 一段路径是被合成的，意思是它是由多条独立的路径组成。举个例子，一条单独的路径可能由两个独立的闭合形状组成：一个矩形和一个圆形。当你在构造一条路径的中间过程（意思是在描画了一条路径后没有调用描边或填充命令，或调用<strong>CGContextBeginPath</strong>函数来清除路径）调用<strong>CGContextMoveToPoint</strong>函数，就像是你拾起画笔，并将画笔移动到一个新的位置，如此来准备开始一段独立的相同路径。如果你担心当你开始描画一条路径的时候，已经存在的路径和新的路径会被认为是已存在路径的一个合成部分，你可以调用<strong>CGContextBeginPath</strong>函数指定你绘制的路径是一条独立的路径；苹果的许多例子都是这样做的，但在实际开发中我发现这是非必要的。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextClearRect</strong>函数的功能是擦除一个区域。这个函数会擦除一个矩形内的所有已存在的绘图；并对该区域执行裁剪。结果像是打了一个贯穿所有已存在绘图的孔。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; <strong>CGContextClearRect</strong>函数的行为依赖于上下文是透明还是不透明。当在图形上下文中绘图时，这会尤为明显和直观。如果图片上下文是透明的（<strong>UIGraphicsBeginImageContextWithOptions</strong>第二个参数为NO），那么<strong>CGContextClearRect</strong>函数执行擦除后的颜色为透明，反之则为黑色。</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 当在一个视图中直接绘图（使用<strong>drawRect：</strong>或<strong>drawLayer：inContext：</strong>方法），如果视图的背景颜色为nil或颜色哪怕有一点点透明度，那么CGContextClearRect的矩形区域将会显示为透明的，打出的孔将穿过视图包括它的背景颜色。如果背景颜色完全不透明，那么<strong>CGContextClearRect</strong>函数的结果将会是黑色。这是因为视图的背景颜色决定了是否视图的图形上下文是透明的还是不透明的。</span></p>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;<img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/04135105-c4e1981ec5e84cbfaba3e2dd641f7411.png" alt="" /></span></p>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;">图5 CGContextClearRect函数的应用</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 如图5，在左边的蓝色正方形被挖去部分留为黑色，然而在右边的蓝色正方形也被挖去部分留为透明。但这两个正方形都是UIView子类的实例，采用相同的绘图代码！不同之处在于视图的背景颜色，左边的正方形的背景颜色在nib文件中</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　但是这却完全改变了CGContextClearRect函数的效果。UIView子类的drawRect：方法看起来像这样：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">rect</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextClearRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">30</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　为了说明典型路径的描画命令，我将生成一个向上的箭头图案，我谨慎避免使用便利函数操作，也许这不是创建箭头最好的方式，但依然清楚的展示了各种典型命令的用法。</span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;<img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/03223022-6cc72c828292475eb6f9915454403b4d.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图6 一个简单的路径绘图</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="c1">// 绘制一个黑色的垂直黑色线，作为箭头的杆子</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">19</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextStrokePath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 绘制一个红色三角形箭头</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 从箭头杆子上裁掉一个三角形，使用清除混合模式</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">101</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">101</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextSetBlendMode</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">kCGBlendModeClear</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　确切的说，为了以防万一，我们应该在绘图代码周围使用<strong>CGContextSaveGState</strong>和<strong>CGContextRestoreGState</strong>函数。可对于这个例子来说，添加与否不会有任何的区别。因为上下文在调用drawRect：方法中不会被持久，所以不会被破坏。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　如果一段路径需要重用或共享，你可以将路径封装为CGPath（具体类型是CGPathRef）。你可以创建一个新的CGMutablePathRef对象并使用多个类似于图形的路径函数的CGPath函数构造路径，或者使用CGContextCopyPath函数复制图形上下文的当前路径。有许多CGPath函数可用于创建基于简单几何形状的路径（<strong>CGPathCreateWithRect、CGPathCreateWithEllipseInRect</strong>）或基于已存在路径（<strong>CGPathCreateCopyByStrokingPath、CGPathCreateCopyDashingPath、CGPathCreateCopyByTransformingPath</strong>）。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　UIKit的UIBezierPath类包装了CGPath。它提供了用于绘制某种形状路径的方法，以及用于描边、填充、存取某些当前上下文状态的设置方法。类似地，UIColor提供了用于设置当前上下文描边与填充的颜色。因此我们可以重写我们之前绘制箭头的代码：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIBezierPath</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">19</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">setLineWidth:</span><span class="mi">20</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">set</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="n">removeAllPoints</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span><span class="mi">25</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">25</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="n">fill</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="n">removeAllPoints</span><span class="p">];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">101</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">110</span><span class="p">,</span> <span class="mi">101</span><span class="p">)];</span>
</span><span class="line"><span class="p">[</span><span class="n">p</span> <span class="nl">fillWithBlendMode:</span><span class="n">kCGBlendModeClear</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　在这种特殊情况下，完成同样的工作并没有节省多少代码，但是UIBezierPath仍然还是有用的。如果你需要对象特性，UIBezierPath提供了一个便利方法：<strong>bezierPathWithRoundedRect</strong><strong>：</strong><strong>cornerRadius</strong><strong>：</strong>，它可用于绘制带有圆角的矩形，如果是使用Core Graphics就相当冗长乏味了。还可以只让圆角出现在左上角和右上角。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class="line">  <span class="n">CGContextRef</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line">  <span class="n">CGContextSetStrokeColorWithColor</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">);</span>
</span><span class="line">  <span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">  <span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">path</span><span class="p">;</span>
</span><span class="line">  <span class="n">path</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRoundedRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="nl">byRoundingCorners:</span><span class="p">(</span><span class="n">UIRectCornerTopLeft</span> <span class="o">|</span><span class="n">UIRectCornerTopRight</span><span class="p">)</span> <span class="nl">cornerRadii:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)];</span>
</span><span class="line">  <span class="p">[</span><span class="n">path</span> <span class="n">stroke</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/10164554-8b950cf0971d44788736463119e4eaf5.png" alt="" /></span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;">图7 左右圆角矩形</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　<strong style="line-height: 1.5;">裁剪</strong></span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　路径的另一用处是遮蔽区域，以防对遮蔽区域进一步绘图。这种用法被称为裁剪。<span style="color: #ff0000;">裁剪区域外</span>的图形不会被绘制到。默认情况下，一个图形上下文的裁剪区域是整个图形上下文。你可在上下文中的任何地方绘图。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　总的来说，裁剪区域是上下文的一个特性。与已存在的裁剪区域相交会出现新的裁剪区域。所以如果你应用了你自己的裁剪区域，稍后将它从图形上下文中移除的做法是使用<strong>CGContextSaveGState</strong>和<strong>CGContextRestoreGState</strong>函数将代码包装起来。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 为了便于说明这一点，我使用裁剪而不是使用混合模式在箭头杆子上打孔的方法重写了生成箭头的代码。这样做有点小复杂，因为我们想要裁剪区域不在三角形内而在三角形外部。为了表明这一点，我们使用了一个三角形和一个矩形组成了一个组合路径。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 当填充一个组合路径并使用它表示一个裁剪区域时，系统遵循以下两规则之一：</span></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">　　环绕规则（Winding rule）</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　如果边界是顺时针绘制，那么在其内部逆时针绘制的边界所包含的内容为空。如果边界是逆时针绘制，那么在其内部顺时针绘制的边界所包含的内容为空。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　奇偶规则</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　最外层的边界代表内部都有效，都要填充；之后向内第二个边界代表它的内部无效，不需填充；如此规则继续向内寻找边界线。我们的情况非常简单，所以使用奇偶规则就很容易了。这里我们使用CGContextEOCllip设置裁剪区域然后进行绘图。（如果不是很明白，可以参见这篇文章：<span style="color: #ff0000;"><a style="line-height: 1.5; font-family: 'comic sans ms', sans-serif;" href="http://disanji.net/2010/12/05/5-ways-to-draw-2d-shape-with-hole-in-html/"><span style="color: #ff0000;">五种方法绘制有孔的2d形状</span></a></span>）</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="c1">// 在上下文裁剪区域中挖一个三角形状的孔</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextClosePath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGContextGetClipBoundingBox</span><span class="p">(</span><span class="n">con</span><span class="p">));</span>
</span><span class="line"><span class="c1">// 使用奇偶规则，裁剪区域为矩形减去三角形区域</span>
</span><span class="line"><span class="n">CGContextEOClip</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 绘制垂线</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">19</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextStrokePath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 画红色箭头</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　渐变</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　</strong>渐变可以很简单也可以很复杂。一个简单的渐变（接下来要讨论的）由一端点的颜色与另一端点的颜色决定，如果在中间点加入颜色（可选），那么渐变会在上下文的两个点之间线性的绘制或在上下文的两个圆之间放射状的绘制。不能使用渐变作为路径的填充色，但可使用裁剪限制对路径形状的渐变。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　我重写了绘制箭头的代码，箭杆使用了线性渐变。效果如图7所示。</span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/07162647-645fc1f5a9d2469b83ef7577f6d1a461.png" alt="" />&nbsp;</span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;">图8 箭头杆子渐变</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextSaveGState</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 在上下文裁剪区域挖一个三角形孔</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextClosePath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGContextGetClipBoundingBox</span><span class="p">(</span><span class="n">con</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextEOClip</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">//绘制一个垂线，让它的轮廓形状成为裁剪区域</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">19</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 使用路径的描边版本替换图形上下文的路径</span>
</span><span class="line"><span class="n">CGContextReplacePathWithStrokedPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 对路径的描边版本实施裁剪</span>
</span><span class="line"><span class="n">CGContextClip</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line"><span class="c1">// 绘制渐变</span>
</span><span class="line"><span class="n">CGFloat</span> <span class="n">locs</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">};</span>
</span><span class="line"><span class="n">CGFloat</span> <span class="n">colors</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line"><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.8</span><span class="p">,</span> <span class="c1">// 开始颜色，透明灰</span>
</span><span class="line"><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">,</span> <span class="c1">// 中间颜色，黑色</span>
</span><span class="line"><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.8</span> <span class="c1">// 末尾颜色，透明灰</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="n">CGColorSpaceRef</span> <span class="n">sp</span> <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceGray</span><span class="p">();</span>
</span><span class="line"><span class="n">CGGradientRef</span> <span class="n">grad</span> <span class="o">=</span> <span class="n">CGGradientCreateWithColorComponents</span> <span class="p">(</span><span class="n">sp</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">locs</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextDrawLinearGradient</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">grad</span><span class="p">,</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">89</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">sp</span><span class="p">);</span>
</span><span class="line"><span class="n">CGGradientRelease</span><span class="p">(</span><span class="n">grad</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextRestoreGState</span><span class="p">(</span><span class="n">con</span><span class="p">);</span> <span class="c1">// 完成裁剪</span>
</span><span class="line"><span class="c1">// 绘制红色箭头</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　调用<strong>CGContextReplacePathWithStrokedPath</strong>函数假装对当前路径描边，并使用当前线段宽度和与线段相关的上下文状态设置。但接着创建的是描边路径外部的一个新的路径。因此，相对于使用粗的线条，我们使用了一个矩形区域作为裁剪区域。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　虽然过程比较冗长但是非常的简单；我们将渐变描述为一组在一端点（0.0）和另一端点（1.0）之间连续区上的位置，以及设置与每个位置相对应的颜色。为了提亮边缘的渐变，加深中间的渐变，我使用了三个位置，黑色点的位置是0.5。为了创建渐变，还需要提供一个颜色空间。最后，我创建出了该渐变，并对裁剪区域绘制线性渐变，最后释放了颜色空间和渐变。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　<strong>颜色与模板</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　</strong>在iOS中，CGColor表示颜色（具体类型为CGColorRef）。使用UIColor的colorWithCGColor：和CGColor方法可bridged cast到UIColor。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　在iOS中，模板表示为CGPattern（具体类型为CGPatternRef）。你可以创建一个模板并使用它进行描边或填充。其过程是相当复杂的。作为一个非常简单的例子，我将使用红蓝相间的三角形替换箭头的三角形部分。现在移除下面行：</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　CGContextSetFillColorWithColor（con， [UIColor redColor].CGColor））；</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　在被移除的地方填入下面代码：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGColorSpaceRef</span> <span class="n">sp2</span> <span class="o">=</span> <span class="n">CGColorSpaceCreatePattern</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextSetFillColorSpace</span> <span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sp2</span><span class="p">);</span>
</span><span class="line"><span class="n">CGColorSpaceRelease</span> <span class="p">(</span><span class="n">sp2</span><span class="p">);</span>
</span><span class="line"><span class="n">CGPatternCallbacks</span> <span class="n">callback</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">drawStripes</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class="line"><span class="n">CGAffineTransform</span> <span class="n">tr</span> <span class="o">=</span> <span class="n">CGAffineTransformIdentity</span><span class="p">;</span>
</span><span class="line"><span class="n">CGPatternRef</span> <span class="n">patt</span> <span class="o">=</span> <span class="n">CGPatternCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">tr</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">kCGPatternTilingConstantSpacingMinimalDistortion</span><span class="p">,</span> <span class="n">true</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">callback</span><span class="p">);</span>
</span><span class="line"><span class="n">CGFloat</span> <span class="n">alph</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class="line"><span class="n">CGContextSetFillPattern</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">patt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">alph</span><span class="p">);</span>
</span><span class="line"><span class="n">CGPatternRelease</span><span class="p">(</span><span class="n">patt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="line-height: 1.5; font-family: 'comic sans ms', sans-serif;">　　代码非常冗长，但它却是一个完整的样板。现在我们从后往前分析代码: 我们调用<strong>CGContextSetFillPattern</strong>不是设置填充颜色，我们设置的是填充的模板。函数的第三个参数是一个指向CGFloat的指针，所以我们事先设置CGFloat自身。第二个参数是一个CGPatternRef对象，所以我们需要事先创建CGPatternRef，并在最后释放它。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　现在开始讨论CGPatternCreate。一个模板是在一个矩形元中的绘图。我们需要矩形元的尺寸（第二个参数）以及矩形元原始点之间的间隙（第四和第五个参数）。这这种情况下，矩形元是4*4的，每一个矩形元与它的周围矩形元是紧密贴合的。我们需要提供一个应用到矩形元的变换参数（第三个参数）；在这种情况下，我们不需要变换做什么工作，所以我们应用了一个恒等变换。我们应用了一个瓷砖规则（第六个参数）。我们需要声明的是颜色模板不是漏印（stencil）模板，所以参数值为true。并且我们需要提供一个指向回调函数的指针，回调函数的工作是向矩形元绘制模板。第八个参数是一个指向CGPatternCallbacks结构体的指针。这个结构体由数字0和两个指向函数的指针构成。第一个函数指针指向的函数当模板被绘制到矩形元中被调用，第二个函数指针指向的函数当模板被释放后调用。第二个函数指针我们没有指定，它的存在主要是为了内存管理的需要。但在这个简单的例子中，我们并不需要。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　在你使用颜色模板调用<strong>CGContextSetFillPattern</strong>函数之前，你需要设置将应用到模板颜色空间的上下文填充颜色空间。如果你忽略这项工作，那么当你调用<strong>CGContextSetFillPattern</strong>函数时会发生错误。所以我们创建了颜色空间，设置它作为上下文的填充颜色空间，并在后面做了释放。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　到这里我们仍然没有完成绘图。因为我还没有编写向矩形元中绘图的函数！绘图函数地址被表示为&amp;drawStripes。绘图代码如下所示：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="kt">void</span> <span class="nf">drawStripes</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">info</span><span class="p">,</span> <span class="n">CGContextRef</span> <span class="n">con</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="c1">// assume 4 x 4 cell</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">));</span>
</span><span class="line"><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/07163055-71996ba36a4f4a44bca579b8d6210dd4.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图9 模板填充&nbsp;</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　如你所见，实际的模板绘图代码是非常简单的。唯一的复杂点在于<strong>CGPatternCreate</strong>函数必须与模板绘图函数的矩形元尺寸相同。我们知道矩形元的尺寸为4*4，所以我们用红色填充它，并接着填充它的下半部分为绿色。当这些矩形元被水平垂直平铺时，我们得到了如图8所示的条纹图案。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　注意，最后图形上下文遗留下了一个不可取的状态，即填充颜色空间被设置为了一个模板颜色空间。如果稍后尝试设置填充颜色为常规颜色，就会引起错误。通常的解决方案是，使用<strong>CGContextSaveGState</strong>和<strong>CGContextRestoreGState</strong>函数将代码包起来。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　你可能观察到图8的平铺效果并不与箭头的三角形内部相符合：最底部的似乎只平铺了一半蓝色。这是因为一个模板的定位并不关心你填充（描边）的形状，总的来说它只关心图形上下文。我们可以调用<strong>CGContextSetPatternPhase</strong>函数改变模板的定位。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　<strong>图形上下文变换</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　就像UIView可以实现变换，同样图形上下文也具备这项功能。然而对图形上下文应用一个变换操作不会对已在图形上下文上的绘图产生什么影响，它只会影响到在上下文变换之后被绘制的图形，并改变被映射到图形上下文区域的坐标方式。一个图形上下文变换被称为CTM，意为&#8220;当前变换矩阵&#8220;（current transformation matrix）。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　完全利用图形上下文的CTM来免于即使是简单的计算操作是很常见的。你可以使用CGContextConcatCTM函数将当前变换乘上任何CGAffineTransform，还有一些便利函数可对当前变换应用平移、缩放，旋转变换。&nbsp;</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　当你获得上下文的时候，对图形上下文的基本变换已经设置好了；这就是系统能映射上下文绘图坐标到屏幕坐标的原因。无论你对当前变换应用了什么变换，基本变换变换依然有效并且绘图继续工作。通过将你的变换代码封装到CGContextSaveGState和CGContextRestoreGState函数调用中，对基本变换应用的变换操作可以被还原。&nbsp;</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　举个例子，对于我们迄今为止使用代码绘制的向上箭头来说，已知的放置箭头的方式仅仅只有一个位置：箭头矩形框的左上角被硬编码在坐标{80，0}。这样代码很难理解、灵活性差、且很难被重用。最明智的做法是通过将所有代码中的x坐标值减去80，让箭头矩形框左上角在坐标{0，0}。事先应用一个简单的平移变换，很容易将箭头画在任何位置。为了映射坐标到箭头的左上角，我们使用下面代码：</span></p>
<p class="MsoNormal" align="left" style="margin: 6pt 0cm; text-indent: 40pt; line-height: 15.75pt; background-color: #d9d9d9; background-position: initial initial; background-repeat: initial initial;"><span lang="EN-US" style="font-size: 10pt; font-family: Consolas;">CGContextTranslateCTM</span><span style="font-size: 10pt; font-family: 宋体;">（</span><span lang="EN-US" style="font-size: 10pt; font-family: Consolas;">con, 80, 0</span><span style="font-size: 10pt; font-family: 宋体;">）</span><span lang="EN-US" style="font-size: 10pt; font-family: Consolas;">;&nbsp;</span><span style="text-indent: 0px; line-height: 15.75pt; font-size: 10pt; font-family: Consolas;">//</span><span style="text-indent: 0px; line-height: 15.75pt; font-size: 10pt; font-family: 宋体;">在坐标</span><span style="text-indent: 0px; line-height: 15.75pt; font-size: 10pt; font-family: Consolas;">{0,0}</span><span style="text-indent: 0px; line-height: 15.75pt; font-size: 10pt; font-family: 宋体;">处绘制箭头</span></p>
<p style="margin-top:3.75pt;margin-right:0cm;margin-bottom:3.75pt;margin-left: 0cm;line-height:15.75pt"><span style="font-size: 10.5pt; font-family: 'Comic Sans MS';">&nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-size: 10.5pt;">旋转变换特别的有用，它可以让你在一个被旋转的方向上进行绘制而无需使用任何复杂的三角函数。然而这略有点复杂，因为旋转变换围绕的点是原点坐标。这几乎不是你所想要的，所以你先是应用了一个平移变换，为的是映射原点到你真正想绕其旋转的点。但是接着，在旋转之后，为了算出你在哪里绘图，你可能需要做一次逆向平移变换。</span></p>
<p style="margin: 3.75pt 0cm; line-height: 15.75pt;"><span style="font-size: 10.5pt;">　　为了说明这个做法，我将绕箭头杆子尾部旋转多个角度重复绘制箭头，并把对箭头的绘图封装为</span><span style="font-size: 10.5pt; font-family: 'Comic Sans MS';">UIImage</span><span style="font-size: 10.5pt;">对象。接着我们简单重复绘制</span><span style="font-size: 10.5pt; font-family: 'Comic Sans MS';">UIImage</span><span style="font-size: 10.5pt;">对象。</span></p>
<p style="margin: 3.75pt 0cm; line-height: 15.75pt;"><span style="font-size: 10.5pt;">　　具体代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">drawRect:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="nv">rect</span> <span class="p">{</span>
</span><span class="line">	<span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span><span class="mi">100</span><span class="p">),</span> <span class="n">NO</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextRef</span> <span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line">	<span class="n">CGContextSaveGState</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">90</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">90</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">110</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">110</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">90</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">90</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextClosePath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGContextGetClipBoundingBox</span><span class="p">(</span><span class="n">con</span><span class="p">));</span>
</span><span class="line">	<span class="n">CGContextEOClip</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">19</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextSetLineWidth</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextReplacePathWithStrokedPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextClip</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGFloat</span> <span class="n">locs</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">};</span>
</span><span class="line">	<span class="n">CGFloat</span> <span class="n">colors</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">			<span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.8</span><span class="p">,</span>
</span><span class="line">			<span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">,</span>
</span><span class="line">			<span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.3</span><span class="p">,</span><span class="mf">0.8</span>
</span><span class="line">		<span class="p">};</span>
</span><span class="line">	<span class="n">CGColorSpaceRef</span> <span class="n">sp</span> <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceGray</span><span class="p">();</span>
</span><span class="line">	<span class="n">CGGradientRef</span> <span class="n">grad</span> <span class="o">=</span> <span class="n">CGGradientCreateWithColorComponents</span> <span class="p">(</span><span class="n">sp</span><span class="p">,</span> <span class="n">colors</span><span class="p">,</span> <span class="n">locs</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextDrawLinearGradient</span> <span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">grad</span><span class="p">,</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">89</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">111</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGColorSpaceRelease</span><span class="p">(</span><span class="n">sp</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGGradientRelease</span><span class="p">(</span><span class="n">grad</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextRestoreGState</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGColorSpaceRef</span> <span class="n">sp2</span> <span class="o">=</span> <span class="n">CGColorSpaceCreatePattern</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextSetFillColorSpace</span> <span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sp2</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGColorSpaceRelease</span> <span class="p">(</span><span class="n">sp2</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGPatternCallbacks</span> <span class="n">callback</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">drawStripes</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class="line">	<span class="n">CGAffineTransform</span> <span class="n">tr</span> <span class="o">=</span> <span class="n">CGAffineTransformIdentity</span><span class="p">;</span>
</span><span class="line">	<span class="n">CGPatternRef</span> <span class="n">patt</span> <span class="o">=</span> <span class="n">CGPatternCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">tr</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="err">，</span><span class="n">kCGPatternTilingConstantSpacingMinimalDistortion</span><span class="p">,</span><span class="n">true</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">callback</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGFloat</span> <span class="n">alph</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class="line">	<span class="n">CGContextSetFillPattern</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">patt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">alph</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGPatternRelease</span><span class="p">(</span><span class="n">patt</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextMoveToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">80</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">100</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">120</span> <span class="o">-</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextFillPath</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span><span class="line">	<span class="n">UIImage</span><span class="o">*</span> <span class="n">im</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class="line">	<span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class="line">	<span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line">	<span class="p">[</span><span class="n">im</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">		<span class="n">CGContextRotateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">30</span> <span class="o">*</span> <span class="n">M_PI</span><span class="o">/</span><span class="mf">180.0</span><span class="p">);</span>
</span><span class="line">		<span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">		<span class="p">[</span><span class="n">im</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;"><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/07163256-346e34bf3956474f9df5a94c73593174.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图10 使用CTM旋转变换</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　变换有多个方法解决我们早期使用CGContextDrawImage函数遇到的倒置问题。相对于逆向绘图，我们选择逆向我们绘图的上下文。实质上，我们对上下文坐标系统应用了一个&#8220;倒置&#8221;变换。你自上而下移动上下文，接着你通过应用一个让y坐标乘以-1的缩放变换逆向y坐标的方向。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">theHeight</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp;&nbsp; 上下文的顶部应该被你往下移动多远依赖于你绘制的图片。比如说我们可以绘制没有倒置问题的两个半边的火星图形（前面讨论的一个例子）。</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">);</span> <span class="c1">// sz为[mars size]</span>
</span><span class="line"><span class="n">CGContextScaleCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="n">marsLeft</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextDrawImage</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">-</span><span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">),</span><span class="n">marsRight</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　阴影</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　为了在绘图上加入阴影，可在绘图之前设置上下文的阴影值。阴影的位置表示为CGSize，如果CGSize的两个值都是正数，则表示阴影是朝下和朝右的。模糊度被表示为任何一个正数。苹果没有解释缩放的工作方式，但实验表明12是最佳的模糊度，99及以上的模糊度会让阴影变得不成形。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;&nbsp;&nbsp; 我在图9的基础上给上下文加了一个阴影：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextSetShadow</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="mi">12</span><span class="p">);</span>
</span><span class="line"><span class="p">[</span><span class="n">im</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　然而，使用这种方法有一个不太明显的问题。我们是在每绘制一个箭头的时候加上的阴影。因此，箭头的阴影会投射在另一个箭头上面。我们想要的是让所有的箭头集体地投射出一个阴影。解决方法是使用一个透明的图层；该图层类似一个先是叠加所有绘图然后加上阴影的一个子上下文。代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">con</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class="line"><span class="n">CGContextSetShadow</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="mi">12</span><span class="p">);</span>
</span><span class="line"><span class="n">CGContextBeginTransparencyLayer</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line"><span class="p">[</span><span class="n">im</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextRotateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="mi">30</span> <span class="o">*</span> <span class="n">M_PI</span><span class="o">/</span><span class="mf">180.0</span><span class="p">);</span>
</span><span class="line">	<span class="n">CGContextTranslateCTM</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">);</span>
</span><span class="line">	<span class="p">[</span><span class="n">im</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1">// 在调用了CGContextEndTransparencyLayer函数之后，</span>
</span><span class="line"><span class="c1">// 图层内容会在应用全局alpha和上下文阴影状态之后被合成到上下文中</span>
</span><span class="line"><span class="n">CGContextEndTransparencyLayer</span><span class="p">(</span><span class="n">con</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p style="text-align: center;"><span style="font-family: 'comic sans ms', sans-serif;">　<span style="text-align: center; line-height: 1.5;">&nbsp;</span><img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/09171900-f4e5eee50a41417498caf7b95a9ae3da.png" alt="" /></span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;">图11 阴影效果</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　点与像素</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　一个点是由xy坐标描述的一个无穷小量的位置。通过指定点实现在图形上下文中的绘图。我们并没有关心设备的分辨率，因为Core Graphics已经精细地将绘图映射到物理输出设备（基于CTM、反锯齿和平滑技术）。因此，文章之前的讨论只关心图形上下文的点，不关注点与屏幕像素的关系。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　然而像素是真实存在的。一个像素是真实世界中一个具有完整物理尺寸的显示单元。整数的点实际上介于像素之间。在单分辨率设备上，这可能会让人感到迷惑。比方说，如果使用线宽为1的线条对一个整数坐标的垂直路径描边，那么线条将会被分为两半，分别落在路径的两侧。所以在单分辨率设备上线宽会变成2px（因为设备无法表示半个像素）。</span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;<img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/10092953-804dd8b8a43f4dd1a5c5621e33aa5414.png" alt="" width="693" height="298" /></span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif; line-height: 1.5;">图12 整数的点坐标与偏移0.5点的坐标对应的描边处理</span></p>
<p style="text-align: left;" align="center"><span style="font-family: 'comic sans ms', sans-serif; line-height: 1.5;">&nbsp; &nbsp; &nbsp; &nbsp;当你遇到显示效果不佳的时，可能会被建议通过对坐标增减0.5让它在像素中居中。这个建议可能有效，如图11。但它只是做了一些头脑简单的假设。一个复杂的做法是获得UIView的contentScaleFactor属性。这个值为1.0或2.0，所以你可以除以这个属性值得到从像素到点的转换。还可以想想用最精确的方式绘制一条水平或垂直的线条的方式不是描边路径，而是填充路径。使用这种方法UIView的子类代码将可以在任何设备上绘制一条完美的1px宽的垂线，代码如下：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.0</span><span class="o">/</span><span class="n">self</span><span class="p">.</span><span class="n">contentScaleFactor</span><span class="p">,</span><span class="mi">100</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;"><strong>　　内容模式</strong></span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　一个视图向它自身绘图，相对于只有背景颜色和子视图，它还有内容。这意味着每当视图被调整大小它的<strong>contentMode</strong>属性就变得非常重要。正如我之前提到的，绘图系统会尽可能避免重头开始绘制视图。相反，绘图系统将使用之前绘图操作的缓存结果（位图回填）。所以，如果视图被重新调整大小，系统可能简单的伸缩或重定位缓存绘图，前提是你的<strong>contentMode</strong>设置指令是是这样设置的。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　说明这一点略有点复杂。因为我需要安排调整视图大小而不引起重绘操作（调用<strong>drawRect：</strong>方法）。当程序启动时，我将创建一个MyView实例，并将它放在window上。接着将执行调整MyView尺寸的操作延迟到window出现和界面初次显示之后：</span></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class="line">  <span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">  <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIViewController</span> <span class="n">new</span><span class="p">];</span>
</span><span class="line">  <span class="n">MyView</span><span class="o">*</span> <span class="n">mv</span> <span class="o">=</span><span class="p">[[</span><span class="n">MyView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">150</span><span class="p">)];</span>
</span><span class="line">  <span class="n">mv</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class="line">  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span> <span class="n">mv</span><span class="p">];</span>
</span><span class="line">  <span class="n">mv</span><span class="p">.</span><span class="n">opaque</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">  <span class="n">mv</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">111</span><span class="p">;</span> <span class="c1">// so I can get a reference to this view later</span>
</span><span class="line">  <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">resize:</span><span class="p">)</span> <span class="nl">withObject:</span><span class="nb">nil</span> <span class="nl">afterDelay:</span><span class="mf">0.1</span><span class="p">];</span>
</span><span class="line">  <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">whiteColor</span><span class="p">];</span>
</span><span class="line">  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　我们将视图的高度调成之前的2倍。没有触发drawRect：方法的调用。如果我们视图的drawRect：方法代码和生成图9的代码相同，则我们得到如图12的结果，视图被显示在正确高度上。</span></p>
<p style="text-align: center;" align="left"><span style="font-family: 'comic sans ms', sans-serif;">&nbsp;<img style="border: 1px solid black;" src="http://images.cnitblog.com/blog/429321/201301/09172048-10bd46b975944316bca85b7f3451b54d.png" alt="" /></span></p>
<p align="center"><span style="font-family: 'comic sans ms', sans-serif;">图13 内容自动伸展</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　可是早晚drawRect：方法会被调用，绘图将按照<strong>drawRect：</strong>方法中的代码被刷新。代码不会将箭头绘制在相对于视图边界的高度。它是在一个固定的高度。因此箭头会伸展，而且会在以后某个时间返回到原始的尺寸。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　通常我们的视图的<strong>contentMode</strong>属性需要与视图绘制自己的方式一致。假设我们的<strong>drawRect：</strong>方法中的代码让箭头的尺寸和位置相对于视图的边界原点，即它的左上方。所以我们可以设置它的<strong>contentMode</strong>为<strong>UIViewContentModeTopLeft</strong>。又或者，我们可以将<strong>contentMode</strong>设置为<strong>UIVIewContentModeRedraw，</strong>这将引起缓存内容的自动缩放和重定位被关闭，最终结果是视图的<strong>setNeedsDisplay</strong>方法将被调用，触发<strong>drawRect：</strong>方法重绘视图内容。</span></p>
<p align="left"><span style="font-family: 'comic sans ms', sans-serif;">　　在另一方面，如果一个视图只是暂时被调整大小。假设是作为动画的一部分，那么伸缩行为正是你所想要的。假设我们的动画是想要让视图变大然后还原回原始大小以达到作为吸引用户的一种手段。这就需要视图伸缩的时候视图的内容也跟着伸缩，正确的<strong>contentMode</strong>的值是<strong>UIViewContentModeScaleToFill</strong>，被伸缩的内容仅仅是视图内容的一副缓存图片，所以它运行起来十分的高效。</span>&nbsp;</p>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
</strong></p></strong></p></span></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从UIKit到APPKit]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/08/04/cong-uikitdao-appkit/"/>
    <updated>2014-08-04T10:03:56+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/08/04/cong-uikitdao-appkit</id>
    <content type="html"><![CDATA[<p>Mac 不仅是一个强大的生产平台，也十分值得你<em>为其</em>开发一些东西。去年我们开始构建我们的第一款 <a href="http://decksetapp.com">Mac 应用</a>，成功为我们日常工作所在的平台开发点东西是一次十分美好的体验。但是，和为 iOS 系统开发应用相比，在我们了解 Mac 特性的过程中也遇到了一些困难。这篇文章总结了我们从这一过渡中得到的经验，希望能启发你们去开发自己的第一个 Mac 应用。</p>

<p>在这篇文章中，我们假定 OS X Yosemite 为我们默认使用的系统。今年，为了融合 iOS 和 OS X，苹果站在开发者的角度对 OS X 做出了巨大的改进。不过，我们会指出哪些特性仅适用于 Yosemite，而哪些特性也适用于之前的系统版本。</p>

<h2>相似点</h2>

<p>尽管 iOS 和 OS X 是两个独立的系统，它们却有很多共性。先就开发环境而言，它们使用同样的开发语言，同样的IDE。所以你会对这一切都感到非常熟悉。</p>

<p>更重要的是，OS X 和你已经熟悉的 iOS 共用许多框架，像 Foundation，Core Data 和 Core Animation。今年，Apple 进一步整合两个平台，并给 Mac 带来了一些之前仅能在 iOS 上面使用的框架，其中一个例子就是 Multipeer Connectivity。在更底层的地方，你立刻可以看到你熟悉的 API：Core Graphics，Core Text，libdispatch 等等。</p>

<p>真正开始有区别的是 UI 框架 — AppKit 早在 NeXT 时代就已面世并不断进化，而 UIKit 就像是简约版及现代版的 AppKit。出现这种情况的原因，是当 Apple 推出 iPhone 时可以从头开始，并吸取 AppKit 的经验：把已证实过可行的概念和部件拿过来用，并改进不够精良的设计。</p>

<p>如果你对这个转换是怎么发生的感兴趣，请观看前 Apple iOS 应用总监 <a href="https://twitter.com/nitinganatra">Nitin Ganatra</a> 播客上的精彩剧集：<a href="http://www.imore.com/debug-39-nitin-ganatra-episode-i-system-7-carbon">System 7 to Carbon</a>，<a href="http://www.imore.com/debug-40-nitin-ganatra-episode-ii-os-x-ios">OS X to iOS</a>，以及 <a href="http://www.imore.com/debug-41-nitin-ganatra-episode-iii-iphone-ipad">iPhone to iPad</a>。</p>

<p>考虑到这一点，也就不奇怪为什么 UIKit 和 AppKit 仍旧共享许多概念了。UI 是基于 window 和 view 构建起来的，消息像 iOS 一样通过响应者链传递。此外，<code>UIView</code> 是 <code>NSView</code>，<code>UIControl</code> 是 <code>NSControl</code>，<code>UIImage</code> 是 <code>NSImage</code>，<code>UIViewController</code> 是 <code>NSViewController</code>，<code>UITextView</code> 是 <code>NSTextView</code>&#8230;这样的例子不胜枚举。</p>

<p>看起来就像你仅需把 <code>UI</code> 前缀替换为 <code>NS</code> 前缀，你就可以用同样的方法使用这些类。但事实是在很多情况下这并不奏效。它们在实现上并没有在概念上那么相似。你在 iOS 上的经验至多能帮你大致了解构建用户界面的基础，以及使用很多设计模式，比如代理，都是类似的。但是细节是魔鬼 — 你真的应该通过阅读文档来学习如果使用这些类。</p>

<p>下一节，我们来看看那些常见的陷阱。</p>

<h2>不同点</h2>

<h3 id="windowwindowcontroller">Window 和 Window Controller</h3>
<!-- more -->
<p>虽然在 iOS 上你几乎从来不用与 window 交互（因为它们占据了整个屏幕），window 在 Mac 上却是一个关键组件。从历史上看， Mac 应用包含多个 window，每个 window 有其自己的角色，非常类似于 iOS 上面的 view controller。因此, AppKit 有 <code>NSWindowController</code>，它接管很多在 iOS 上你会在 view controller 里面处理的任务。view controller 被添加到 AppKit 的时间并不长，而且直到现在，它们默认不接受 action，并且缺失很多生命周期的方法、view controller 容器，以及很多你在 UIKit 中熟悉的特性。</p>

<p>但 AppKit 框架已经改变，因为 Mac 应用越来越依赖于一个单一的 window。就 OS X 10.10 Yosemite 而言，<code>NSViewController</code> 在许多方面与 <code>UIViewController</code> 类似。它也默认是响应者链中的一环。但要记住，如果你的 Mac 应用需要兼容 OS X 10.9 或更早版本的系统，Mac 上的 window controller 更类似于 iOS 上你熟悉的 view controller。正如 <a href="https://www.mikeash.com/pyblog/friday-qa-2013-04-05-windows-and-window-controllers.html">Mike Ash 所言</a>，在 Mac 上实例化窗口的一个好的模式是：每个窗口类型对应一个 nib 文件和一个 window controller。</p>

<p>此外，<code>NSWindow</code> 并不像 <code>UIWindow</code> 一样是一个 view 的子类。相反，每个 window 用 <code>contentView</code> 属性持有一个指向其顶层 view 的引用。</p>

<h3>响应者链</h3>

<p>如果你在为 OS X 10.9 或者更低版本的系统开发，请注意在默认情况下 view controller 并不是响应者链的一环。相反，事件会沿着视图树向上传递然后直接到达 window 和 window controller。在这种情况下，如果你想在 view controller 处理事件，你需要<a href="http://www.cocoawithlove.com/2008/07/better-integration-for-nsviewcontroller.html">手动</a>把它添加到响应者链中。</p>

<p>除了在响应者链方面的不同，AppKit 在 action 的命名方法上还有一个严格的惯例，一个 action 方法看起来总是类似这样子的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">performAction:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上方法在 iOS 上面所允许的没有参数，或者有一个 sender 和一个 event 参数，而这些变体在 OS X 上面是无法使用的。此外，控件（译者注：指 NSControl 及其子类）在 AppKit 中通常对应一个 target 和一个 action，而不像在 iOS 上可以通过 <code>addTarget:action:forControlEvents:</code> 方法为一个控件关联多个 target-action 对。</p>

<h3 id="view">View</h3>

<p>因为历史遗留问题，Mac 的视图系统和 iOS 的视图系统有很大区别。iOS 上的 view 一开始就由 Core Animation layer 驱动。但是 AppKit 比 Core Animation 早出来了很久，当 Apple 设计 AppKit 时，我们现在熟知的 GPU 还没有出现。因此，那时视图系统相关的任务主要靠 CPU 处理。</p>

<p>当你要开始进行 Mac 相关的开发时，我们强烈推荐你查看 Apple 的 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaViewsGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40002978">Introduction to View Programming Guide for Cocoa</a>。此外，你还应该看一下这两个精彩的 WWDC session：<a href="https://developer.apple.com/videos/wwdc/2012/#217">Layer-Backed Views: AppKit + Core Animation</a> 和 <a href="https://developer.apple.com/videos/wwdc/2013/#215">Optimizing Drawing and Scrolling</a>。</p>

<h4 id="layerbackedview">Layer-Backed View</h4>

<p>默认情况下，AppKit 的 view 不是由 Core Animation layer 驱动的；AppKit 整合 layer-backing 是 iOS 反哺的结果。一些在 AppKit 需要做的决定你在 UIKit 从来不需要关心。AppKit 区分 layer-backed view 和 layer-hosting view，可以在每个视图树的根节点启用或者禁用 layer backing。</p>

<p>把窗口的 contentView 的 <code>wantsLayer</code> 属性设置为 <code>YES</code> 是启用 layer backing 最简单的方法。这会导致 window 的视图树中所有的 view 都启用 layer backing，这样就没必要反复设置每个 view 的 wantsLayer 属性了。这个操作可以用代码或者在 Interface Builder 的 View Effects Inspector 面板完成。</p>

<p>和 iOS 相比而言，在 Mac 上你应该把 backing layer 看做是一个实现细节。这意味着你不应该和这些 layer 直接交互，因为 AppKit 才是这些 layer 的拥有者。举个例子，在 iOS 上你可以随意编写这样的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>objc</p>

<p>但是在 AppKit，你不应该直接修改这些 layer。如果想用这种方式和 layer 交互，你还有一步工作要做。重写 <code>NSView</code> 的 <code>wantsUpdateLayer</code> 方法并返回 <code>YES</code>，这能让你可以改变 layer 的属性。如果你这样做，AppKit 将不会再调用 view 的 <code>drawRect:</code> 方法。取而代之，你应该在 <code>updateLayer</code> 里修改 Layer，这个方法会在 view 的更新周期中被调用。</p>

<p>举个例子，你可以用这方法去实现一个非常简单的有纯色背景的 view（没错，<code>NSView</code> 没有 <code>backgroundColor</code> 属性）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">ColoredView</span>: <span class="nc">NSView</span>
</span><span class="line">
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSColor</span> <span class="o">*</span><span class="n">backgroundColor</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">ColoredView</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">wantsUpdateLayer</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateLayer</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setBackgroundColor:</span><span class="p">(</span><span class="n">NSColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">backgroundColor</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">_backgroundColor</span> <span class="o">=</span> <span class="n">backgroundColor</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">setNeedsDisplay:</span><span class="n">YES</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个例子的前提是这个 view 的父 view 已经为其视图树启用了 layer backing。另一种可行的实现则只需要重写 <code>drawRect:</code> 方法并在其中绘制背景颜色。</p>

<h5 id="layer">合并 Layer</h5>

<p>选择使用众多 layer-backed view 会带来巨大的内存消耗（每一个 layer 有其自己的 backing store，还有可能和其他 view 的 backing store 重叠）而且会带来潜在的合成这些 layer 的消耗。从 OS X 10.9 开始，你可以通过设置 <code>canDrawSubviewsIntoLayer</code> 属性来让 AppKit 合并一个视图树中所有 layer 的内容到一个共有的 layer。如果你不需要单独对一个 view 中的子 view 做动画，这将是一个很好的选择。</p>

<p>所有隐式 layer-backed 的子 view（比如，你没有显式地对这些子 view 设置 <code>wantsLayer = YES</code>）现在将会被绘制到同一个 layer 中。不过，<code>wantsLayer</code> 设置为 <code>YES</code> 的子 view 仍然持有它们自己的 backing layer， 而且不管 <code>wantsUpdateLayer</code> 返回什么，它们的 <code>drawRect:</code> 方法仍然会被调用。</p>

<h5 id="layer">Layer 重绘策略</h5>

<p>另外一个需要注意的地方：layer-backed view 会默认设置重绘策略为 <code>NSViewLayerContentsRedrawDuringViewResize</code>。在行为上，这个非 layer-backed view 是类似的，不过如果动画的每一帧都引入一个绘制步骤的话可能会对动画的性能造成不利影响。</p>

<p>为了避免这个问题，你可以把 <code>layerContentsRedrawPolicy</code> 属性设置为 <code>NSViewLayerContentsRedrawOnSetNeedsDisplay</code> 。这样子的话，便由你来决定 layer 的内容何时需要重绘。帧的改变将不再自动触发重绘；现在你要负责调用 <code>-setNeedsDisplay:</code> 来触发重绘操作。</p>

<p>一旦你这样更改了重绘策略，你也许会想了解下 view 中和 layer 的 <code>contentGravity</code> 属性等价的 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html#//apple_ref/occ/instm/NSView/layerContentsPlacement"><code>layerContentsPlacement</code></a> 属性。这个属性允许你指定在调整大小的时候当前的 layer 内容该怎么映射到 layer 上。</p>

<h4 id="layerhostingview">Layer-Hosting View</h4>

<p><code>NSView</code> 的 layer 故事并没有完结。你可以用另一种完全不一样的方式来使用 Core Animation layer — 称为 layer-hosting view。简单来说，你可以对一个 layer-hosting view 的 layer 及其子 layer 做任何操作，代价是你再也不能给该 view 添加任何子 view。layer-hosting view 是视图树中的叶子节点。</p>

<p>要创建一个 layer-hosting view，你首先要为 view 的 <code>layer</code> 属性分配一个 layer 对象，然后把 <code>wantsLayer</code> 设置为 <code>YES</code>。注意，这些步骤的顺序是非常关键的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFrame:</span><span class="p">(</span><span class="n">NSRect</span><span class="p">)</span><span class="nv">frame</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFrame:</span><span class="n">frame</span><span class="p">];</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">layer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CALayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">wantsLayer</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在你设置了你自定义的 layer <em>之后</em>才设置 <code>wantsLayer</code> 是非常重要的。</p>

<h4 id="view">其他与 View 相关的陷阱</h4>

<p>默认情况下，Mac 上视图的坐标系统原点位于左下角，而不是像 iOS 的左上角。刚开始这可能会让人混乱，不过你可以通过重写 <code>isFlipped</code> 并返回 <code>YES</code> 来恢复到你熟悉的左上角。</p>

<p>由于 AppKit 中的 view 没有背景颜色属性可以让你直接设置为 <code>[NSColor clearColor]</code> 来让其变得透明，许多 <code>NSView</code> 的子类比如 <code>NSTextView</code> 和 <code>NSScrollView</code> 开放了一个 <code>drawsBackground</code> 属性，如果你想让这一类 view 透明，你必须设置该属性为 <code>NO</code>。</p>

<p>为了能接收光标进出一个 view 或者在 view 里面移动的事件，你需要创建一个追踪区域。你可以在 <code>NSView</code> 中指定的 <code>updateTrackingAreas</code> 方法中来做这件事情。一个通用的写法看起来是这样子的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateTrackingAreas</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">removeTrackingArea:</span><span class="n">self</span><span class="p">.</span><span class="n">trackingArea</span><span class="p">];</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">trackingArea</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSTrackingArea</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRect:</span><span class="n">CGRectZero</span>
</span><span class="line">                                                     <span class="nl">options:</span><span class="n">NSTrackingMouseEnteredAndExited</span><span class="o">|</span><span class="n">NSTrackingInVisibleRect</span><span class="o">|</span><span class="n">NSTrackingActiveInActiveApp</span>
</span><span class="line">                                                       <span class="nl">owner:</span><span class="n">self</span>
</span><span class="line">                                                    <span class="nl">userInfo:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">addTrackingArea:</span><span class="n">self</span><span class="p">.</span><span class="n">trackingArea</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>AppKit 的控件之前是由 <code>NSCell</code> 的子类驱动的。不要混淆这些 cell 和 UIKit 里 table view 的 cell 及 collection view 的 cell。AppKit 最初区分 view 和 cell 是为了节省资源 - view 可以把所有的绘制工作代理给更轻量级的可以被所有同类型的 view 重用的 cell 对象。</p>

<p>Apple 正在一步步地抛弃这样的实现方法了，但是你还是会时不时碰到这样的问题。举个例子，如果你想创建一个自定义的按钮，你首先要继承 <code>NSButton</code> <em>和</em> <code>NSButtonCell</code>，然后在这个 cell 子类里面进行你自定义的绘制，然后通过重写 <code>+[NSControl cellClass]</code> 方法告诉自定义按钮使用你的 cell 子类。</p>

<p>最后，如果你想知道在你自己的 <code>drawRect:</code> 方法里怎么获取当前的 Core Graphics 上下文，答案是 <code>NSGraphicsContext</code> 的 <code>graphicsPort</code> 属性。详细内容请查看 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/">Cocoa Drawing Guide</a>。</p>

<h3>动画</h3>

<p>归结于上面提到的视图系统的差异，动画在 Mac 上的运作方式也十分不同。想要一个好的概述，请观看 WWDC session：<a href="https://developer.apple.com/videos/wwdc/2013/#213">Best Practices for Cocoa Animation</a></p>

<p>如果你的 view 不是由 layer 驱动的，那你的动画自然是完全由 CPU 处理，这意味着动画的每一步都必须相应地绘制到 window-backing store 上。因为现今我们主要是对 layer-backed view 做动画以获得流畅的动画效果，所以我们在这儿就专注于这种情况。</p>

<p>正如上面说的，在 AppKit 中你不应该修改 layer-backed view 中的 layer (看 <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/CreatingBasicAnimations/CreatingBasicAnimations.html#//apple_ref/doc/uid/TP40004514-CH3-SW18">Core Animation Programming Guide</a> 这篇文档底部 “Rules for Modifying Layers in OS X” 那一节）。这些 layer 由 AppKit 管理，而且和 iOS 相反，view 的几何属性并不仅仅是对应的 layer 的几何属性的映射，但 AppKit 却会把 view 内部的几何属性同步到 layer。</p>

<p>你可以用几种不同的方法对一个 view 进行动画。第一种，你可以使用 <a href="file:///Users/florian/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleOSX10.9.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/NSAnimatablePropertyContainer_protocol/Introduction/Introduction.html#//apple_ref/occ/intfm/NSAnimatablePropertyContainer/animator">animator proxy</a>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">animator</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在幕后，这句代码会启用 layer 的隐式动画，设置其透明度，然后再次禁用 layer 的隐式动画。</p>

<p>你还可以把这句代码封装到一个 <a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/NSAnimationContext_class/Introduction/Introduction.html">animation context</a> 中，这样你就能得到它的结束回调：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSAnimationContext</span> <span class="nl">runAnimationGroup:</span><span class="o">^</span><span class="p">(</span><span class="n">NSAnimationContext</span> <span class="o">*</span><span class="n">context</span><span class="p">){</span>
</span><span class="line">    <span class="n">view</span><span class="p">.</span><span class="n">animator</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果想改变持续时间和缓动类型，我们必须对其动画上下文进行设置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSAnimationContext</span> <span class="nl">runAnimationGroup:</span><span class="o">^</span><span class="p">(</span><span class="n">NSAnimationContext</span> <span class="o">*</span><span class="n">context</span><span class="p">){</span>
</span><span class="line">    <span class="n">context</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">context</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseIn</span><span class="p">];</span>
</span><span class="line">    <span class="n">view</span><span class="p">.</span><span class="n">animator</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你不需要结束回调，你可以用这种简化形式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSAnimationContext</span> <span class="n">currentContext</span><span class="p">].</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">animator</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，你可以启用隐式动画，这样你就不必每次都明确地使用 animator proxy 了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSAnimationContext</span> <span class="n">currentContext</span><span class="p">].</span><span class="n">allowsImplicitAnimations</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要更全面地控制动画，你可以使用 <code>CAAnimation</code> 实例。和 iOS 相反，你不能直接把它们加到 layer 上（因为 layer 不应该由你来修改），不过你可以使用 <a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/NSAnimatablePropertyContainer_protocol/Introduction/Introduction.html"><code>NSAnimatablePropertyContainer</code></a> 协议中定义的 API，<code>NSView</code> 和 <code>NSWindow</code> 已经实现了该协议。举个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CAKeyframeAnimation</span> <span class="o">*</span><span class="n">animation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAKeyframeAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class="line"><span class="n">animation</span><span class="p">.</span><span class="n">values</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="err">@</span><span class="mi">1</span><span class="p">,</span> <span class="err">@</span><span class="mf">.9</span><span class="p">,</span> <span class="err">@</span><span class="mf">.8</span><span class="p">,</span> <span class="err">@</span><span class="mf">.7</span><span class="p">,</span> <span class="err">@</span><span class="mf">.6</span><span class="p">];</span>
</span><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">animations</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;alphaValue&quot;</span><span class="o">:</span> <span class="n">animation</span><span class="p">};</span>
</span><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">animator</span><span class="p">.</span><span class="n">alphaValue</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于<code>帧</code>动画来说，把 view 的 <code>layerContentsRedrawPolicy</code> 设置为 <code>NSViewLayerContentsRedrawOnSetNeedsDisplay</code> 是非常重要的，不然的话 view 的内容在每一帧都会被重绘。</p>

<p>很遗憾，<code>NSView</code> 没有开放 Core Animation layer 所有可以进行动画的属性，<code>transform</code> 是其中最重要的例子。看看 <a href="https://twitter.com/willing">Jonathan Willings</a> 的<a href="http://jwilling.com/osx-animations">这篇文章</a>，它描述了你可以如何解决这些限制。不过注意，文章中的解决方案是不受官方支持的。</p>

<p>上面提到的所有东西都适用于 <em>layer-backed</em> view。对于 <em>layer-hosting</em> view 来说，你可以直接对 view 的 layer 或者子 layer 使用 <code>CAAnimations</code>，因为你拥有它们的控制权。</p>

<h3 id="collectionview">Collection View</h3>

<p>尽管 AppKit 有 <code>NSCollectionView</code> 类，它的功能却比 UIKit 里对应的类滞后很多。鉴于 <code>UICollectionView</code> 是 iOS 上一个如此多功能的控件（当然，这取决于你的 UI 观念），AppKit 里对应的控件一点都不像它这件事相当难以忍受。所以当你要规划你的用户界面的时候，要考虑构建一个网格布局有可能会非常麻烦，相反，在 iOS 上这很容易实现。</p>

<h3>图像</h3>

<p>来自 iOS 的你对 <code>UIImage</code> 肯定非常熟悉，正巧，AppKit 也有一个对应的 <code>NSImage</code> 类。不过很快你就会意识到这两个类简直是天差地别。从很多方面来说，<code>NSImage</code> 都比 <code>UIImage</code> 强大很多，但这是建立在复杂性增加的代价上的。Apple 的 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Images/Images.html#//apple_ref/doc/uid/TP40003290-CH208-BCIBBFGJ">Cocoa Drawing Guide</a> 很好地介绍了如何使用 AppKit 中的图像。</p>

<p>概念上最重要的不同是 <code>NSImage</code> 由一个或者多个图像表示（image representation，译者注：这里的图像表示为名词，可以参考<a href="http://baike.baidu.com/view/4301255.htm">百度百科</a>，本节下同）驱动，这些图像表示在 AppKit 表现为一些 <code>NSImageRep</code> 的子类，像 <code>NSBitmapImageRep</code>，<code>NSPDFImageRep</code> 和 <code>NSEPSImageRep</code>。举个例子，一个 <code>NSImage</code> 对象为了打印同样的内容可以持有缩略图，全尺寸和 PDF 三个图像表示。当你绘制图像时，图像表示会匹配当前的图形上下文，而绘图尺寸会根据颜色空间，维度，分辨率以及绘图深度得出。</p>

<p>此外，Mac 上的图像除了尺寸还有分辨率的概念。图像表示的分辨率由三个属性构成：<code>size</code>，<code>pixelsWide</code> 以及 <code>pixelsHigh</code>。size 属性决定了图像表示被渲染时的尺寸，而 pixelsWide 和 pixelsHigh 指定了源于图像数据的原始尺寸。这三个属性共同决定了图像表示的分辨率。像素尺寸可以和<strong>图像表示</strong>的尺寸不一样，正如<strong>图像表示</strong>的尺寸可以和它所属的图片的尺寸不一样。</p>

<p>另外一个和 <code>UIImage</code> 不一样的地方是当它被绘制到屏幕上时 <code>NSImage</code> 会缓存绘制结果（可以通过 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSImage_Class/Reference/Reference.html#//apple_ref/occ/instm/NSImage/cacheMode"><code>cacheMode</code></a> 属性配置）。当你改变底层的图像表示，你必须对图像调用 <code>recache</code> 才能使其生效。</p>

<p>不过在 Mac 上面处理图像并不总是比 iOS 复杂。<code>NSImage</code> 提供了一个很简单的方法去绘制一个新图像，而在 iOS 上，你需要创建一个位图上下文，然后用位图上下文创建 <code>CGImage</code>，最终用该 CGImage 初始化一个 <code>UIImage</code> 实例。用 <code>NSImage</code> 你仅需：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[</span><span class="n">NSImage</span> <span class="nl">imageWithSize:</span><span class="p">(</span><span class="n">NSSize</span><span class="p">)</span><span class="n">size</span>
</span><span class="line">            <span class="nl">flipped:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">drawingHandlerShouldBeCalledWithFlippedContext</span>
</span><span class="line">     <span class="nl">drawingHandler:</span><span class="o">^</span><span class="kt">BOOL</span> <span class="p">(</span><span class="n">NSRect</span> <span class="n">dstRect</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// your drawing commands here...</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>颜色</h3>

<p>Mac 支持完全的 color-calibrated 工作流，所有跟颜色相关的任何东西都有可能变得更复杂。颜色管理是一个复杂的主题，我们也不精通这方面的东西。所以，我们希望你看看 Apple 关于这方面的指南： <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/DrawColor/DrawColor.html#//apple_ref/doc/uid/10000082-SW1">Introduction to Color Programming Topics for Cocoa</a> 和 <a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/csintro/csintro_intro/csintro_intro.html#//apple_ref/doc/uid/TP30001148">Introduction to Color Management</a>。</p>

<p>你经常需要在你的应用里使用一个你的设计师给你指定的颜色。要取得正确的颜色，设计模板使用的颜色空间和你以编程方式指定的颜色空间保持一致是非常重要的。系统标准的颜色选择器有一个下拉菜单，你可以在这里选择你想要的颜色空间。我们建议使用 device-independent sRGB 颜色空间，然后在代码里面用 <code>+[NSColor colorWithSRGBRed:green:blue:alpha:]</code> 类方法来创建颜色。</p>

<p><img src="http://img.objccn.io/issue-14/color-picker.png" alt="" /></p>

<h3>文字系统</h3>

<p>有了 <a href="http://objccn.io/issue-5-1/">TextKit</a>，iOS 7 终于有了和 Mac 上早就有了的 <a href="https://developer.apple.com/library/mac/documentation/TextFonts/Conceptual/CocoaTextArchitecture/TextSystemArchitecture/ArchitectureOverview.html">Cocoa Text System</a> 等效的东西。但 Apple 并不仅仅是把文字系统从 Mac 上转移到 iOS；相反，Apple 对其做了些显著的改变。</p>

<p>举个例子，AppKit 开放 <code>NSTypesetter</code> 和 <code>NSGlyphGenerator</code>，你可以通过继承这两者来自定义它们的一些特性。iOS 并不开放这些类，但是你可以通过 <code>NSLayoutManagerDelegate</code> 协议达到定制的目的。</p>

<p>总体来说，两个平台的文字系统还是非常相似的，所有你在 iOS 上能做的在 Mac 上都可以做（甚至更多），但对于一些东西，你必须从不同的地方寻找合适的方法实现。</p>

<h3>沙盒</h3>

<p>符合沙盒机制的 Mac 应用才能通过 Mac App Store 销售。鉴于沙盒从一开始就是 iOS 的基本规范（所以你会对它非常熟悉），你可能会好奇我们为什么要在这里提起它。然而，我们已经习惯了沙盒机制还没出现之前的 Mac 开发环境，所以有时候会忽视一些你想要实现的功能会和沙盒的限制出现冲突。</p>

<p>Mac 的文件系统是一直对用户开放的，所以如果用户明确表示，沙盒应用可以访问自身应用外的文件。同样的机制同时引进了 iOS 8。不过，和通过这种方式放宽对 iOS 的限制相反，它却加强了对 Mac 的限制。这让它容易被忽视和遗忘。</p>

<p>对此我们也十分惭愧，所以希望能阻止你犯同样的错误。当我们开始开发 <a href="http://decksetapp.com">Deckset</a> — 一款把简单 Markdown 文件转换为演示幻灯片的应用 — 时，我们从来没想过我们会碰到什么关于沙盒的问题。毕竟，我们只需要读 Markdown 文件的权限。</p>

<p>我们忘记了我们还要显示 Markdown 文件中引用的图片。尽管你在 Markdown 文件中输入了图片文件的路径，但沙盒系统并不认为这是用户的意图。最后，我们通过一个像通知中心一样的 UI 来提示用户授权我们访问 Markdown 文件中的所有图片‘解决’了该问题。</p>

<p>及早看一下 Apple 的 <a href="https://developer.apple.com/app-sandboxing/">sandboxing guides</a> 以防以后在相关的问题上犯错误。</p>

<h2>独有特性</h2>

<p>有很多事情你只能在 Mac 上做，这主要是因为它不同的交互模型和它更为宽松的安全策略。在本期话题中，我们有一些文章深入探讨了其中的一些内容：<a href="http://objccn.io/issue-14-4/">进程间通讯</a>，<a href="http://objccn.io/issue-14-1/">使 Mac 应用脚本化</a>, <a href="http://objccn.io/issue-14-2/">在沙盒中脚本化其他应用</a>, <a href="http://objccn.io/issue-14-3/">为你的应用构建插件</a>。</p>

<p>当然，这只是 Mac 独有特性中很小的一部分，但这给了你一个很好的视角看待 iOS 8 从头开始打造其可扩展性和 app 间通讯。最后，还有很多东西等待你去探索：Drag and Drop，Printing，Bindings，OpenCL 等等，这里仅仅是举几个例子。</p>

<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闭包，你了解多少？]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/07/04/bi-bao-%2Cni-liao-jie-duo-shao-%3F/"/>
    <updated>2014-07-04T14:48:57+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/07/04/bi-bao-,ni-liao-jie-duo-shao-?</id>
    <content type="html"><![CDATA[<p>在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。
闭包的概念出现于60年代，最早实现闭包的程序语言是Scheme。之后，闭包被广泛使用于函数式编程语言如ML语言和LISP。很多命令式程序语言也开始支持闭包。
在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。
闭包一词经常和匿名函数混淆。这可能是因为两者经常同时使用，但是它们是不同的概念。</p>

<p>闭包和状态表达闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。变量的作用域仅限于包含它们的函数，因此无法从其它程序代码部分进行访问。不过，变量的生存期是可以很长，在一次函数调用期间所创建所生成的值在下次函数调用时仍然存在。正因为这一特点，闭包可以用来完成信息隐藏，并进而应用于需要状态表达的某些编程范型中。
不过，用这种方式来使用闭包时，闭包不再具有引用透明性，因此也不再是纯函数。即便如此，在某些“近似于函数式编程语言”的语言，例如Scheme中，闭包还是得到了广泛的使用。</p>

<p>闭包和第一类函数</p>

<p>典型的支持闭包的语言中，通常将函数当作第一类对象——在这些语言中，函数可以被当作参数传递、也可以作为函数返回值、绑定到变量名、就像字符串、整数等简单类型。例如以下Scheme代码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="c1">; Return a list  of all books with at least THRESHOLD copies sold.</span>
</span><span class="line"><span class="p">(</span><span class="k">define </span> <span class="p">(</span><span class="nf">best-selling-books</span>  <span class="nv">threshold</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nf">filter</span>
</span><span class="line">    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">book</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">book-sales</span> <span class="nv">book</span><span class="p">)</span>  <span class="nv">threshold</span><span class="p">))</span>
</span><span class="line">    <span class="nv">book-list</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在这个例子中，lambda表达式(lambda (book) (&gt;= (book-sales book) threshold))出现在函数best-selling-books中。当这个lambda表达式被执行时，Scheme创造了一个包含此表达式以及对threshold变量的引用的闭包，其中threshold变量在lambda表达式中是自由变量。
这个闭包接着被传递到filter函数。这个函数的功能是重复调用这个闭包以判断哪些书需要增加到列表那些需要丢弃。因为闭包中引用了变量threshold，所以它在每次被filter调用时都可以使用这个变量，虽然filter可能定义在另一个文件中。
<!-- more --></p>
<p>下面是用ECMAScript (JavaScript)写的同一个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Return a  list of all books with at least &#39;threshold&#39; copies sold.</span>
</span><span class="line"><span class="kd">function</span>  <span class="nx">bestSellingBooks</span><span class="p">(</span><span class="nx">threshold</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">bookList</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
</span><span class="line">      <span class="kd">function</span>  <span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">book</span><span class="p">.</span><span class="nx">sales</span> <span class="o">&gt;=</span> <span class="nx">threshold</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这里，关键字function取代了lambda，Array.filter方法[5]取代了filter函数，但两段代码的功能是一样的。</p>

<p>一个函数可以创建一个闭包并返回它，如下述javascript例子：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Return a  function that approximates the derivative of f</span>
</span><span class="line"><span class="c1">// using an interval  of dx, which should be appropriately small.</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">derivative</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span>  <span class="nx">dx</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span>  <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">dx</span><span class="p">)</span> <span class="o">-</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span> <span class="o">/</span> <span class="nx">dx</span><span class="p">;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>因为在这个例子中闭包已经超出了创建它的函数的范围，所以变量f和dx将在函数derivative返回后继续存在。在没有闭包的语言中，变量的生命周期只限于创建它的环境。但在有闭包的语言中，只要有一个闭包引用了这个变量，它就会一直存在。清理不被任何函数引用的变量的工作通常由垃圾回收完成。</p>

<p>闭包的用途</p>

<ul>
  <li>因为闭包只有在被调用时才执行操作，即“惰性求值”，所以它可以被用来定义控制结构。例如：在Smalltalk语言中，所有的控制结构，包括分歧条件(if/then/else)和循环(while和for)，都是通过闭包实现的。用户也可以使用闭包定义自己的控制结构。</li>
  <li>多个函数可以使用一个相同的环境，这使得它们可以通过改变那个环境相互交流。比如在Scheme中：</li>
</ul>

<p />
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="k">define </span><span class="nv">foo</span> <span class="no">#f</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">define </span> <span class="nv">bar</span> <span class="no">#f</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">secret-message</span> <span class="s">&quot;none&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">set! </span><span class="nv">foo</span>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">msg</span><span class="p">)</span> <span class="p">(</span><span class="k">set! </span><span class="nv">secret-message</span> <span class="nv">msg</span><span class="p">)))</span>
</span><span class="line">  <span class="p">(</span><span class="k">set! </span><span class="nv">bar</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="nv">secret-message</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">display </span> <span class="p">(</span><span class="nf">bar</span><span class="p">))</span> <span class="c1">; prints &quot;none&quot;</span>
</span><span class="line"><span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">foo</span> <span class="s">&quot;meet me by the docks at midnight&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nf">bar</span><span class="p">))</span> <span class="c1">; prints &quot;meet me by the docks at midnight&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>闭包可以用来实现对象系统。</li>
</ul>

<p>闭包的实现
典型实现方式是定义一个特殊的数据结构，保存了函数地址指针与闭包创建时的函数的词法环境表示（那些nonlocal变量的绑定）。使用函数调用栈的语言实现闭包比较困难，因而这也说明了为什么大多数实现闭包的语言是基于垃圾收集机制。
闭包的实现与函数对象很相似。这种技术也叫做lambda lifting。</p>

<p>各种语言中（类似）闭包的结构C语言的回调函数在C语言中，支持回调函数的库有时在注册时需要两个参数：一个函数指针，一个独立的void*指针用以保存用户数据。这样的做法允许回调函数恢复其调用时的状态。这样的惯用法在功能上类似于闭包，但语法上有所不同。gcc对C语言的扩展gcc编译器对C语言实现了一种闭包的程序特性。</p>
<p>C语言扩展：BlocksC语言 (使用LLVM编译器或苹果修改版的GCC)支持块。闭包变量用__block标记。同时，这个扩展也可以应用到Objective-C与C++中。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">^</span><span class="n">IntBlock</span><span class="p">)();</span>
</span><span class="line">
</span><span class="line"><span class="n">IntBlock</span> <span class="nf">downCounter</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	 <span class="n">__block</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span><span class="line">	 <span class="k">return</span> <span class="n">Block_copy</span><span class="p">(</span> <span class="o">^</span><span class="kt">int</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">		 <span class="k">return</span> <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">	 <span class="p">});</span>
</span><span class="line"> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">IntBlock</span> <span class="n">f</span> <span class="o">=</span> <span class="n">downCounter</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">());</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">());</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">());</span>
</span><span class="line"><span class="n">Block_release</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>C++函数对象C++早期标准允许通过重载operator()来定义函数对象。这种对象的行为在某种程度上与函数式编程语言中的函数类似。它们可以在运行时动态创建，保存状态，但是不能如闭包一般隐式获取局部变量。
C++11标准已经支持了闭包，这是一种特殊的函数对象，由特殊的语言结构——lambda表达式自动构建。C++闭包中保存了全部nonlocal变量的拷贝或引用。如果是对外界环境中的对象的引用，且闭包执行时该外界环境的变量已经不存在（如在调用栈上已经unwinding），那么可导致undefined behavior，因为C++并不扩展这些被引用的外界环境的变量的生命期。</p>
<p>示例代码如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">void</span> <span class="n">foo</span><span class="p">(</span><span class="n">string</span> <span class="n">myname</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">names</span><span class="p">;</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span><span class="line">	<span class="n">names</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">	<span class="c1">// ...</span>
</span><span class="line">	<span class="n">names</span><span class="o">::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span>
</span><span class="line">	 <span class="n">find_if</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">n</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">){</span><span class="k">return</span> <span class="n">s</span> <span class="o">!=</span> <span class="n">myname</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">;});</span>
</span><span class="line">	<span class="c1">// &#39;i&#39; is now either &#39;n.end()&#39; or points to the first string in &#39;n&#39;</span>
</span><span class="line">	<span class="c1">// &#39;i&#39; 现在是&#39;n.end()&#39;或指向&#39;n&#39;中第一个</span>
</span><span class="line">	<span class="c1">// 不等于&#39;myname&#39;且长度大于&#39;y&#39;的字符串</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 8 体验推送]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/07/02/ios-8-ti-yan-tui-song/"/>
    <updated>2014-07-02T11:55:11+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/07/02/ios-8-ti-yan-tui-song</id>
    <content type="html"><![CDATA[<p> 一直更新了iOS8，但是一直没有开始研究这个iOS8，今天因为项目用到了推送，于是体验了iOS8的推送，先讲讲这个推送。目前分为四个推送：用户推送，本地推送，远程推送，地理位置推送。
</p>
<p><img src="http://ww3.sinaimg.cn/large/626e5d69gw1ehyeq298goj21kw0sadmt.jpg" alt="推送界面" /></p>

<h2>用户推送</h2>
<p>我们先开始讲这个用户推送,我们要使用之前必须先注册这个推送，用户要允许这个程序进行推送</p>
<p>注册过程：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Override point for customization after application launch.</span>
</span><span class="line">    <span class="n">UIUserNotificationType</span>  <span class="n">types</span> <span class="o">=</span> <span class="n">UIUserNotificationTypeBadge</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeAlert</span> <span class="p">;</span>
</span><span class="line">    <span class="n">UIUserNotificationSettings</span>  <span class="o">*</span><span class="n">mySettings</span>  <span class="o">=</span> <span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes:</span><span class="n">types</span> <span class="nl">categories:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings:</span><span class="n">mySettings</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterUserNotificationSettings:</span><span class="p">(</span><span class="n">UIUserNotificationSettings</span> <span class="o">*</span><span class="p">)</span><span class="nv">notificationSettings</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIUserNotificationType</span> <span class="n">allowTypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">notificationSettings</span> <span class="n">types</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getReadyForNotification</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIUserNotificationSettings</span> <span class="o">*</span><span class="n">currentNotificationSettings</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">currentUserNotificationSettings</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">checkSetting:</span><span class="n">currentNotificationSettings</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>总结就是三个方法进行注册</p>
<p><img src="http://ww4.sinaimg.cn/large/626e5d69gw1ehyeumz8inj21f80d40up.jpg" alt="推送注册三个方法" /></p>

<p>我们现在仅仅是注册了通知的设置，还要注册推送通知的行为，在iOS8中，行为能直接在推送消息进行，如回复消息，拒绝消息等</p>
<p><img src="http://ww1.sinaimg.cn/large/626e5d69gw1ehyeyi825mj21aa12ggoc.jpg" alt="直接在推送消息进行回复" /></p>
<p>这个真心碉堡了</p>
<p>我们如何能进行这些行为，首先我们需注册这些行为。</p>
<!-- more -->
<li>Actions</li>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIMutableUserNotificationAction</span> <span class="o">*</span><span class="n">acceptAction</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIMutableUserNotificationAction</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="n">acceptAction</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;RickAction&quot;</span><span class="p">;</span>
</span><span class="line"><span class="n">acceptAction</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;Accept&quot;</span><span class="p">;</span>
</span><span class="line"><span class="n">acceptAction</span><span class="p">.</span><span class="n">activationMode</span> <span class="o">=</span> <span class="n">UIUserNotificationActivationModeBackground</span><span class="p">;</span>
</span><span class="line"><span class="n">acceptAction</span><span class="p">.</span><span class="n">destructive</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line"><span class="n">acceptAction</span><span class="p">.</span><span class="n">authenticationRequired</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<li>Categories</li>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">UIMutableUserNotificationCategory</span> <span class="o">*</span><span class="n">inviteCategory</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIMutableUserNotificationCategory</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="n">inviteCategory</span><span class="p">.</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;INVITE_CATEGORY&quot;</span><span class="p">;</span>
</span><span class="line"><span class="p">[</span><span class="n">inviteCategory</span> <span class="nl">setActions:</span><span class="err">@</span><span class="p">[</span><span class="n">acceptAction</span><span class="p">]</span> <span class="nl">forContext:</span><span class="n">UIUserNotificationActionContextDefault</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们需要注意这个<code>UIUserNotificationActionContextDefault</code>,如果我们使用这个，我们会得到这个推送行为，Maybe和Accept</p>
<p><img src="http://ww1.sinaimg.cn/large/626e5d69gw1ehyf4bfhvrj20q80zytaw.jpg" alt="Maybe和Accept" /></p>
<p>我们还可以使用<code>UIUserNotificationActionContextMinimal</code>得到的是Decline和Accept行为</p>
<p><img src="http://ww3.sinaimg.cn/large/626e5d69gw1ehyf61ypo0j20q010476h.jpg" alt="Decline和Accept" /></p>

<li>Settings</li>
<p>在这些行为注册之后，我们加上之前提到的推送设置就完成了注册推送的这个流程了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">NSSet</span> <span class="o">*</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="n">inviteCategory</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class="line"><span class="n">UIUserNotificationType</span>  <span class="n">types</span> <span class="o">=</span> <span class="n">UIUserNotificationTypeBadge</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIUserNotificationTypeAlert</span> <span class="p">;</span>
</span><span class="line"><span class="n">UIUserNotificationSettings</span>  <span class="o">*</span><span class="n">mySettings</span>  <span class="o">=</span> <span class="p">[</span><span class="n">UIUserNotificationSettings</span> <span class="nl">settingsForTypes:</span><span class="n">types</span> <span class="nl">categories:</span><span class="n">categories</span><span class="p">];</span>
</span><span class="line"><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerUserNotificationSettings:</span><span class="n">mySettings</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h2>远程推送</h2>
<p>远程推送，所有消息大小不超过2KB,我们获取远程推送的json格式的消息，解析这个消息就是我们的远程推送了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="err">“aps”:</span> <span class="err">{</span>
</span><span class="line">        <span class="nt">&quot;content-available&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="nt">&quot;alert&quot;</span><span class="p">:</span> <span class="s2">&quot;This is the alert text&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nt">&quot;badge&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="nt">&quot;sound&quot;</span><span class="p">:</span> <span class="s2">&quot;default&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>若要使用远程推送，满足两个条件：一、用户需要调用注册用户推送<code>registerUserNotificationSettings</code>;二、在<code>info.plist</code>文件中<code>UIBackgroundModes</code>必须包含远程通知。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">registerForRemoteNotifications</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
	<p>这个注册通知的方法开始更改了</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">deviceToken</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFailToRegisterForRemoteNotificationsWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>iOS7通知代理方法</p>
<p><img src="http://ww4.sinaimg.cn/large/626e5d69gw1ehyfq2omeij21kw0zc456.jpg" alt="iOS6的通知代理方法" /></p>
<p>后来又增加了本地通知的代理方法</p>
<p><img src="http://ww4.sinaimg.cn/large/626e5d69gw1ehyfvjws4ej21kw0uxn20.jpg" alt="添加本地推送的通知代理方法" /></p>
<p>iOS8的推送代理方法只有两个了</p>
<p><img src="http://ww4.sinaimg.cn/large/626e5d69gw1ehyfws0hdfj210g0oyq6d.jpg" alt="iOS 8推送的通知代理方法" /></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">handleActionWithIdentifier:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">forLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">completionHandler</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">handleActionWithIdentifier:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">forRemoteNotification:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">userInfo</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">completionHandler</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">handleActionWithIdentifier:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">forLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">completionHandler</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">identifier</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;RickAction&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span> <span class="nl">handleAcceptActionWithNotification:</span><span class="n">notification</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">completionHandler</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleAcceptActionWithNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span><span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<h2>地理位置推送</h2>
<p>这个推送是新的API才有的特性,必须配合CLLocation定位一起使用。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="c1">//Location Notification</span>
</span><span class="line">    <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">locMan</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="n">locMan</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">locMan</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma mark - CLLocationManager</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="n">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didChangeAuthorizationStatus:</span><span class="p">(</span><span class="n">CLAuthorizationStatus</span><span class="p">)</span><span class="nv">status</span>
</span><span class="line">
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">BOOL</span> <span class="n">canUseLocationNotifications</span> <span class="o">=</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusAuthorizedWhenInUse</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">canUseLocationNotifications</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span> <span class="n">startShowLocationNotification</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didReceiveLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class="line">
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CLRegion</span> <span class="o">*</span><span class="n">region</span> <span class="o">=</span> <span class="n">notification</span><span class="p">.</span><span class="n">region</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">region</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startShowLocationNotification</span>
</span><span class="line">
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CLLocationCoordinate2D</span> <span class="n">local2D</span> <span class="p">;</span>
</span><span class="line">    <span class="n">local2D</span><span class="p">.</span><span class="n">latitude</span> <span class="o">=</span> <span class="mf">123.0</span><span class="p">;</span>
</span><span class="line">    <span class="n">local2D</span><span class="p">.</span><span class="n">longitude</span> <span class="o">=</span> <span class="mf">223.0</span><span class="p">;</span>
</span><span class="line">    <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">locNotification</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">    <span class="n">locNotification</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="s">@&quot;你接收到了&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">locNotification</span><span class="p">.</span><span class="n">regionTriggersOnce</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="n">locNotification</span><span class="p">.</span><span class="n">region</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLCircularRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCenter:</span><span class="n">local2D</span> <span class="nl">radius:</span><span class="mi">45</span> <span class="nl">identifier:</span><span class="s">@&quot;local-identity&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">locNotification</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
	<p>如果没有开启Core Location 那么上面的didReceiveLocalNotification不会被调用</p>
</blockquote>

<p>最后再总结一下，整个推送流程我觉得是这样子的，先注册推送，然后推送消息，客户端接收推送消息，执行推送行为。如果有错误，还请在文章下面评论，欢迎指正。</p>
<p><img src="http://ww2.sinaimg.cn/large/626e5d69gw1ehyg8u1o51j21ea0qkmz1.jpg" alt="推送的流程" /></p>

<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用VIPER构建iOS应用]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2014/06/20/shi-yong-vipergou-jian-iosying-yong/"/>
    <updated>2014-06-20T09:00:36+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2014/06/20/shi-yong-vipergou-jian-iosying-yong</id>
    <content type="html"><![CDATA[<script type="text/javascript">
    var wumiiPermaLink = ""; //请用代码生成文章永久的链接
    var wumiiTitle = ""; //请用代码生成文章标题
    var wumiiTags = ""; //请用代码生成文章标签，以英文逗号分隔，如："标签1,标签2"
    var wumiiCategories = []; //请用代码生成文章分类，分类名放在 JSONArray 中，如: ["分类1", "分类2"]
    var wumiiSitePrefix = "http://itmonkeylife.github.io/Blog/";
    var wumiiParams = "&num=5&mode=3&pf=JAVASCRIPT";
</script>

<script type="text/javascript" src="http://widget.wumii.cn/ext/relatedItemsWidget"></script>

<p><a href="http://www.wumii.com/widget/relatedItems" style="border:0;">
    <img src="http://static.wumii.cn/images/pixel.png" alt="无觅关联推荐，快速提升流量" style="border:0;padding:0;margin:0;" />
</a></p>

<p>建筑领域流行这样一句话，“我们虽然在营造建筑，但建筑也会重新塑造我们”。正如所有开发者最终领悟到的，这句话同样适用于构建软件。</p>

<p>编写代码中至关重要的是，需要使每一部分容易被识别，赋有一个特定而明显的目的，并与其他部分在逻辑关系中完美契合。这就是我们所说的软件架构。好的架构不仅让一个产品成功投入使用，还可以让产品具有可维护性，并让人不断头脑清醒的对它进行维护！</p>
<!-- more -->
<p>在这篇文章中，我们介绍了一种称之为 <a href="http://mutualmobile.github.io/blog/2013/12/04/viper-introduction/">VIPER</a> 的 iOS 应用架构的方式。VIPER 已经在很多大型的项目上成功实践，但是出于本文的目的我们将通过一个待办事项清单 (to-do app) 来介绍 VIPER 。你可以在 <a href="https://github.com/objcio/issue-13-viper">GitHub</a> 上关注这个项目。</p>

<p><video style="display:block;max-width:316px;height:auto;border:0;" poster="/issue-13/2014-06-07-viper-screenshot.png" controls="1"> <br />
  <source src="http://img.objccn.io//issue-13/2014-06-07-viper-preview.mp4" />
</video></p>

<h2 id="viper">什么是 VIPER？</h2>

<p>测试永远不是构建 iOS 应用的主要部分。当我们 (<a href="https://github.com/mutualmobile/">Mutual Mobile</a>) 着手改善我们的测试实践时，我们发现给 iOS 应用写测试代码非常困难。因此如果想要设法改变测试的现状，我们首先需要一个更好的方式来架构应用，我们称之为 VIPER。</p>

<p>VIPER 是一个创建 iOS 应用<a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">简明构架</a>的程序。VIPER 可以是视图 (View)，交互器 (Interactor)，展示器 (Presenter)，实体 (Entity) 以及路由 (Routing) 的首字母缩写。简明架构将一个应用程序的逻辑结构划分为不同的责任层。这使得它更容易隔离依赖项 (如数据库)，也更容易测试各层间的边界处的交互：</p>

<p><img alt="VIPER stands for View Interactor Presenter Entity Routing." src="http://img.objccn.io/issue-13/2014-06-07-viper-intro.jpg" /></p>

<p>大部分 iOS 应用利用 MVC 构建，使用 MVC 应用程序架构可以引导你将每一个类看做模型，视图或控制器中的一个。但由于大部分应用程序的逻辑不会存在于模型或视图中，所以通常最终总是在控制器里实现。这就导致一个称为<a href="https://twitter.com/Colin_Campbell/status/293167951132098560">重量级视图控制器</a>的问题，在这里，视图控制器做了太多工作。为这些重量级视图控制器<a href="http://www.objc.io/issue-1/lighter-view-controllers.html">瘦身</a>并不是 iOS 开发者寻求提高代码的质量所要面临的唯一挑战，但至少这是一个很好的开端。</p>

<p>VIPER 的不同层提供了明确的程序逻辑以及导航控制代码来应对这个挑战，利用 VIPER ，你会注意到在我们的待办事项示例清单中的视图控制器可以简洁高效，意义明确地控制视图。你也会发现视图控制器中代码和所有的其他类很容易理解，容易测试，理所当然也更易维护。</p>

<h2>基于用例的应用设计</h2>

<p>应用通常是一些用户用例的集合。用例也被称为验收标准，或行为集，它们用来描述应用的用途。清单可以根据时间，类型以及名字排序，这就是一个用例。用例是应用程序中用来负责业务逻辑的一层，应独立于用户界面的实现，同时要足够小，并且有良好的定义。决定如何将一个复杂的应用分解成较小的用例非常具有挑战性，并且需要长期实践，但这对于缩小你解决的问题时所要面临的范围及完成的每个类的所要涉及的内容来说，是很有帮助的。</p>

<p>利用 VIPER 建立一个应用需要实施一组套件来满足所有的用例，应用逻辑是实现用例的主要组成部分，但却不是唯一。用例也会影响用户界面。另一个重要的方面，是要考虑用例如何与其他应用程序的核心组件相互配合，例如网络和数据持久化。组件就好比用例的插件，VIPER 则用来描述这些组件的作用是什么，如何进行交互。</p>

<p>我们其中一个用例，或者说待办事项清单中其中的一个需求是可以基于用户的选择来将待办事项分组。通过分离的逻辑将数据组织成一个用例，我们能够在测试时使用户界面代码保持干净，用例更易组装，从而确保它如我们预期的方式工作。</p>

<h2 id="viper">VIPER 的主要部分</h2>

<p>VIPER 的主要部分是：</p>

<ul>
<li>视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。</li>
<li>交互器：包含由用例指定的业务逻辑。</li>
<li>展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。</li>
<li>实体：包含交互器要使用的基本模型对象。</li>
<li>路由：包含用来描述屏幕显示和显示顺序的导航逻辑。</li>
</ul>

<p>这种分隔形式同样遵循<a href="http://www.objectmentor.com/resources/articles/srp.pdf">单一责任原则</a>。交互器负责业务分析的部分，展示器代表交互设计师，而视图相当于视觉设计师。</p>

<p>以下则是不同组件的相关图解，并展示了他们之间是如何关联的：</p>

<p><img alt="VIPER breaks down an app into different components based around use cases, including components that create the user interface and the logic that powers it." src="http://img.objccn.io/issue-13/2014-06-07-viper-wireframe.png" /></p>

<p>虽然在应用中 VIPER 的组件可以以任意顺序实现，我们在这里选择按照我们推荐的顺序来进行介绍。你会注意到这个顺序与构建整个应用的进程大致符合 &#8211; 首先要讨论的是产品需要做什么，以及用户会如何与之交互。</p>

<h3>交互器</h3>

<p>交互器在应用中代表着一个独立的用例。它具有业务逻辑以操纵模型对象（实体）执行特定的任务。交互器中的工作应当独立与任何用户界面，同样的交互器可以同时运用于 iOS 应用或者 OS X 应用中。</p>

<p>由于交互器是一个 PONSO (Plain Old <code>NSObject</code>，普通的 <code>NSObject</code>)，它主要包含了逻辑，因此很容易使用 TDD 进行开发。</p>

<p>示例应用的主要用例是向用户展示所有的待办事项（比如任何截止于下周末的任务）。此类用例的业务逻辑主要是找出今天至下周末之间将要到期的待办事项，然后为它们分配一个相对的截止日期，比如今天，明天，本周以内，或者下周。</p>

<p>以下是来自 VTDListInteractor 的对应方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">findUpcomingItems</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">welf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="n">NSDate</span><span class="o">*</span> <span class="n">today</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">clock</span> <span class="n">today</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSDate</span><span class="o">*</span> <span class="n">endOfNextWeek</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">]</span> <span class="nl">dateForEndOfFollowingWeekWithDate:</span><span class="n">today</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataManager</span> <span class="nl">todoItemsBetweenStartDate:</span><span class="n">today</span> <span class="nl">endDate:</span><span class="n">endOfNextWeek</span> <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span><span class="o">*</span> <span class="n">todoItems</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">welf</span><span class="p">.</span><span class="n">output</span> <span class="nl">foundUpcomingItems:</span><span class="p">[</span><span class="n">welf</span> <span class="nl">upcomingItemsFromToDoItems:</span><span class="n">todoItems</span><span class="p">]];</span>
</span><span class="line">    <span class="p">}];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>实体</h3>

<p>实体是被交互器操作的模型对象，并且它们只被交互器所操作。交互器永远不会传输实体至表现层 (比如说展示器)。</p>

<p>实体也应该是 PONSOs。如果你使用 Core Data，最好是将托管对象保持在你的数据层之后，交互器不应与 NSManageObjects 协同工作。</p>

<p>这里是我们的待办事项服务的实体：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">VTDTodoItem</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span>   <span class="n">NSDate</span><span class="o">*</span>     <span class="n">dueDate</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span>     <span class="n">NSString</span><span class="o">*</span>   <span class="n">name</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">todoItemWithDueDate:</span><span class="p">(</span><span class="n">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">dueDate</span> <span class="nf">name:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不要诧异于你的实体仅仅是数据结构，任何依赖于应用的逻辑都应该放到交互器中。</p>

<h3>展示器</h3>

<p>展示器是一个主要包含了驱动用户界面的逻辑的 PONSO，它总是知道何时呈现用户界面。基于其收集来自用户交互的输入功能，它可以在合适的时候更新用户界面并向交互器发送请求。</p>

<p>当用户点击 “+” 键新建待办事项时，<code>addNewEntry</code> 被调用。对于此项操作，展示器会要求 <code>wireframe</code> 显示用户界面以增加新项目：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addNewEntry</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">listWireframe</span> <span class="n">presentAddInterface</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>展示器还会从交互器接收结果并将结果转换成能够在视图中有效显示的形式。</p>

<p>下面是如何从交互器接受待办事项的过程，其中包含了处理数据的过程并决定展现给用户哪些内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foundUpcomingItems:</span><span class="p">(</span><span class="n">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nv">upcomingItems</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">upcomingItems</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">userInterface</span> <span class="n">showNoContentMessage</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span> <span class="nl">updateUserInterfaceWithUpcomingItems:</span><span class="n">upcomingItems</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实体永远不会由交互器传输给展示器，取而代之，那些无行为的简单数据结构会从交互器传输到展示器那里。这就防止了那些“真正的工作”在展示器那里进行，展示器只能负责准备那些在视图里显示的数据。</p>

<h3>视图</h3>

<p>视图一般是被动的，它通常等待展示器下发需要显示的内容，而不会向其索取数据。视图（例如登录界面的登录视图控件）所定义的方法应该允许展示器在高度抽象的层次与之交流。展示器通过内容进行表达，而不关心那些内容所显示的样子。展示器不知道 <code>UILabel</code>，<code>UIButton</code> 等的存在，它只知道其中包含的内容以及何时需要显示。内容如何被显示是由视图来进行控制的。</p>

<p>视图是一个抽象的接口 (Interface)，在 Objective-C 中使用协议被定义。一个 <code>UIViewController</code> 或者它的一个子类会实现视图协议。比如我们的示例中 “添加” 界面会有以下接口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@protocol</span> <span class="nc">VTDAddViewInterface</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setEntryName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">name</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setEntryDueDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">date</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>视图和视图控制器同样会操纵用户界面和相关输入。因为通常来说视图控制器是最容易处理这些输入和执行某些操作的地方，所以也就不难理解为什么视图控制器总是这么大了。为了使视图控制器保持苗条，我们需要使它们在用户进行相关操作的时候可以有途径来通知相关部分。视图控制器不应当根据这些行为进行相关决定，但是它应当将发生的事件传递到能够做决定的部分。</p>

<p>在我们的例子中，Add View Controller 有一个事件处理的属性，它实现了如下接口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@protocol</span> <span class="nc">VTDAddModuleInterface</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelAddAction</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveAddActionWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="nf">dueDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">dueDate</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当用户点击取消键的时候，视图控制器告知这个事件处理程序用户需要其取消这次添加的动作。这样一来，事件处理程序便可以处理关闭 add view controller 并告知列表视图进行更新。</p>

<p>视图和展示器之间边界处是一个使用 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> 的好地方。在这个示例中，视图控制器可以返回一个代表按钮操作的信号。这将允许展示器在不打破职责分离的前提下轻松地对那些信号进行响应。</p>

<h3>路由</h3>

<p>屏幕间的路径会在交互设计师创建的线框 (wireframes) 里进行定义。在 VIPER 中，路由是由两个部分来负责的：展示器和线框。一个线框对象包括 <code>UIWindow</code>，<code>UINavigationController</code>，<code>UIViewController</code> 等部分，它负责创建视图/视图控制器并将其装配到窗口中。</p>

<p>由于展示器包含了响应用户输入的逻辑，因此它就拥有知晓何时导航至另一个屏幕以及具体是哪一个屏幕的能力。而同时，线框知道如何进行导航。在两者结合起来的情况下，展示器可以使用线框来进行实现导航功能，它们两者一起描述了从一个屏幕至另一个屏幕的路由过程。</p>

<p>线框同时也明显是一个处理导航转场动画的地方。来看看这个 add wireframe 中的例子吧：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">VTDAddWireframe</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">presentAddInterfaceFromViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">VTDAddViewController</span> <span class="o">*</span><span class="n">addViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">addViewController</span><span class="p">];</span>
</span><span class="line">    <span class="n">addViewController</span><span class="p">.</span><span class="n">eventHandler</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">addPresenter</span><span class="p">;</span>
</span><span class="line">    <span class="n">addViewController</span><span class="p">.</span><span class="n">modalPresentationStyle</span> <span class="o">=</span> <span class="n">UIModalPresentationCustom</span><span class="p">;</span>
</span><span class="line">    <span class="n">addViewController</span><span class="p">.</span><span class="n">transitioningDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">viewController</span> <span class="nl">presentViewController:</span><span class="n">addViewController</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">presentedViewController</span> <span class="o">=</span> <span class="n">viewController</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma mark - UIViewControllerTransitioningDelegate Methods</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">UIViewControllerAnimatedTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">animationControllerForDismissedController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">dismissed</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[[</span><span class="n">VTDAddDismissalTransition</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">UIViewControllerAnimatedTransitioning</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">animationControllerForPresentedController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">presented</span>
</span><span class="line">                                                                  <span class="nf">presentingController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">presenting</span>
</span><span class="line">                                                                      <span class="nf">sourceController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">source</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[[</span><span class="n">VTDAddPresentationTransition</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>应用使用了自定义的视图控制器转场来呈现 add view controller。因为线框部件负责实施这个转场，所以它成为了 add view controller 转场的委托，并且返回适当的转场动画。</p>

<h2 id="viper">利用 VIPER 组织应用组件</h2>

<p>iOS 应用的构架需要考虑到 UIKit 和 Cocoa Touch 是建立应用的主要工具。架构需要和应用的所有组件都能够和平相处，但又需要为如何使用框架的某些部分以及它们应该在什么位置提供一些指导和建议。</p>

<p>iOS 应用程序的主力是 <code>UIViewController</code>，我们不难想象找一个竞争者来取代 MVC 就可以避免大量使用视图控制器。但是视图控制器现在是这个平台的核心：它们处理设备方向的变化，回应用户的输入，和类似导航控制器之类的系统系统组件集成得很好，而现在在 iOS 7 中又能实现自定义屏幕之间的转换，功能实在是太强大了。</p>

<p>有了 VIPER，视图控制器便就能真正的做它本来应该做的事情了，那就是控制视图。 我们的待办事项应拥有两个视图控制器，一个是列表视图，另一个是新建待办。因为 add view controller 要做的所有事情就是控制视图，所以实现起来非常的简单基础：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">VTDAddViewController</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">gestureRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span>
</span><span class="line">                                                                                        <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">dismiss</span><span class="p">)];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">transitioningBackgroundView</span> <span class="nl">addGestureRecognizer:</span><span class="n">gestureRecognizer</span><span class="p">];</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">transitioningBackgroundView</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dismiss</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventHandler</span> <span class="n">cancelAddAction</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setEntryName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">nameTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setEntryDueDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">date</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">datePicker</span> <span class="nl">setDate:</span><span class="n">date</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">save:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventHandler</span> <span class="nl">saveAddActionWithName:</span><span class="n">self</span><span class="p">.</span><span class="n">nameTextField</span><span class="p">.</span><span class="n">text</span>
</span><span class="line">                                     <span class="nl">dueDate:</span><span class="n">self</span><span class="p">.</span><span class="n">datePicker</span><span class="p">.</span><span class="n">date</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">cancel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">eventHandler</span> <span class="n">cancelAddAction</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cp">#pragma mark - UITextFieldDelegate Methods</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textFieldShouldReturn:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">textField</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>应用在接入网络以后会变得更有用处，但是究竟该在什么时候联网呢？又由谁来负责启动网络连接呢？典型的情况下，由交互器来启动网络连接操作的项目，但是它不会直接处理网络代码。它会寻找一个像是 network manager 或者 API client 这样的依赖项。交互器可能聚合来自多个源的数据来提供所需的信息，从而完成一个用例。最终，就由展示器来采集交互器反馈的数据，然后组织并进行展示。</p>

<p>数据存储模块负责提供实体给交互器。因为交互器要完成业务逻辑，因此它需要从数据存储中获取实体并操纵它们，然后将更新后的实体再放回数据存储中。数据存储管理实体的持久化，而实体应该对数据库全然不知，正因如此，实体并不知道如何对自己进行持久化。</p>

<p>交互器同样不需要知道如何将实体持久化，有时交互器更希望使用一个 data manager 来使其与数据存储的交互变得容易。Data manager 可以处理更多的针对存储的操作，比如创建获取请求，构建查询等等。这就使交互器能够将更多的注意力放在应用逻辑上，而不必再了解实体是如何被聚集或持久化的。下面我们举一个例子来说明使用 data manager 有意义的，这个例子假设你在使用 Core Data。这是示例应用程序的 data manager 的接口：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">VTDListDataManager</span> : <span class="nc">NSObject</span>
</span><span class="line">
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">VTDCoreDataStore</span> <span class="o">*</span><span class="n">dataStore</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">todoItemsBetweenStartDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">startDate</span> <span class="nf">endDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">endDate</span> <span class="nf">completionBlock:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">todoItems</span><span class="p">))</span><span class="nv">completionBlock</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当使用 TDD 来开发一个交互器时，是可以用一个测试用的模拟存储来代替生产环境的数据存储的。避免与远程服务器通讯（网络服务）以及避免读取磁盘（数据库）可以加快你测试的速度并加强其可重复性。</p>

<p>将数据存储保持为一个界限清晰的特定层的原因之一是，这可以让你延迟选择一个特定的持久化技术。如果你的数据存储是一个独立的类，那你就可以使用一个基础的持久化策略来开始你的应用，然后等到有意义的时候升级至 SQLite 或者 Core Data。而因为数据存储层的存在，你的应用代码库中就不需要改变任何东西。</p>

<p>在 iOS 的项目中使用 Core Data 经常比构架本身还容易引起更多争议。然而，利用 VIPER 来使用 Core Data 将给你带来使用 Core Data 的前所未有的良好体验。在持久化数据的工具层面上，Core Data 可以保持快速存取和低内存占用方面，简直是个神器。但是有个很恼人的地方，它会像触须一样把 <code>NSManagedObjectContext</code>  延伸至你所有的应用实现文件中，特别是那些它们不该待的地方。VIPER 可以使 Core Data 待在正确的地方：数据存储层。</p>

<p>在待办事项示例中，应用仅有的两部分知道使用了 Core Data，其一是数据存储本身，它负责建立 Core Data 堆栈；另一个是 data manager。Data manager 执行了获取请求，将数据存储返回的 NSManagedObject 对象转换为标准的 PONSO 模型对象，并传输回业务逻辑层。这样一来，应用程序核心将不再依赖于 Core Data，附加得到的好处是，你也再也不用担心过期数据 (stale) 和没有良好组织的多线程 NSManagedObjects 来糟蹋你的工作成果了。</p>

<p>在通过请求访问 Core Data 存储时，data manager 中看起来是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">VTDListDataManager</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">todoItemsBetweenStartDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">startDate</span> <span class="nf">endDate:</span><span class="p">(</span><span class="n">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">endDate</span> <span class="nf">completionBlock:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">todoItems</span><span class="p">))</span><span class="nv">completionBlock</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">autoupdatingCurrentCalendar</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(date &gt;= %@) AND (date &lt;= %@)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">dateForBeginningOfDay:</span><span class="n">startDate</span><span class="p">],</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">dateForEndOfDay:</span><span class="n">endDate</span><span class="p">]];</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="err">@</span><span class="p">[];</span>
</span><span class="line">
</span><span class="line">    <span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">welf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataStore</span>
</span><span class="line">     <span class="nl">fetchEntriesWithPredicate:</span><span class="n">predicate</span>
</span><span class="line">     <span class="nl">sortDescriptors:</span><span class="n">sortDescriptors</span>
</span><span class="line">     <span class="nl">completionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span><span class="o">*</span> <span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">         <span class="k">if</span> <span class="p">(</span><span class="n">completionBlock</span><span class="p">)</span>
</span><span class="line">         <span class="p">{</span>
</span><span class="line">             <span class="n">completionBlock</span><span class="p">([</span><span class="n">welf</span> <span class="nl">todoItemsFromDataStoreEntries:</span><span class="n">entries</span><span class="p">]);</span>
</span><span class="line">         <span class="p">}</span>
</span><span class="line">     <span class="p">}];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nf">todoItemsFromDataStoreEntries:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">entries</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">entries</span> <span class="nl">arrayFromObjectsCollectedWithBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="n">VTDManagedTodoItem</span> <span class="o">*</span><span class="n">todo</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="p">[</span><span class="n">VTDTodoItem</span> <span class="nl">todoItemWithDueDate:</span><span class="n">todo</span><span class="p">.</span><span class="n">date</span> <span class="nl">name:</span><span class="n">todo</span><span class="p">.</span><span class="n">name</span><span class="p">];</span>
</span><span class="line">    <span class="p">}];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>与 Core Data 一样极富争议的恐怕就是 UI 故事板了。故事板具有很多有用的功能，如果完全忽视它将会是一个错误。然而，调用故事版所能提供的所有功能来完成 VIPER 的所有目标仍然是很困难的。</p>

<p>我们所能做出的妥协就是选择不使用 segues 。有时候使用 segues 是有效的，但是使用 segues 的危险性在于它们很难原封不动地保持屏幕之间的分离，以及 UI 和应用逻辑之间的分离。一般来说，如果实现 prepareForSegue 方法是必须的话，我们就尽量不去使用 segues。</p>

<p>除此之外，故事板是一个实现用户界面布局有效方法，特别是在使用自动布局的时候。我们选择在实现待办事项两个界面的实例中使用故事板，并且使用这样的代码来执行自己的导航操作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">ListViewControllerIdentifier</span> <span class="o">=</span> <span class="s">@&quot;VTDListViewController&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">VTDListWireframe</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">presentListInterfaceFromWindow:</span><span class="p">(</span><span class="n">UIWindow</span> <span class="o">*</span><span class="p">)</span><span class="nv">window</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">VTDListViewController</span> <span class="o">*</span><span class="n">listViewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">listViewControllerFromStoryboard</span><span class="p">];</span>
</span><span class="line">    <span class="n">listViewController</span><span class="p">.</span><span class="n">eventHandler</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">listPresenter</span><span class="p">;</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">listPresenter</span><span class="p">.</span><span class="n">userInterface</span> <span class="o">=</span> <span class="n">listViewController</span><span class="p">;</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">listViewController</span> <span class="o">=</span> <span class="n">listViewController</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">rootWireframe</span> <span class="nl">showRootViewController:</span><span class="n">listViewController</span>
</span><span class="line">                                      <span class="nl">inWindow:</span><span class="n">window</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">VTDListViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">listViewControllerFromStoryboard</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">mainStoryboard</span><span class="p">];</span>
</span><span class="line">    <span class="n">VTDListViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[</span><span class="n">storyboard</span> <span class="nl">instantiateViewControllerWithIdentifier:</span><span class="n">ListViewControllerIdentifier</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">viewController</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">UIStoryboard</span> <span class="o">*</span><span class="p">)</span><span class="nf">mainStoryboard</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">UIStoryboard</span> <span class="o">*</span><span class="n">storyboard</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIStoryboard</span> <span class="nl">storyboardWithName:</span><span class="s">@&quot;Main&quot;</span>
</span><span class="line">                                                         <span class="nl">bundle:</span><span class="p">[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]];</span>
</span><span class="line">    <span class="k">return</span> <span class="n">storyboard</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="viper">使用 VIPER 构建模块</h2>

<p>一般在使用 VIPER 的时候，你会发现一个屏幕或一组屏幕倾向于聚在一起作为一个模块。模块可以以多种形式体现，但一般最好把它想成是一种特性。在播客应用中，一个模块可能是音频播放器或订阅浏览器。然而在我们的待办事项应用中，列表和添加事项的屏幕都将作为单独的模块被建立。</p>

<p>将你的应用作为一组模块来设计有很多好处，其中之一就是模块可以有非常明确和定义良好的接口，并且独立于其他的模块。这就使增加或者移除特性变得更加简单，也使在界面中向用户展示各种可变模块变得更加简单。</p>

<p>我们希望能将待办事项中各模块之间分隔更加明确，我们为添加模块定义了两个协议。一个是模块接口，它定义了模块可以做什么；另一个则是模块的代理，用来描述该模块做了什么。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@protocol</span> <span class="nc">VTDAddModuleInterface</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cancelAddAction</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveAddActionWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span> <span class="nf">dueDate:</span><span class="p">(</span><span class="n">NSDate</span> <span class="o">*</span><span class="p">)</span><span class="nv">dueDate</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">@protocol</span> <span class="nc">VTDAddModuleDelegate</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">addModuleDidCancelAddAction</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addModuleDidSaveAddAction</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为模块必须要被展示，才能对用户产生价值，所以模块的展示器通常需要实现模型的接口。当另一个模型想要展现当前模块时，它的展示器就需要实现模型的委托协议，这样它就能在展示时知道当前模块做了些什么。</p>

<p>一个模块可能包括实体，交互器和管理器的通用应用逻辑层，这些通常可用于多个屏幕。当然，这取决于这些屏幕之间的交互及它们的相似度。一个模块可以像在待办事项列表里面一样，简单的只代表一个屏幕。这样一来，应用逻辑层对于它的特定模块的行为来说就非常特有了。</p>

<p>模块同样是组织代码的简便途径。将模块所有的编码都放在它自己的文件夹中并在 Xcode 中建一个 group，这会在你需要寻找和改变更加容易。当你在要寻找一个类时，它恰到好处地就在你所期待的地方，这种感觉真是无法形容的棒。</p>

<p>利用 VIPER 建立模块的另一个好处是它使得扩展到多平台时变得更加简单。独立在交互器层中的所有用例的应用逻辑允许你可以专注于为平板，电话或者 Mac 构建新的用户界面，同时可以重用你的应用层。</p>

<p>进一步来说，iPad 应用的用户界面能够将部分 iPhone 应用的视图，视图控制器及展示器进行再利用。在这种情况下，iPad 屏幕将由 ‘super’ 展示器和线框来代表，这样可以利用 iPhone 使用过的展示器和线框来组成屏幕。建立进而维护一个跨多平台的应用是一个巨大的挑战，但是好的构架可以对整个模型和应用层的再利用有大幅度的提升，并使其实现起来更加容易。</p>

<h2 id="viper">利用 VIPER 进行测试</h2>

<p>VIPER 的出现激发了一个关注点的分离，这使得采用 TDD 变得更加简便。交互器包含独立与任何 UI 的纯粹逻辑，这使测试驱动开发更加简单。同时展示器包含用来为显示准备数据的逻辑，并且它也独立于任何一个 UIKit 部件。对于这个逻辑的开发也很容易用测试来驱动。</p>

<p>我们更倾向于先从交互器下手。用户界面里所有部分都服务于用例，而通过采用 TDD 来测试驱动交互器的 API 可以让你对用户界面和用例之间的关系有一个更好的了解。</p>

<p>作为实例，我们来看一下负责待办事项列表的交互器。寻找待办事项的策略是要找出所有的将在下周末前截止的项目，并将这些项目分别归类至截止于今天，明天，本周或者下周。</p>

<p>我们编写的第一个测试是为了保证交互器能够找到所有的截止于下周末的待办事项：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFindingUpcomingItemsRequestsAllToDoItemsFromTodayThroughEndOfNextWeek</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">dataManager</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">todoItemsBetweenStartDate:</span><span class="n">self</span><span class="p">.</span><span class="n">today</span> <span class="nl">endDate:</span><span class="n">self</span><span class="p">.</span><span class="n">endOfNextWeek</span> <span class="nl">completionBlock:</span><span class="n">OCMOCK_ANY</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">interactor</span> <span class="n">findUpcomingItems</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一旦知道了交互器找到了正确的待办事项后，我们就需要编写几个小测试用来确认它确实将待办事项分配到了正确的相对日期组内（比如说今天，明天，等等）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFindingUpcomingItemsWithOneItemDueTodayReturnsOneUpcomingItemsForToday</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">todoItems</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">VTDTodoItem</span> <span class="nl">todoItemWithDueDate:</span><span class="n">self</span><span class="p">.</span><span class="n">today</span> <span class="nl">name:</span><span class="s">@&quot;Item 1&quot;</span><span class="p">]];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">dataStoreWillReturnToDoItems:</span><span class="n">todoItems</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">upcomingItems</span> <span class="o">=</span> <span class="err">@</span><span class="p">[[</span><span class="n">VTDUpcomingItem</span> <span class="nl">upcomingItemWithDateRelation:</span><span class="n">VTDNearTermDateRelationToday</span> <span class="nl">dueDate:</span><span class="n">self</span><span class="p">.</span><span class="n">today</span> <span class="nl">title:</span><span class="s">@&quot;Item 1&quot;</span><span class="p">]];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span> <span class="nl">expectUpcomingItems:</span><span class="n">upcomingItems</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">interactor</span> <span class="n">findUpcomingItems</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>既然我们已经知道了交互器的 API 长什么样，接下来就是开发展示器。一旦展示器接收到了交互器传来的待办事项，我们就需要测试看看我们是否适当的将数据进行格式化并且在用户界面中正确的显示它。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFoundZeroUpcomingItemsDisplaysNoContentMessage</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">ui</span> <span class="n">expect</span><span class="p">]</span> <span class="n">showNoContentMessage</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">presenter</span> <span class="nl">foundUpcomingItems:</span><span class="err">@</span><span class="p">[]];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFoundUpcomingItemForTodayDisplaysUpcomingDataWithNoDay</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">VTDUpcomingDisplayData</span> <span class="o">*</span><span class="n">displayData</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">displayDataWithSectionName:</span><span class="s">@&quot;Today&quot;</span>
</span><span class="line">                                                          <span class="nl">sectionImageName:</span><span class="s">@&quot;check&quot;</span>
</span><span class="line">                                                                 <span class="nl">itemTitle:</span><span class="s">@&quot;Get a haircut&quot;</span>
</span><span class="line">                                                                <span class="nl">itemDueDay:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">ui</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">showUpcomingDisplayData:</span><span class="n">displayData</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">gregorianCalendar</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSDate</span> <span class="o">*</span><span class="n">dueDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">dateWithYear:</span><span class="mi">2014</span> <span class="nl">month:</span><span class="mi">5</span> <span class="nl">day:</span><span class="mi">29</span><span class="p">];</span>
</span><span class="line">    <span class="n">VTDUpcomingItem</span> <span class="o">*</span><span class="n">haircut</span> <span class="o">=</span> <span class="p">[</span><span class="n">VTDUpcomingItem</span> <span class="nl">upcomingItemWithDateRelation:</span><span class="n">VTDNearTermDateRelationToday</span> <span class="nl">dueDate:</span><span class="n">dueDate</span> <span class="nl">title:</span><span class="s">@&quot;Get a haircut&quot;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">presenter</span> <span class="nl">foundUpcomingItems:</span><span class="err">@</span><span class="p">[</span><span class="n">haircut</span><span class="p">]];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFoundUpcomingItemForTomorrowDisplaysUpcomingDataWithDay</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">VTDUpcomingDisplayData</span> <span class="o">*</span><span class="n">displayData</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">displayDataWithSectionName:</span><span class="s">@&quot;Tomorrow&quot;</span>
</span><span class="line">                                                          <span class="nl">sectionImageName:</span><span class="s">@&quot;alarm&quot;</span>
</span><span class="line">                                                                 <span class="nl">itemTitle:</span><span class="s">@&quot;Buy groceries&quot;</span>
</span><span class="line">                                                                <span class="nl">itemDueDay:</span><span class="s">@&quot;Thursday&quot;</span><span class="p">];</span>
</span><span class="line">    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">ui</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">showUpcomingDisplayData:</span><span class="n">displayData</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">gregorianCalendar</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSDate</span> <span class="o">*</span><span class="n">dueDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">calendar</span> <span class="nl">dateWithYear:</span><span class="mi">2014</span> <span class="nl">month:</span><span class="mi">5</span> <span class="nl">day:</span><span class="mi">29</span><span class="p">];</span>
</span><span class="line">    <span class="n">VTDUpcomingItem</span> <span class="o">*</span><span class="n">groceries</span> <span class="o">=</span> <span class="p">[</span><span class="n">VTDUpcomingItem</span> <span class="nl">upcomingItemWithDateRelation:</span><span class="n">VTDNearTermDateRelationTomorrow</span> <span class="nl">dueDate:</span><span class="n">dueDate</span> <span class="nl">title:</span><span class="s">@&quot;Buy groceries&quot;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">presenter</span> <span class="nl">foundUpcomingItems:</span><span class="err">@</span><span class="p">[</span><span class="n">groceries</span><span class="p">]];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>同样需要测试的是应用是否在用户想要新建待办事项时正确启动了相应操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testAddNewToDoItemActionPresentsAddToDoUI</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">wireframe</span> <span class="n">expect</span><span class="p">]</span> <span class="n">presentAddInterface</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">presenter</span> <span class="n">addNewEntry</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这时我们可以开发视图功能了，并且在没有待办事项的时候我们想要展示一个特殊的信息。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testShowingNoContentMessageShowsNoContentView</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">showNoContentMessage</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">XCTAssertEqualObjects</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">view</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">noContentView</span><span class="p">,</span> <span class="s">@&quot;the no content view should be the view&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有待办事项出现时，我们要确保列表是显示出来的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testShowingUpcomingItemsShowsTableView</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">showUpcomingDisplayData:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">XCTAssertEqualObjects</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">view</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">tableView</span><span class="p">,</span> <span class="s">@&quot;the table view should be the view&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先建立交互器是一种符合 TDD 的自然规律。如果你首先开发交互器，紧接着是展示器，你就可以首先建立一个位于这些层的套件测试，并且为实现这是实例奠定基础。由于你不需要为了测试它们而去与用户界面进行交互，所以这些类可以进行快速迭代。在你需要开发视图的时候，你会有一个可以工作并测试过的逻辑和表现层来与其进行连接。在快要完成对视图的开发时，你会发现第一次运行程序时所有部件都运行良好，因为你所有已通过的测试已经告诉你它可以工作。</p>

<h2>结论</h2>

<p>我们希望你喜欢这篇对 VIPER 的介绍。或许你们都很好奇接下来应该做什么，如果你希望通过 VIPER 来对你下一个应用进行设计，该从哪里开始呢？</p>

<p>我们竭尽全力使这篇文章和我们利用 VIPER 实现的应用实例足够明确并且进行了很好的定义。我们的待办事项里列表程序相当直接简单，但是它准确地解释了如何利用 VIPER 来建立一个应用。在实际的项目中，你可以根据你自己的挑战和约束条件来决定要如何实践这个例子。根据以往的经验，我们的每个项目在使用 VIPER 时都或多或少地改变了一些策略，但它们无一例外的都从中得益，找到了正确的方向。</p>

<p>很多情况下由于某些原因，你可能会想要偏离 VIPER 所指引的道路。可能你遇到了很多 <a href="http://inessential.com/2014/03/16/smaller_please">&#8216;bunny&#8217;</a> 对象，或者你的应用使用了故事板的 segues。没关系的，在这些情况下，你只需要在做决定时稍微考虑下 VIPER 所代表的精神就好。VIPER 的核心在于它是建立在<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">单一责任原则</a>上的架构。如果你碰到了些许麻烦，想想这些原则再考虑如何前进。</p>

<p>你一定想知道在现有的应用中能否只用 VIPER 。在这种情况下，你可以考虑使用 VIPER 构建新的特性。我们许多现有项目都使用了这个方法。你可以利用 VIPER 建立一个模块，这能帮助你发现许多建立在单一责任原则基础上造成难以运用架构的现有问题。</p>

<p>软件开发最伟大的事情之一就是每个应用程序都是不同的，而设计每个应用的架构的方式也是不同的。这就意味着每个应用对于我们来说都是一个学习和尝试的机遇，如果你决定开始使用 VIPER，你会受益匪浅。感谢你的阅读。</p>

<h2 id="swifit">Swifit 补充</h2>

<p>苹果上周在 WWDC 介绍了一门称之为 <a href="https://developer.apple.com/swift/">Swift</a> 的编程语言来作为 Cocoa 和 Cocoa Touch 开发的未来。现在发表关于 Swift 的完整意见还为时尚早，但众所周知编程语言对我们如何设计和构建应用有着重大影响。我们决定使用 <a href="https://github.com/objcio/issue-13-viper-swift">Swift 重写我们的待办事项清单</a>，帮助我们学习它对 VIPER 意味着什么。至今为止，收获颇丰。Swift 中的一些特性对于构建应用的体验有着显著的提升。</p>

<h3>结构体</h3>

<p>在 VIPER 中我们使用小型，轻量级的 model 类来在比如从展示器到视图这样不同的层间传递数据。这些 PONSOs 通常是只是简单地带有少量数据，并且通常这些类不会被继承。Swift 的结构体非常适合这个情况。下面的结构体的例子来自 VIPER Swift。这个结构体需要被判断是否相等，所以我们重载了 == 操作符来比较这个类型的两个实例。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">struct</span> <span class="n">UpcomingDisplayItem</span> <span class="o">:</span> <span class="n">Equatable</span><span class="p">,</span> <span class="n">Printable</span> <span class="p">{</span>
</span><span class="line">    <span class="n">let</span> <span class="n">title</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">    <span class="n">let</span> <span class="n">dueDate</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">var</span> <span class="n">description</span> <span class="o">:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;\(title) -- \(dueDate)&quot;</span>
</span><span class="line">    <span class="p">}}</span>
</span><span class="line">
</span><span class="line">    <span class="n">init</span><span class="p">(</span><span class="nl">title:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">dueDate:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">dueDate</span> <span class="o">=</span> <span class="n">dueDate</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="o">==</span> <span class="p">(</span><span class="nl">leftSide:</span> <span class="n">UpcomingDisplayItem</span><span class="p">,</span> <span class="nl">rightSide:</span> <span class="n">UpcomingDisplayItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class="line">    <span class="n">var</span> <span class="n">hasEqualSections</span> <span class="o">=</span> <span class="n">false</span>
</span><span class="line">    <span class="n">hasEqualSections</span> <span class="o">=</span> <span class="n">rightSide</span><span class="p">.</span><span class="n">title</span> <span class="o">==</span> <span class="n">leftSide</span><span class="p">.</span><span class="n">title</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">hasEqualSections</span> <span class="o">==</span> <span class="n">false</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">false</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">hasEqualSections</span> <span class="o">=</span> <span class="n">rightSide</span><span class="p">.</span><span class="n">dueDate</span> <span class="o">==</span> <span class="n">rightSide</span><span class="p">.</span><span class="n">dueDate</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">hasEqualSections</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>类型安全</h3>

<p>也许 Objective-C 和 Swift 的最大区别是它们在对于类型处理上的不同。 Objective-C 是动态类型，而 Swift 故意在编译时做了严格的类型检查。对于一个类似 VIPER 的架构， 应用由不同层构成，类型安全是提升程序员效率和设计架构有非常大的好处。编译器帮助你确保正确类型的容器和对象在层的边界传递。如上所示，这是一个使用结构体的好地方。如果一个结构体的被设计为存在于两层之间，那么由于类型安全，你可以保证它将永远无法脱离这些层之间。</p>

<h2>扩展阅读</h2>

<ul>
<li><a href="https://github.com/objcio/issue-13-viper">VIPER TODO, 文章示例</a></li>
<li><a href="https://github.com/objcio/issue-13-viper-swift">VIPER SWIFT, 基于 Swift 的文章示例</a></li>
<li><a href="https://github.com/mutualmobile/Counter">另一个计数器应用</a></li>
<li><a href="http://mutualmobile.github.io/blog/2013/12/04/viper-introduction/">Mutual Mobile 关于 VIPER 的介绍</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2011/11/22/Clean-Architecture.html">简明架构</a></li>
<li><a href="http://objccn.io/issue-1-1/">更轻量的 View Controllers</a></li>
<li><a href="http://objccn.io/issue-1-3/">测试 View Controllers</a></li>
<li><a href="http://inessential.com/2014/03/16/smaller_please">Bunnies</a></li>
</ul>

<script type="text/javascript" id="wumiiRelatedItems"></script>

<hr />
<p class="post-footer">
                        written by <a href="http://ITMonkeyLife.github.io/Blog">Rick</a>&nbsp;posted at <a href="http://ITMonkeyLife.github.io/Blog">http://ITMonkeyLife.github.io/Blog</a></p>
]]></content>
  </entry>
  
</feed>
