<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | IT Monkey Life]]></title>
  <link href="http://ITMonkeyLife.github.io/Blog/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ITMonkeyLife.github.io/Blog/"/>
  <updated>2016-10-25T08:33:59+08:00</updated>
  <id>http://ITMonkeyLife.github.io/Blog/</id>
  <author>
    <name><![CDATA[Rick]]></name>
    <email><![CDATA[382542165@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[面向对象之数据抽象]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/10/14/mian-xiang-dui-xiang-zhi-shu-ju-chou-xiang/"/>
    <updated>2016-10-14T16:33:04+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/10/14/mian-xiang-dui-xiang-zhi-shu-ju-chou-xiang</id>
    <content type="html"><![CDATA[<h3 id="oo-programming">OO Programming</h3>
<p>Java中的编程主要基于构建数据类型。 这种编程风格被称为面向对象编程，因为它围绕着对象的概念，对象是一个保存数据类型值的实体。 对于Java的原始类型，我们主要局限于对数字进行操作的程序，但是对于引用类型，我们可以编写操作字符串，图片，声音或者在Java标准库中或在我们的书站上可用的数百个其他抽象中的任何一个 。 比预定义数据类型的库更重要的是，Java编程中可用的数据类型范围是开放式的，因为您可以定义自己的数据类型。
1. 数据类型。 数据类型是一组值和一组对这些值的操作。
2. 抽象数据类型。 抽象数据类型是其内部表示对客户端隐藏的数据类型。
3. 对象。 对象是可以接受数据类型值的实体。 对象的特征在于三个基本属性：对象的状态是来自其数据类型的值; 对象的身份将一个对象与另一个对象区分开; 对象的行为是数据类型操作的影响。 在Java中，引用是访问对象的机制。
4. 应用程序编程接口（API）。 为了指定抽象数据类型的行为，我们使用一个应用程序编程接口（API），它是构造函数和实例方法（操作）的列表，并对每个函数的效果进行非正式描述，如本计数器的API一样：
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_counter-api.png" /><br />
5. 客户。 客户端是使用数据类型的程序。
6. 实现。 实现是实现API中指定的数据类型的代码。</p>

<h3 id="section">使用抽象数据类型。</h3>
<p>客户端不需要知道数据类型是如何实现的，以便能够使用它。
1. 创建对象。 每个数据类型值存储在对象中。 要创建（或实例化）单个对象，我们使用关键字new调用构造函数。 每次客户端使用new时，系统为对象分配内存空间，初始化其值，并返回对对象的引用。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_constructor.png" /><br />
2. 调用实例方法。 实例方法的目的是对数据类型值进行操作。 实例方法具有静态方法的所有属性：参数通过值传递，方法名称可以重载，它们可能具有返回值，并且它们可能导致副作用。 他们有一个额外的属性，表征他们：每个调用与一个对象相关联。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogrithms_1.2_instance-method.png" /><br />
3. 使用对象。 声明给了我们可以在代码中使用的对象的变量名。 要使用给定的数据类型，我们：
	* 声明类型的变量，用于引用对象
  * 使用关键字new来调用创建类型对象的构造函数
  * 使用对象名称来调用实例方法，作为语句或表达式
例如，<a href="http://algs4.cs.princeton.edu/12oop/Flips.java.html">Flips.java</a>是一个<a href="http://algs4.cs.princeton.edu/12oop/Counter.java.html">Counter.java</a>客户端，它接受命令行参数T并模拟T硬币翻转。
4. 分配语句。 具有引用类型的赋值语句创建引用的副本（并且不创建新对象）。 这种情况称为别名：两个变量都指向相同的对象。 别名是Java程序中常见的错误来源，如以下示例所示：
<code>java
Counter c1 = new Counter("ones");
c1.increment();
Counter c2 = c1;
c2.increment();
StdOut.println(c1);
</code>
代码打印字符串“2 ones”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之程序模型]]></title>
    <link href="http://ITMonkeyLife.github.io/Blog/blog/2016/10/13/suan-fa-zhi-cheng-xu-mo-xing/"/>
    <updated>2016-10-13T20:41:28+08:00</updated>
    <id>http://ITMonkeyLife.github.io/Blog/blog/2016/10/13/suan-fa-zhi-cheng-xu-mo-xing</id>
    <content type="html"><![CDATA[<p>
我们对算法的研究是基于将它们实现为用Java编程语言编写的程序。 我们这样做有几个原因：
<ul>
<li> 我们的程序是简洁，优雅，完整的算法描述。</li>
<li> 您可以运行程序来研究算法的属性。</li>
<li> 您可以立即在应用程序中使用算法。</li>
</ul>
</p>
<p>
<h2>原始数据类型和表达式</h2> <em>数据类型</em> 是一组值和一组对这些值的操作。以下四种基本数据类型是Java语言的基础：
<ul>
<li>整数，带算术运算（int）</li>
<li>实数，再次与算术运算(<tt>double</tt>)</li>
<li>布尔值，带有逻辑运算符的值{true，false}的集合（布尔）</li>
<li>字符，您键入的字母数字字符和符号（char）</li>
</ul>
Java程序操作以标识符命名的变量。 每个变量与数据类型相关联，并存储允许的数据类型值之一。 我们使用表达式来应用与每个类型相关联的操作。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_building-blocks.png" />
<br />下表总结了对于Java的int，double，boolean和char数据类型的值的集合和最常见的操作。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_primitive.png" />
<ul>
<li>表达式。 典型的表达式是中缀。 当表达式包含多个运算符时，优先级顺序指定它们的应用顺序：运算符*和/（和％）的优先级高于（应用于）+和 - 运算符; 在逻辑运算符之间！ 是最高优先级，后跟&amp;&amp;和然后||。 通常，相同优先级的运算符是左关联的（从左到右应用）。 您可以使用括号来覆盖这些规则。</li>
<li>类型转换。 如果没有丢失信息，则数字将自动提升为更具包容性的类型。例如，在表达式1 + 2.5中，1被提升为双精度值1.0，表达式的值为双精度值3.5。 转换是将一个类型的值转换为另一个类型的值的指令。 例如（int）3.7是3.将double转换为int将截断到零。</li>
<li>比较。 以下混合类型运算符比较相同类型的两个值并生成布尔值：
<ul>
<li>相等 (==)</li>
<li>不等 (!=)</li>
<li>小于 (&lt;)</li>
<li><em>小于等于</em> (&lt;=)</li>
<li><em>大于</em> (&gt;)</li>
<li><em>大于等于</em> (&gt;=)</li>
</ul></li>
<li>其他原语类型。
Java的int有一个32位的表示; Java的double类型具有64位表示。 Java有五种额外的原始数据类型：
<ul>
<li>64位整数，带算术运算（长整型）</li>
<li>16位整数，带算术运算（短）</li>
<li>16位字符，带算术运算（char）</li>
<li>8位整数，带算术运算（字节）</li>
<li>32位单精度实数，带算术运算（float）</li>
</ul></li>
</ul>
<br />
</p>

<p><h2>语句</h2>Java程序由语句组成，语句通过创建和操作变量，为其分配数据类型值以及控制这些操作的执行流程来定义计算。
<ul>
<li>声明创建指定类型的变量，并用标识符命名它们。 Java是一种强类型语言，因为Java编译器检查一致性。 变量的范围是定义它的程序的一部分。</li>
<li>分配将数据类型值（由表达式定义）与变量关联。</li>
<li>初始化声明将声明与赋值相结合，以便在声明变量的同时初始化变量。</li>
<li>隐式分配。 当我们的目的是修改变量相对于当前值的值时，可以使用以下快捷键：
<ul>
<li>递增/递减运算符：代码i ++是i = i + 1的缩写。除了表达式值是在递增/递减之后，而不是之前，代码++ i是相同的。</li>
<li>其他复合运算符：代码i / = 2是i = i / 2的缩写。</li>
</ul></li>
<li>条件提供了执行流程的简单改变 - 根据指定的条件，在两个块中的一个块中执行语句。</li>
<li>循环提供了执行流程中更深刻的变化 - 只要给定条件为真，就执行块中的语句。 我们将循环中的块中的语句称为循环体。</li>
<li>break和continue。 Java支持在while循环中使用两个附加语句：
<ul>
<li>break语句，它立即退出循环</li>
<li>continue语句，它立即开始循环的下一次迭代</li>
</ul></li>
<li>符号。 许多循环遵循这个方案：将索引变量初始化为某个值，然后使用while循环测试涉及索引变量的循环继续条件，其中while循环中的最后一个语句增加索引变量。 你可以用Java的表示法来表达这样的循环。</li>
<li>单语句块。 如果条件或循环中的语句块只有一个语句，则可以省略花括号。</li>
</ul>
下表说明了不同种类的Java语句。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_statements.png" />
</p>
<p>
<h2>数组。</h2> 数组存储所有相同类型的值序列。 如果我们有N个值，我们可以使用符号a [i]来指代从0到N-1的i的任何值的第i个值。
<ul>
<li>创建和初始化数组。 在Java程序中创建数组涉及三个不同的步骤：
<ul>
<li>声明数组的类型和名称</li>
<li>创建数组</li>
<li>初始化数组的值</li>
</ul></li>
<li>默认数组初始化。 对于代码更简洁，我们经常利用Java的默认数组初始化约定，并将所有三个步骤组合成一个语句。 对于数字类型，默认初始值为零，对于类型布尔值为false。</li>
<li>初始化声明。 我们可以在编译时指定初始化值，方法是在花括号之间列出文字值，用逗号分隔。</li>
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_array.png" />
<li>使用数组。 一旦我们创建一个数组，它的大小是固定的。 程序可以使用代码a.length引用数组a []的长度。 Java执行自动边界检查 - 如果你访问一个非法索引的数组，你的程序将终止ArrayIndexOutOfBoundsException。</li>
<li>别名。 数组名称引用整个数组 - 如果我们将一个数组名称指定给另一个数组名称，那么它们都引用相同的数组，如下面的代码片段所示。
```java
int[] a = new int[N];
...
a[i] = 1234;
...
int[] b = a;
...
b[i] = 5678;   // a[i] is now 5678.
```
这种情况被称为混叠，并且可能导致微妙的错误。</li>
<li>二维数组。 Java中的二维数组是一维数组的数组。 二维阵列可以是粗糙的（其阵列可以都具有不同的长度），但是我们最常使用（对于适当的参数M和N）M乘N的二维阵列。 为了引用二维数组a [] []的行i和列j中的条目，我们使用符号a [i] [j]。</li>
</ul>
</p>
<p>
<h2>静态方法。</h2> 静态方法在许多编程语言中被称为函数，因为它们可以表现得像数学函数。 每个静态方法是一系列语句，它们在调用静态方法时一个接一个执行。
<ul>
<li>定义静态方法。 方法封装被定义为语句序列的计算。 方法接受参数（给定数据类型的值），并计算一些数据类型的返回值或导致副作用。 每个静态方法由签名和主体组成。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_static-method.png" /></li>
<li>调用静态方法。 对静态方法的调用是其名称，后跟表达式，指定括号中的参数值，用逗号分隔。 当一个方法被调用时，它的参数变量用调用中相应表达式的值初始化。 返回语句终止静态方法，将控制权返回给调用者。 如果静态方法是计算值，则必须在return语句中指定该值。</li>
<li>方法的属性。 Java方法具有以下特性：
<ul>
<li>参数通过值传递。 调用函数时，参数值将完全求值，并将结果值复制到参数变量中。 这称为值传递。 数组（和其他对象）引用也通过值传递：方法不能更改引用，但它可以更改数组中的条目（或对象的值）。</li>
<li>方法名称可以重载。 类中的方法可以具有相同的名称，只要它们具有不同的签名。 此功能称为重载。</li>
<li>方法具有单个返回值，但可能有多个返回语句。 Java方法只能提供一个返回值。 一旦达到第一个return语句，控制就返回调用程序。</li>
<li>一种方法可能有副作用。 方法可以使用关键字void作为其返回类型，以指示它没有返回值，并产生副作用（消耗输入，产生输出，改变数组中的条目，或以其它方式改变系统的状态）。</li>
</ul></li>
<li>递归。 递归方法是直接或间接调用自身的方法。 开发递归程序有三个重要的经验法则：
<ul>
<li>递归具有基本案例。</li>
<li>递归调用必须解决在某种意义上较小的子问题，因此递归调用会收敛到基本情况。</li>
<li>递归调用不应解决重叠的子问题。</li>
</ul></li>
<li>基本编程模型。 静态方法库是一组在Java类中定义的静态方法。 Java编程的基本模型是开发一个程序，通过创建一个静态方法库，其中一个名为main（），来解决特定的计算任务。</li>
<li>模块化编程。 静态方法的库允许模块化编程，其中一个库中的静态方法可以调用其他库中定义的静态方法。 这种方法有许多重要的优点。
<ul>
<li>使用合理大小的模块</li>
<li>共享和重用代码，而不必重新实现它</li>
<li>替代改进的实现</li>
<li>为解决编程问题开发适当的抽象模型</li>
<li>本地化调试</li>
</ul></li>
<li>单元测试。 Java编程的最佳实践是在每个测试库中的方法的静态方法库中包含一个main（）。</li>
<li>外部库。 我们使用来自四种不同类型库的静态方法，每种都需要（略）不同的代码重用程序。</li>
<ul>
<li>java.lang中的标准系统库，包括java.lang.Math，java.lang.Integer和java.lang.Double。</li>
<li>导入的系统库，如java.util.Arrays。 在程序开始时需要一个import语句来使用这样的库。</li>
<li>我们开发用的标准库。 要使用这样的程序，请将源码下载到您的工作目录中，或按照<a href="http://algs4.cs.princeton.edu/code">以下说明</a>将<a href="http://algs4.cs.princeton.edu/code/stdlib.jar">stdlib.jar</a>添加到类路径中。</li>
</ul>
要从另一个库调用方法，我们将库名称作为每个调用的方法名称的前缀：Math.sqrt（），Arrays.sort（），BinarySearch.rank（）和StdIn.readInt（）。
</ul>
</p>
<p>
<h2>字符串</h2>
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_string.png" />
<ul>
<li>串联</li>
<li>转换</li>
<li>自动转换。</li>
<li>命令行参数。</li>
</ul>
</p>

<p>
输入与输出
<ul>
<li>命令和参数。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_command.png" /></li>
<li>标准输出</li>
<li>格式化输出
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_printf.png" /></li>
<li>标准输入</li>
<li>重定向和管道。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_redirect.png" /></li>
<li>从文件输入和输出。</li>
<li>标准绘图</li>
</ul>
</p>
<p>
<h2>二进制搜索。</h2> 下面是一个完整的Java程序<a href="http://algs4.cs.princeton.edu/11model/BinarySearch.java.html">BinarySearch.java</a>，它说明了我们的编程模型的许多基本特性。 它实现了一种称为二进制搜索的经典算法，并针对称为白名单过滤的应用程序对其进行测试。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_binary-search-anatomy.png" />
<br />
静态方法rank（）使用整数键和int值的排序数组作为参数，并返回键的索引（如果它存在于数组中），否则为-1。 它通过维护变量lo和hi来完成这个任务，使得如果在数组中，则密钥在[lo..hi]中，然后进入测试间隔中的中间条目（在索引mid）的循环。 如果键等于[mid]，返回值为mid; 否则，该方法将大约一半的间隔大小，如果该键小于a [mid]，则查看左半部分，如果该键大于[mid]，则查看右半部分。 当找到键或间隔为空时，进程终止。
<br /><img src="http://ITMonkeyLife.github.io/Blog/images/algorithms/alogorithms_1.1_binary-search.png" />
<ul>
<li>开发客户端</li>
<li>白名单</li>
<li>性能</li>
</ul>
</p>

<p>
输入和输出库。 这里是一个输入和输出库的列表.

<table>
  <tr>
  <th><b /></th>
  <th><b>程序</b></th>
  <th><b>描述 / JAVA文档</b></th>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="read numbers and text from standard input" href="http://algs4.cs.princeton.edu/stdlib/StdIn.java.html">StdIn.java</a></td>
  <td><a title="read numbers and text from standard input" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdIn.html">从标准输入读取数字和文本</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="write numbers and text to standard output" href="http://algs4.cs.princeton.edu/stdlib/StdOut.java.html">StdOut.java</a></td>
  <td><a title="write numbers and text to standard output" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdOut.html">将数字和文本写入标准输出</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="draw geometric shapes in a window" href="http://algs4.cs.princeton.edu/stdlib/StdDraw.java.html">StdDraw.java</a></td>
  <td><a title="draw geometric shapes in a window" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdDraw.html">在窗口中绘制几何形状</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#1.5">1.5</a></td>
  <td><a title="create, play, and manipulate sound" href="http://algs4.cs.princeton.edu/stdlib/StdAudio.java.html">StdAudio.java</a></td>
  <td><a title="create, play, and manipulate sound" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdAudio.html">创建，播放和操纵声音</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="generate random numbers" href="http://algs4.cs.princeton.edu/stdlib/StdRandom.java.html">StdRandom.java</a></td>
  <td><a title="generate random numbers" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdRandom.html">生成随机数</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="compute statistics" href="http://algs4.cs.princeton.edu/stdlib/StdStats.java.html">StdStats.java</a></td>
  <td><a title="compute statistics" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdStats.html">计算统计</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/22library/index.php#2.2">2.2</a></td>
  <td><a title="read and write 1D and 2D arrays" href="http://algs4.cs.princeton.edu/stdlib/StdArrayIO.java.html">StdArrayIO.java</a></td>
  <td><a title="read and write 1D and 2D arrays" href="http://algs4.cs.princeton.edu/stdlib/javadoc/StdArrayIO.html">读取和写入1D和2D阵列</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="read numbers and text from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/In.java.html">In.java</a></td>
  <td><a title="read numbers and text from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/javadoc/In.html">从文件和URL读取数字和文本</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="write numbers and text to files" href="http://algs4.cs.princeton.edu/stdlib/Out.java.html">Out.java</a></td>
  <td><a title="write numbers and text to files" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Out.html">写数字和文本到文件</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="draw geometric shapes" href="http://algs4.cs.princeton.edu/stdlib/Draw.java.html">Draw.java</a></td>
  <td><a title="draw geometric shapes" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Draw.html">绘制几何形状</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/31datatype/index.php#3.1">3.1</a></td>
  <td><a title="process digital images" href="http://algs4.cs.princeton.edu/stdlib/Picture.java.html">Picture.java</a></td>
  <td><a title="process digital images" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Picture.html">过程数字图像</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/32class/index.php#3.2">3.2</a></td>
  <td><a title="measure running time" href="http://algs4.cs.princeton.edu/stdlib/Stopwatch.java.html">Stopwatch.java</a></td>
  <td><a title="measure running time" href="http://algs4.cs.princeton.edu/stdlib/javadoc/Stopwatch.html">测量运行时间</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="write bits to standard output" href="http://algs4.cs.princeton.edu/stdlib/BinaryStdOut.java.html">BinaryStdOut.java</a></td>
  <td><a title="write bits to standard output" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryStdOut.html">写位到标准输出</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="read bits from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/BinaryIn.java.html">BinaryIn.java</a></td>
  <td><a title="read bits from files and URLs" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryIn.html">从文件和URL读取位</a></td>
  </tr>
  <tr>
  <td><a href="http://introcs.cs.princeton.edu/15inout/index.php#-">-</a></td>
  <td><a title="write bits to files" href="http://algs4.cs.princeton.edu/stdlib/BinaryOut.java.html">BinaryOut.java</a></td>
  <td><a title="write bits to files" href="http://algs4.cs.princeton.edu/stdlib/javadoc/BinaryOut.html">写位到文件</a></td>
  </tr>
</table>

我们简要描述输入和输出库，并包括一个示例客户端。
</p>

<p>标准输入和标准输出。 <a href="http://algs4.cs.princeton.edu/11model/StdIn.java.html">StdIn.java</a>和<a href="http://algs4.cs.princeton.edu/11model/StdOut.java.html">StdOut.java</a>是用于从标准输入中读取数字和文本以及将数字和文本打印到标准输出的库。 我们的版本有一个比相应的Java接口更简单的接口（并提供一些技术改进）。 <a href="http://algs4.cs.princeton.edu/11model/RandomSeq.java.html">RandomSeq.java</a>生成给定范围内的随机数。 <a href="http://algs4.cs.princeton.edu/11model/Average.java.html">Average.java</a>从标准输入读取一系列实数，并在标准输出上打印它们的平均值。
```
% java Average
10.0 5.0 6.0 3.0 7.0 32.0
3.14 6.67 17.71
<ctrl-d>
Average is 10.05777777777778
```
<a href="http://algs4.cs.princeton.edu/11model/In.java.html">In.java</a>和<a href="http://algs4.cs.princeton.edu/11model/Out.java.html">Out.java</a>是面向对象的版本，支持多个输入和输出流，包括从文件或URL读取和写入文件。


<p>
标准绘制。 <a href="http://algs4.cs.princeton.edu/11model/StdDraw.java.html">StdDraw.java</a>是一个易于使用的库，用于绘制几何形状，如点，线和圆。 <a href="http://algs4.cs.princeton.edu/11model/RightTriangle.java.html">RightTriangle.java</a>绘制一个直角三角形和一个外接圆。
<a href="http://algs4.cs.princeton.edu/11model/Draw.java.html">Draw.java</a>是一个面向对象的版本，支持在多个窗口中绘制。
</p>
<p>
标准音频。 <a href="http://algs4.cs.princeton.edu/11model/StdAudio.java.html">StdAudio.java</a>是一个易于使用的库合成声音。 <a href="http://algs4.cs.princeton.edu/11model/Tone.java.html">Tone.java</a>从命令行读取频率和持续时间，并且在给定持续时间内声化给定频率的正弦波。
```
% java Tone 440.0 3.0
```
</p>

<p>
图像处理。 <a href="http://algs4.cs.princeton.edu/11model/Picture.java.html">Picture.java</a>是一个易于使用的图像处理库。 <a href="http://algs4.cs.princeton.edu/11model/Scale.java.html">Scale.java</a>使用图片文件的名称和两个整数（width w和height h）作为命令行参数，并将图像缩放为w-by-h。
</p>

<hr />
</ctrl-d></p>
]]></content>
  </entry>
  
</feed>
